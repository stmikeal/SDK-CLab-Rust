
SDK_cLAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  2000d000  2000d000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a18  2000d190  2000d190  0000d190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  2000fba8  2000fba8  0000fba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20010040  20010040  000100d4  2**0
                  CONTENTS
  4 .ARM          00000008  20010040  20010040  00010040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  20010048  200100d4  000100d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20010048  20010048  00010048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  2001004c  2001004c  0001004c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20010050  20010050  00010050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200100d4  200100d4  000100d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010214  20010214  000100d4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000100d4  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  0001010a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134d6  00000000  00000000  000101b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b19  00000000  00000000  00023687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  000271a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a18  00000000  00000000  00027a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000201c8  00000000  00000000  00028458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008a6c  00000000  00000000  00048620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c347e  00000000  00000000  0005108c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001798  00000000  00000000  0011450c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_pubnames 000008e1  00000000  00000000  00115ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_pubtypes 000003d0  00000000  00000000  00116585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00001e5d  00000000  00000000  00116955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

2000d190 <deregister_tm_clones>:
2000d190:	4803      	ldr	r0, [pc, #12]	; (2000d1a0 <deregister_tm_clones+0x10>)
2000d192:	4b04      	ldr	r3, [pc, #16]	; (2000d1a4 <deregister_tm_clones+0x14>)
2000d194:	4283      	cmp	r3, r0
2000d196:	d002      	beq.n	2000d19e <deregister_tm_clones+0xe>
2000d198:	4b03      	ldr	r3, [pc, #12]	; (2000d1a8 <deregister_tm_clones+0x18>)
2000d19a:	b103      	cbz	r3, 2000d19e <deregister_tm_clones+0xe>
2000d19c:	4718      	bx	r3
2000d19e:	4770      	bx	lr
2000d1a0:	200100d4 	.word	0x200100d4
2000d1a4:	200100d4 	.word	0x200100d4
2000d1a8:	00000000 	.word	0x00000000

2000d1ac <register_tm_clones>:
2000d1ac:	4805      	ldr	r0, [pc, #20]	; (2000d1c4 <register_tm_clones+0x18>)
2000d1ae:	4906      	ldr	r1, [pc, #24]	; (2000d1c8 <register_tm_clones+0x1c>)
2000d1b0:	1a0b      	subs	r3, r1, r0
2000d1b2:	0fd9      	lsrs	r1, r3, #31
2000d1b4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
2000d1b8:	1049      	asrs	r1, r1, #1
2000d1ba:	d002      	beq.n	2000d1c2 <register_tm_clones+0x16>
2000d1bc:	4b03      	ldr	r3, [pc, #12]	; (2000d1cc <register_tm_clones+0x20>)
2000d1be:	b103      	cbz	r3, 2000d1c2 <register_tm_clones+0x16>
2000d1c0:	4718      	bx	r3
2000d1c2:	4770      	bx	lr
2000d1c4:	200100d4 	.word	0x200100d4
2000d1c8:	200100d4 	.word	0x200100d4
2000d1cc:	00000000 	.word	0x00000000

2000d1d0 <__do_global_dtors_aux>:
2000d1d0:	b510      	push	{r4, lr}
2000d1d2:	4c06      	ldr	r4, [pc, #24]	; (2000d1ec <__do_global_dtors_aux+0x1c>)
2000d1d4:	7823      	ldrb	r3, [r4, #0]
2000d1d6:	b943      	cbnz	r3, 2000d1ea <__do_global_dtors_aux+0x1a>
2000d1d8:	f7ff ffda 	bl	2000d190 <deregister_tm_clones>
2000d1dc:	4b04      	ldr	r3, [pc, #16]	; (2000d1f0 <__do_global_dtors_aux+0x20>)
2000d1de:	b113      	cbz	r3, 2000d1e6 <__do_global_dtors_aux+0x16>
2000d1e0:	4804      	ldr	r0, [pc, #16]	; (2000d1f4 <__do_global_dtors_aux+0x24>)
2000d1e2:	f3af 8000 	nop.w
2000d1e6:	2301      	movs	r3, #1
2000d1e8:	7023      	strb	r3, [r4, #0]
2000d1ea:	bd10      	pop	{r4, pc}
2000d1ec:	200100d4 	.word	0x200100d4
2000d1f0:	00000000 	.word	0x00000000
2000d1f4:	2000fb90 	.word	0x2000fb90

2000d1f8 <frame_dummy>:
2000d1f8:	b508      	push	{r3, lr}
2000d1fa:	4b04      	ldr	r3, [pc, #16]	; (2000d20c <frame_dummy+0x14>)
2000d1fc:	b11b      	cbz	r3, 2000d206 <frame_dummy+0xe>
2000d1fe:	4904      	ldr	r1, [pc, #16]	; (2000d210 <frame_dummy+0x18>)
2000d200:	4804      	ldr	r0, [pc, #16]	; (2000d214 <frame_dummy+0x1c>)
2000d202:	f3af 8000 	nop.w
2000d206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2000d20a:	e7cf      	b.n	2000d1ac <register_tm_clones>
2000d20c:	00000000 	.word	0x00000000
2000d210:	200100d8 	.word	0x200100d8
2000d214:	2000fb90 	.word	0x2000fb90

2000d218 <__errno>:
2000d218:	4b01      	ldr	r3, [pc, #4]	; (2000d220 <__errno+0x8>)
2000d21a:	6818      	ldr	r0, [r3, #0]
2000d21c:	4770      	bx	lr
2000d21e:	bf00      	nop
2000d220:	20010050 	.word	0x20010050

2000d224 <__libc_init_array>:
2000d224:	b570      	push	{r4, r5, r6, lr}
2000d226:	4e0d      	ldr	r6, [pc, #52]	; (2000d25c <__libc_init_array+0x38>)
2000d228:	4d0d      	ldr	r5, [pc, #52]	; (2000d260 <__libc_init_array+0x3c>)
2000d22a:	1b76      	subs	r6, r6, r5
2000d22c:	10b6      	asrs	r6, r6, #2
2000d22e:	d006      	beq.n	2000d23e <__libc_init_array+0x1a>
2000d230:	2400      	movs	r4, #0
2000d232:	3401      	adds	r4, #1
2000d234:	f855 3b04 	ldr.w	r3, [r5], #4
2000d238:	4798      	blx	r3
2000d23a:	42a6      	cmp	r6, r4
2000d23c:	d1f9      	bne.n	2000d232 <__libc_init_array+0xe>
2000d23e:	4e09      	ldr	r6, [pc, #36]	; (2000d264 <__libc_init_array+0x40>)
2000d240:	4d09      	ldr	r5, [pc, #36]	; (2000d268 <__libc_init_array+0x44>)
2000d242:	1b76      	subs	r6, r6, r5
2000d244:	f002 fca4 	bl	2000fb90 <_init>
2000d248:	10b6      	asrs	r6, r6, #2
2000d24a:	d006      	beq.n	2000d25a <__libc_init_array+0x36>
2000d24c:	2400      	movs	r4, #0
2000d24e:	3401      	adds	r4, #1
2000d250:	f855 3b04 	ldr.w	r3, [r5], #4
2000d254:	4798      	blx	r3
2000d256:	42a6      	cmp	r6, r4
2000d258:	d1f9      	bne.n	2000d24e <__libc_init_array+0x2a>
2000d25a:	bd70      	pop	{r4, r5, r6, pc}
2000d25c:	20010048 	.word	0x20010048
2000d260:	20010048 	.word	0x20010048
2000d264:	2001004c 	.word	0x2001004c
2000d268:	20010048 	.word	0x20010048

2000d26c <_vsiprintf_r>:
2000d26c:	b530      	push	{r4, r5, lr}
2000d26e:	b09b      	sub	sp, #108	; 0x6c
2000d270:	4d07      	ldr	r5, [pc, #28]	; (2000d290 <_vsiprintf_r+0x24>)
2000d272:	9100      	str	r1, [sp, #0]
2000d274:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
2000d278:	9104      	str	r1, [sp, #16]
2000d27a:	4669      	mov	r1, sp
2000d27c:	9405      	str	r4, [sp, #20]
2000d27e:	e9cd 4502 	strd	r4, r5, [sp, #8]
2000d282:	f000 f8ef 	bl	2000d464 <_svfiprintf_r>
2000d286:	9b00      	ldr	r3, [sp, #0]
2000d288:	2200      	movs	r2, #0
2000d28a:	701a      	strb	r2, [r3, #0]
2000d28c:	b01b      	add	sp, #108	; 0x6c
2000d28e:	bd30      	pop	{r4, r5, pc}
2000d290:	ffff0208 	.word	0xffff0208

2000d294 <vsiprintf>:
2000d294:	b410      	push	{r4}
2000d296:	4c04      	ldr	r4, [pc, #16]	; (2000d2a8 <vsiprintf+0x14>)
2000d298:	4613      	mov	r3, r2
2000d29a:	460a      	mov	r2, r1
2000d29c:	4601      	mov	r1, r0
2000d29e:	6820      	ldr	r0, [r4, #0]
2000d2a0:	f85d 4b04 	ldr.w	r4, [sp], #4
2000d2a4:	f7ff bfe2 	b.w	2000d26c <_vsiprintf_r>
2000d2a8:	20010050 	.word	0x20010050

2000d2ac <__ssputs_r>:
2000d2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000d2b0:	688e      	ldr	r6, [r1, #8]
2000d2b2:	461d      	mov	r5, r3
2000d2b4:	42ae      	cmp	r6, r5
2000d2b6:	460c      	mov	r4, r1
2000d2b8:	680b      	ldr	r3, [r1, #0]
2000d2ba:	4617      	mov	r7, r2
2000d2bc:	d836      	bhi.n	2000d32c <__ssputs_r+0x80>
2000d2be:	4680      	mov	r8, r0
2000d2c0:	8988      	ldrh	r0, [r1, #12]
2000d2c2:	f410 6f90 	tst.w	r0, #1152	; 0x480
2000d2c6:	d10e      	bne.n	2000d2e6 <__ssputs_r+0x3a>
2000d2c8:	4635      	mov	r5, r6
2000d2ca:	4618      	mov	r0, r3
2000d2cc:	462a      	mov	r2, r5
2000d2ce:	4639      	mov	r1, r7
2000d2d0:	f000 fcd0 	bl	2000dc74 <memmove>
2000d2d4:	68a2      	ldr	r2, [r4, #8]
2000d2d6:	6823      	ldr	r3, [r4, #0]
2000d2d8:	1b96      	subs	r6, r2, r6
2000d2da:	442b      	add	r3, r5
2000d2dc:	60a6      	str	r6, [r4, #8]
2000d2de:	6023      	str	r3, [r4, #0]
2000d2e0:	2000      	movs	r0, #0
2000d2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d2e6:	e9d1 1604 	ldrd	r1, r6, [r1, #16]
2000d2ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
2000d2ee:	eba3 0901 	sub.w	r9, r3, r1
2000d2f2:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
2000d2f6:	1c6b      	adds	r3, r5, #1
2000d2f8:	1076      	asrs	r6, r6, #1
2000d2fa:	444b      	add	r3, r9
2000d2fc:	42b3      	cmp	r3, r6
2000d2fe:	4632      	mov	r2, r6
2000d300:	bf84      	itt	hi
2000d302:	461e      	movhi	r6, r3
2000d304:	4632      	movhi	r2, r6
2000d306:	0543      	lsls	r3, r0, #21
2000d308:	d512      	bpl.n	2000d330 <__ssputs_r+0x84>
2000d30a:	4611      	mov	r1, r2
2000d30c:	4640      	mov	r0, r8
2000d30e:	f000 fd6f 	bl	2000ddf0 <_malloc_r>
2000d312:	4682      	mov	sl, r0
2000d314:	b300      	cbz	r0, 2000d358 <__ssputs_r+0xac>
2000d316:	464a      	mov	r2, r9
2000d318:	6921      	ldr	r1, [r4, #16]
2000d31a:	f000 fc11 	bl	2000db40 <memcpy>
2000d31e:	89a3      	ldrh	r3, [r4, #12]
2000d320:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
2000d324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000d328:	81a3      	strh	r3, [r4, #12]
2000d32a:	e006      	b.n	2000d33a <__ssputs_r+0x8e>
2000d32c:	462e      	mov	r6, r5
2000d32e:	e7cc      	b.n	2000d2ca <__ssputs_r+0x1e>
2000d330:	4640      	mov	r0, r8
2000d332:	f000 fdc1 	bl	2000deb8 <_realloc_r>
2000d336:	4682      	mov	sl, r0
2000d338:	b150      	cbz	r0, 2000d350 <__ssputs_r+0xa4>
2000d33a:	eba6 0209 	sub.w	r2, r6, r9
2000d33e:	eb0a 0309 	add.w	r3, sl, r9
2000d342:	6166      	str	r6, [r4, #20]
2000d344:	f8c4 a010 	str.w	sl, [r4, #16]
2000d348:	6023      	str	r3, [r4, #0]
2000d34a:	60a2      	str	r2, [r4, #8]
2000d34c:	462e      	mov	r6, r5
2000d34e:	e7bc      	b.n	2000d2ca <__ssputs_r+0x1e>
2000d350:	6921      	ldr	r1, [r4, #16]
2000d352:	4640      	mov	r0, r8
2000d354:	f000 fcf6 	bl	2000dd44 <_free_r>
2000d358:	230c      	movs	r3, #12
2000d35a:	f8c8 3000 	str.w	r3, [r8]
2000d35e:	89a3      	ldrh	r3, [r4, #12]
2000d360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000d364:	81a3      	strh	r3, [r4, #12]
2000d366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000d36a:	e7ba      	b.n	2000d2e2 <__ssputs_r+0x36>

2000d36c <__ssprint_r>:
2000d36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000d370:	6893      	ldr	r3, [r2, #8]
2000d372:	b083      	sub	sp, #12
2000d374:	4690      	mov	r8, r2
2000d376:	2b00      	cmp	r3, #0
2000d378:	d06d      	beq.n	2000d456 <__ssprint_r+0xea>
2000d37a:	6817      	ldr	r7, [r2, #0]
2000d37c:	688d      	ldr	r5, [r1, #8]
2000d37e:	4682      	mov	sl, r0
2000d380:	460c      	mov	r4, r1
2000d382:	6808      	ldr	r0, [r1, #0]
2000d384:	3708      	adds	r7, #8
2000d386:	e043      	b.n	2000d410 <__ssprint_r+0xa4>
2000d388:	89a3      	ldrh	r3, [r4, #12]
2000d38a:	f413 6f90 	tst.w	r3, #1152	; 0x480
2000d38e:	d02e      	beq.n	2000d3ee <__ssprint_r+0x82>
2000d390:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
2000d394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
2000d398:	eba0 0b01 	sub.w	fp, r0, r1
2000d39c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
2000d3a0:	eb0b 0006 	add.w	r0, fp, r6
2000d3a4:	106d      	asrs	r5, r5, #1
2000d3a6:	3001      	adds	r0, #1
2000d3a8:	42a8      	cmp	r0, r5
2000d3aa:	462a      	mov	r2, r5
2000d3ac:	bf84      	itt	hi
2000d3ae:	4605      	movhi	r5, r0
2000d3b0:	462a      	movhi	r2, r5
2000d3b2:	055b      	lsls	r3, r3, #21
2000d3b4:	d536      	bpl.n	2000d424 <__ssprint_r+0xb8>
2000d3b6:	4611      	mov	r1, r2
2000d3b8:	4650      	mov	r0, sl
2000d3ba:	f000 fd19 	bl	2000ddf0 <_malloc_r>
2000d3be:	2800      	cmp	r0, #0
2000d3c0:	d03a      	beq.n	2000d438 <__ssprint_r+0xcc>
2000d3c2:	465a      	mov	r2, fp
2000d3c4:	6921      	ldr	r1, [r4, #16]
2000d3c6:	9001      	str	r0, [sp, #4]
2000d3c8:	f000 fbba 	bl	2000db40 <memcpy>
2000d3cc:	89a2      	ldrh	r2, [r4, #12]
2000d3ce:	9b01      	ldr	r3, [sp, #4]
2000d3d0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
2000d3d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2000d3d8:	81a2      	strh	r2, [r4, #12]
2000d3da:	eba5 020b 	sub.w	r2, r5, fp
2000d3de:	eb03 000b 	add.w	r0, r3, fp
2000d3e2:	6165      	str	r5, [r4, #20]
2000d3e4:	6123      	str	r3, [r4, #16]
2000d3e6:	6020      	str	r0, [r4, #0]
2000d3e8:	60a2      	str	r2, [r4, #8]
2000d3ea:	4635      	mov	r5, r6
2000d3ec:	46b3      	mov	fp, r6
2000d3ee:	465a      	mov	r2, fp
2000d3f0:	4649      	mov	r1, r9
2000d3f2:	f000 fc3f 	bl	2000dc74 <memmove>
2000d3f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
2000d3fa:	68a2      	ldr	r2, [r4, #8]
2000d3fc:	6820      	ldr	r0, [r4, #0]
2000d3fe:	1b55      	subs	r5, r2, r5
2000d400:	4458      	add	r0, fp
2000d402:	1b9e      	subs	r6, r3, r6
2000d404:	60a5      	str	r5, [r4, #8]
2000d406:	6020      	str	r0, [r4, #0]
2000d408:	f8c8 6008 	str.w	r6, [r8, #8]
2000d40c:	b31e      	cbz	r6, 2000d456 <__ssprint_r+0xea>
2000d40e:	3708      	adds	r7, #8
2000d410:	e957 9602 	ldrd	r9, r6, [r7, #-8]
2000d414:	46ab      	mov	fp, r5
2000d416:	2e00      	cmp	r6, #0
2000d418:	d0f9      	beq.n	2000d40e <__ssprint_r+0xa2>
2000d41a:	42ae      	cmp	r6, r5
2000d41c:	d2b4      	bcs.n	2000d388 <__ssprint_r+0x1c>
2000d41e:	4635      	mov	r5, r6
2000d420:	46b3      	mov	fp, r6
2000d422:	e7e4      	b.n	2000d3ee <__ssprint_r+0x82>
2000d424:	4650      	mov	r0, sl
2000d426:	f000 fd47 	bl	2000deb8 <_realloc_r>
2000d42a:	4603      	mov	r3, r0
2000d42c:	2800      	cmp	r0, #0
2000d42e:	d1d4      	bne.n	2000d3da <__ssprint_r+0x6e>
2000d430:	6921      	ldr	r1, [r4, #16]
2000d432:	4650      	mov	r0, sl
2000d434:	f000 fc86 	bl	2000dd44 <_free_r>
2000d438:	230c      	movs	r3, #12
2000d43a:	f8ca 3000 	str.w	r3, [sl]
2000d43e:	89a3      	ldrh	r3, [r4, #12]
2000d440:	2200      	movs	r2, #0
2000d442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000d446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000d44a:	81a3      	strh	r3, [r4, #12]
2000d44c:	e9c8 2201 	strd	r2, r2, [r8, #4]
2000d450:	b003      	add	sp, #12
2000d452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000d456:	2000      	movs	r0, #0
2000d458:	f8c8 0004 	str.w	r0, [r8, #4]
2000d45c:	b003      	add	sp, #12
2000d45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000d462:	bf00      	nop

2000d464 <_svfiprintf_r>:
2000d464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000d468:	4690      	mov	r8, r2
2000d46a:	898a      	ldrh	r2, [r1, #12]
2000d46c:	b09f      	sub	sp, #124	; 0x7c
2000d46e:	0614      	lsls	r4, r2, #24
2000d470:	468b      	mov	fp, r1
2000d472:	9002      	str	r0, [sp, #8]
2000d474:	d503      	bpl.n	2000d47e <_svfiprintf_r+0x1a>
2000d476:	690a      	ldr	r2, [r1, #16]
2000d478:	2a00      	cmp	r2, #0
2000d47a:	f000 810b 	beq.w	2000d694 <_svfiprintf_r+0x230>
2000d47e:	9305      	str	r3, [sp, #20]
2000d480:	2330      	movs	r3, #48	; 0x30
2000d482:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
2000d486:	f898 3000 	ldrb.w	r3, [r8]
2000d48a:	4e8e      	ldr	r6, [pc, #568]	; (2000d6c4 <_svfiprintf_r+0x260>)
2000d48c:	2100      	movs	r1, #0
2000d48e:	2220      	movs	r2, #32
2000d490:	910b      	str	r1, [sp, #44]	; 0x2c
2000d492:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
2000d496:	2701      	movs	r7, #1
2000d498:	2b00      	cmp	r3, #0
2000d49a:	f000 8084 	beq.w	2000d5a6 <_svfiprintf_r+0x142>
2000d49e:	2b25      	cmp	r3, #37	; 0x25
2000d4a0:	f000 80f6 	beq.w	2000d690 <_svfiprintf_r+0x22c>
2000d4a4:	4645      	mov	r5, r8
2000d4a6:	e003      	b.n	2000d4b0 <_svfiprintf_r+0x4c>
2000d4a8:	2b25      	cmp	r3, #37	; 0x25
2000d4aa:	f000 8086 	beq.w	2000d5ba <_svfiprintf_r+0x156>
2000d4ae:	4625      	mov	r5, r4
2000d4b0:	786b      	ldrb	r3, [r5, #1]
2000d4b2:	1c6c      	adds	r4, r5, #1
2000d4b4:	2b00      	cmp	r3, #0
2000d4b6:	d1f7      	bne.n	2000d4a8 <_svfiprintf_r+0x44>
2000d4b8:	ebb4 0a08 	subs.w	sl, r4, r8
2000d4bc:	d073      	beq.n	2000d5a6 <_svfiprintf_r+0x142>
2000d4be:	4642      	mov	r2, r8
2000d4c0:	4653      	mov	r3, sl
2000d4c2:	4659      	mov	r1, fp
2000d4c4:	9802      	ldr	r0, [sp, #8]
2000d4c6:	f7ff fef1 	bl	2000d2ac <__ssputs_r>
2000d4ca:	3001      	adds	r0, #1
2000d4cc:	d06b      	beq.n	2000d5a6 <_svfiprintf_r+0x142>
2000d4ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
2000d4d0:	786a      	ldrb	r2, [r5, #1]
2000d4d2:	4453      	add	r3, sl
2000d4d4:	930b      	str	r3, [sp, #44]	; 0x2c
2000d4d6:	2a00      	cmp	r2, #0
2000d4d8:	d065      	beq.n	2000d5a6 <_svfiprintf_r+0x142>
2000d4da:	2300      	movs	r3, #0
2000d4dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2000d4e0:	3401      	adds	r4, #1
2000d4e2:	9306      	str	r3, [sp, #24]
2000d4e4:	e9cd 3308 	strd	r3, r3, [sp, #32]
2000d4e8:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
2000d4ec:	931c      	str	r3, [sp, #112]	; 0x70
2000d4ee:	9207      	str	r2, [sp, #28]
2000d4f0:	e005      	b.n	2000d4fe <_svfiprintf_r+0x9a>
2000d4f2:	9a06      	ldr	r2, [sp, #24]
2000d4f4:	fa07 f303 	lsl.w	r3, r7, r3
2000d4f8:	4313      	orrs	r3, r2
2000d4fa:	462c      	mov	r4, r5
2000d4fc:	9306      	str	r3, [sp, #24]
2000d4fe:	4625      	mov	r5, r4
2000d500:	2205      	movs	r2, #5
2000d502:	f815 1b01 	ldrb.w	r1, [r5], #1
2000d506:	4630      	mov	r0, r6
2000d508:	f000 faca 	bl	2000daa0 <memchr>
2000d50c:	46aa      	mov	sl, r5
2000d50e:	1b83      	subs	r3, r0, r6
2000d510:	2800      	cmp	r0, #0
2000d512:	d1ee      	bne.n	2000d4f2 <_svfiprintf_r+0x8e>
2000d514:	9b06      	ldr	r3, [sp, #24]
2000d516:	06d9      	lsls	r1, r3, #27
2000d518:	bf44      	itt	mi
2000d51a:	2220      	movmi	r2, #32
2000d51c:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
2000d520:	7821      	ldrb	r1, [r4, #0]
2000d522:	071a      	lsls	r2, r3, #28
2000d524:	bf44      	itt	mi
2000d526:	222b      	movmi	r2, #43	; 0x2b
2000d528:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
2000d52c:	292a      	cmp	r1, #42	; 0x2a
2000d52e:	d148      	bne.n	2000d5c2 <_svfiprintf_r+0x15e>
2000d530:	9a05      	ldr	r2, [sp, #20]
2000d532:	6811      	ldr	r1, [r2, #0]
2000d534:	3204      	adds	r2, #4
2000d536:	2900      	cmp	r1, #0
2000d538:	9205      	str	r2, [sp, #20]
2000d53a:	db7e      	blt.n	2000d63a <_svfiprintf_r+0x1d6>
2000d53c:	9109      	str	r1, [sp, #36]	; 0x24
2000d53e:	7861      	ldrb	r1, [r4, #1]
2000d540:	1ca5      	adds	r5, r4, #2
2000d542:	292e      	cmp	r1, #46	; 0x2e
2000d544:	d056      	beq.n	2000d5f4 <_svfiprintf_r+0x190>
2000d546:	4c60      	ldr	r4, [pc, #384]	; (2000d6c8 <_svfiprintf_r+0x264>)
2000d548:	2203      	movs	r2, #3
2000d54a:	4620      	mov	r0, r4
2000d54c:	f000 faa8 	bl	2000daa0 <memchr>
2000d550:	2800      	cmp	r0, #0
2000d552:	d068      	beq.n	2000d626 <_svfiprintf_r+0x1c2>
2000d554:	1b00      	subs	r0, r0, r4
2000d556:	9b06      	ldr	r3, [sp, #24]
2000d558:	2440      	movs	r4, #64	; 0x40
2000d55a:	fa04 f000 	lsl.w	r0, r4, r0
2000d55e:	4303      	orrs	r3, r0
2000d560:	9306      	str	r3, [sp, #24]
2000d562:	f105 0801 	add.w	r8, r5, #1
2000d566:	7829      	ldrb	r1, [r5, #0]
2000d568:	4858      	ldr	r0, [pc, #352]	; (2000d6cc <_svfiprintf_r+0x268>)
2000d56a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
2000d56e:	2206      	movs	r2, #6
2000d570:	f000 fa96 	bl	2000daa0 <memchr>
2000d574:	2800      	cmp	r0, #0
2000d576:	d066      	beq.n	2000d646 <_svfiprintf_r+0x1e2>
2000d578:	4b55      	ldr	r3, [pc, #340]	; (2000d6d0 <_svfiprintf_r+0x26c>)
2000d57a:	2b00      	cmp	r3, #0
2000d57c:	d056      	beq.n	2000d62c <_svfiprintf_r+0x1c8>
2000d57e:	ab05      	add	r3, sp, #20
2000d580:	9300      	str	r3, [sp, #0]
2000d582:	465a      	mov	r2, fp
2000d584:	4b53      	ldr	r3, [pc, #332]	; (2000d6d4 <_svfiprintf_r+0x270>)
2000d586:	9802      	ldr	r0, [sp, #8]
2000d588:	a906      	add	r1, sp, #24
2000d58a:	f3af 8000 	nop.w
2000d58e:	4681      	mov	r9, r0
2000d590:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
2000d594:	d007      	beq.n	2000d5a6 <_svfiprintf_r+0x142>
2000d596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
2000d598:	444b      	add	r3, r9
2000d59a:	930b      	str	r3, [sp, #44]	; 0x2c
2000d59c:	f898 3000 	ldrb.w	r3, [r8]
2000d5a0:	2b00      	cmp	r3, #0
2000d5a2:	f47f af7c 	bne.w	2000d49e <_svfiprintf_r+0x3a>
2000d5a6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
2000d5aa:	065b      	lsls	r3, r3, #25
2000d5ac:	bf54      	ite	pl
2000d5ae:	980b      	ldrpl	r0, [sp, #44]	; 0x2c
2000d5b0:	f04f 30ff 	movmi.w	r0, #4294967295	; 0xffffffff
2000d5b4:	b01f      	add	sp, #124	; 0x7c
2000d5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000d5ba:	ebb4 0a08 	subs.w	sl, r4, r8
2000d5be:	d08c      	beq.n	2000d4da <_svfiprintf_r+0x76>
2000d5c0:	e77d      	b.n	2000d4be <_svfiprintf_r+0x5a>
2000d5c2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
2000d5c6:	2a09      	cmp	r2, #9
2000d5c8:	bf88      	it	hi
2000d5ca:	46a2      	movhi	sl, r4
2000d5cc:	d8b9      	bhi.n	2000d542 <_svfiprintf_r+0xde>
2000d5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000d5d0:	e001      	b.n	2000d5d6 <_svfiprintf_r+0x172>
2000d5d2:	462c      	mov	r4, r5
2000d5d4:	3501      	adds	r5, #1
2000d5d6:	7829      	ldrb	r1, [r5, #0]
2000d5d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
2000d5dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
2000d5e0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
2000d5e4:	2a09      	cmp	r2, #9
2000d5e6:	46aa      	mov	sl, r5
2000d5e8:	d9f3      	bls.n	2000d5d2 <_svfiprintf_r+0x16e>
2000d5ea:	292e      	cmp	r1, #46	; 0x2e
2000d5ec:	f104 0502 	add.w	r5, r4, #2
2000d5f0:	9309      	str	r3, [sp, #36]	; 0x24
2000d5f2:	d1a8      	bne.n	2000d546 <_svfiprintf_r+0xe2>
2000d5f4:	f89a 1001 	ldrb.w	r1, [sl, #1]
2000d5f8:	292a      	cmp	r1, #42	; 0x2a
2000d5fa:	d12e      	bne.n	2000d65a <_svfiprintf_r+0x1f6>
2000d5fc:	9b05      	ldr	r3, [sp, #20]
2000d5fe:	f89a 1002 	ldrb.w	r1, [sl, #2]
2000d602:	681a      	ldr	r2, [r3, #0]
2000d604:	9207      	str	r2, [sp, #28]
2000d606:	3304      	adds	r3, #4
2000d608:	2a00      	cmp	r2, #0
2000d60a:	9305      	str	r3, [sp, #20]
2000d60c:	f10a 0503 	add.w	r5, sl, #3
2000d610:	f10a 0302 	add.w	r3, sl, #2
2000d614:	db37      	blt.n	2000d686 <_svfiprintf_r+0x222>
2000d616:	4c2c      	ldr	r4, [pc, #176]	; (2000d6c8 <_svfiprintf_r+0x264>)
2000d618:	2203      	movs	r2, #3
2000d61a:	4620      	mov	r0, r4
2000d61c:	469a      	mov	sl, r3
2000d61e:	f000 fa3f 	bl	2000daa0 <memchr>
2000d622:	2800      	cmp	r0, #0
2000d624:	d196      	bne.n	2000d554 <_svfiprintf_r+0xf0>
2000d626:	46a8      	mov	r8, r5
2000d628:	4655      	mov	r5, sl
2000d62a:	e79c      	b.n	2000d566 <_svfiprintf_r+0x102>
2000d62c:	9b05      	ldr	r3, [sp, #20]
2000d62e:	3307      	adds	r3, #7
2000d630:	f023 0307 	bic.w	r3, r3, #7
2000d634:	3308      	adds	r3, #8
2000d636:	9305      	str	r3, [sp, #20]
2000d638:	e7ad      	b.n	2000d596 <_svfiprintf_r+0x132>
2000d63a:	4249      	negs	r1, r1
2000d63c:	f043 0302 	orr.w	r3, r3, #2
2000d640:	9109      	str	r1, [sp, #36]	; 0x24
2000d642:	9306      	str	r3, [sp, #24]
2000d644:	e77b      	b.n	2000d53e <_svfiprintf_r+0xda>
2000d646:	ab05      	add	r3, sp, #20
2000d648:	9300      	str	r3, [sp, #0]
2000d64a:	465a      	mov	r2, fp
2000d64c:	4b21      	ldr	r3, [pc, #132]	; (2000d6d4 <_svfiprintf_r+0x270>)
2000d64e:	9802      	ldr	r0, [sp, #8]
2000d650:	a906      	add	r1, sp, #24
2000d652:	f000 f8d7 	bl	2000d804 <_printf_i>
2000d656:	4681      	mov	r9, r0
2000d658:	e79a      	b.n	2000d590 <_svfiprintf_r+0x12c>
2000d65a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
2000d65e:	2300      	movs	r3, #0
2000d660:	2a09      	cmp	r2, #9
2000d662:	9307      	str	r3, [sp, #28]
2000d664:	d901      	bls.n	2000d66a <_svfiprintf_r+0x206>
2000d666:	e023      	b.n	2000d6b0 <_svfiprintf_r+0x24c>
2000d668:	4655      	mov	r5, sl
2000d66a:	7869      	ldrb	r1, [r5, #1]
2000d66c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
2000d670:	eb02 0343 	add.w	r3, r2, r3, lsl #1
2000d674:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
2000d678:	2a09      	cmp	r2, #9
2000d67a:	f105 0a01 	add.w	sl, r5, #1
2000d67e:	d9f3      	bls.n	2000d668 <_svfiprintf_r+0x204>
2000d680:	3502      	adds	r5, #2
2000d682:	9307      	str	r3, [sp, #28]
2000d684:	e75f      	b.n	2000d546 <_svfiprintf_r+0xe2>
2000d686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2000d68a:	469a      	mov	sl, r3
2000d68c:	9207      	str	r2, [sp, #28]
2000d68e:	e75a      	b.n	2000d546 <_svfiprintf_r+0xe2>
2000d690:	4644      	mov	r4, r8
2000d692:	e722      	b.n	2000d4da <_svfiprintf_r+0x76>
2000d694:	2140      	movs	r1, #64	; 0x40
2000d696:	9303      	str	r3, [sp, #12]
2000d698:	f000 fbaa 	bl	2000ddf0 <_malloc_r>
2000d69c:	9b03      	ldr	r3, [sp, #12]
2000d69e:	f8cb 0000 	str.w	r0, [fp]
2000d6a2:	f8cb 0010 	str.w	r0, [fp, #16]
2000d6a6:	b130      	cbz	r0, 2000d6b6 <_svfiprintf_r+0x252>
2000d6a8:	2240      	movs	r2, #64	; 0x40
2000d6aa:	f8cb 2014 	str.w	r2, [fp, #20]
2000d6ae:	e6e6      	b.n	2000d47e <_svfiprintf_r+0x1a>
2000d6b0:	46aa      	mov	sl, r5
2000d6b2:	3501      	adds	r5, #1
2000d6b4:	e747      	b.n	2000d546 <_svfiprintf_r+0xe2>
2000d6b6:	9a02      	ldr	r2, [sp, #8]
2000d6b8:	230c      	movs	r3, #12
2000d6ba:	6013      	str	r3, [r2, #0]
2000d6bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000d6c0:	e778      	b.n	2000d5b4 <_svfiprintf_r+0x150>
2000d6c2:	bf00      	nop
2000d6c4:	20010004 	.word	0x20010004
2000d6c8:	2001000c 	.word	0x2001000c
2000d6cc:	20010010 	.word	0x20010010
2000d6d0:	00000000 	.word	0x00000000
2000d6d4:	2000d2ad 	.word	0x2000d2ad

2000d6d8 <_printf_common>:
2000d6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000d6dc:	460c      	mov	r4, r1
2000d6de:	4691      	mov	r9, r2
2000d6e0:	690a      	ldr	r2, [r1, #16]
2000d6e2:	6889      	ldr	r1, [r1, #8]
2000d6e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
2000d6e8:	428a      	cmp	r2, r1
2000d6ea:	bfb8      	it	lt
2000d6ec:	460a      	movlt	r2, r1
2000d6ee:	f8c9 2000 	str.w	r2, [r9]
2000d6f2:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
2000d6f6:	4606      	mov	r6, r0
2000d6f8:	461f      	mov	r7, r3
2000d6fa:	b111      	cbz	r1, 2000d702 <_printf_common+0x2a>
2000d6fc:	3201      	adds	r2, #1
2000d6fe:	f8c9 2000 	str.w	r2, [r9]
2000d702:	6823      	ldr	r3, [r4, #0]
2000d704:	0699      	lsls	r1, r3, #26
2000d706:	d55c      	bpl.n	2000d7c2 <_printf_common+0xea>
2000d708:	f8d9 2000 	ldr.w	r2, [r9]
2000d70c:	3202      	adds	r2, #2
2000d70e:	f8c9 2000 	str.w	r2, [r9]
2000d712:	6823      	ldr	r3, [r4, #0]
2000d714:	f013 0f06 	tst.w	r3, #6
2000d718:	4619      	mov	r1, r3
2000d71a:	d11d      	bne.n	2000d758 <_printf_common+0x80>
2000d71c:	68e1      	ldr	r1, [r4, #12]
2000d71e:	1a8a      	subs	r2, r1, r2
2000d720:	2a00      	cmp	r2, #0
2000d722:	bfd8      	it	le
2000d724:	4619      	movle	r1, r3
2000d726:	dd17      	ble.n	2000d758 <_printf_common+0x80>
2000d728:	f104 0a19 	add.w	sl, r4, #25
2000d72c:	2500      	movs	r5, #0
2000d72e:	e005      	b.n	2000d73c <_printf_common+0x64>
2000d730:	68e3      	ldr	r3, [r4, #12]
2000d732:	f8d9 2000 	ldr.w	r2, [r9]
2000d736:	1a9b      	subs	r3, r3, r2
2000d738:	42ab      	cmp	r3, r5
2000d73a:	dd0c      	ble.n	2000d756 <_printf_common+0x7e>
2000d73c:	2301      	movs	r3, #1
2000d73e:	4652      	mov	r2, sl
2000d740:	4639      	mov	r1, r7
2000d742:	4630      	mov	r0, r6
2000d744:	47c0      	blx	r8
2000d746:	3001      	adds	r0, #1
2000d748:	f105 0501 	add.w	r5, r5, #1
2000d74c:	d1f0      	bne.n	2000d730 <_printf_common+0x58>
2000d74e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000d752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d756:	6821      	ldr	r1, [r4, #0]
2000d758:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
2000d75c:	3300      	adds	r3, #0
2000d75e:	bf18      	it	ne
2000d760:	2301      	movne	r3, #1
2000d762:	068a      	lsls	r2, r1, #26
2000d764:	d50a      	bpl.n	2000d77c <_printf_common+0xa4>
2000d766:	18e1      	adds	r1, r4, r3
2000d768:	1c5a      	adds	r2, r3, #1
2000d76a:	2030      	movs	r0, #48	; 0x30
2000d76c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
2000d770:	4422      	add	r2, r4
2000d772:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
2000d776:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
2000d77a:	3302      	adds	r3, #2
2000d77c:	f104 0243 	add.w	r2, r4, #67	; 0x43
2000d780:	4639      	mov	r1, r7
2000d782:	4630      	mov	r0, r6
2000d784:	47c0      	blx	r8
2000d786:	3001      	adds	r0, #1
2000d788:	d0e1      	beq.n	2000d74e <_printf_common+0x76>
2000d78a:	6823      	ldr	r3, [r4, #0]
2000d78c:	68a2      	ldr	r2, [r4, #8]
2000d78e:	6921      	ldr	r1, [r4, #16]
2000d790:	f003 0306 	and.w	r3, r3, #6
2000d794:	2b04      	cmp	r3, #4
2000d796:	d01d      	beq.n	2000d7d4 <_printf_common+0xfc>
2000d798:	428a      	cmp	r2, r1
2000d79a:	dd26      	ble.n	2000d7ea <_printf_common+0x112>
2000d79c:	f04f 0900 	mov.w	r9, #0
2000d7a0:	1a52      	subs	r2, r2, r1
2000d7a2:	4491      	add	r9, r2
2000d7a4:	341a      	adds	r4, #26
2000d7a6:	2500      	movs	r5, #0
2000d7a8:	e001      	b.n	2000d7ae <_printf_common+0xd6>
2000d7aa:	454d      	cmp	r5, r9
2000d7ac:	da1d      	bge.n	2000d7ea <_printf_common+0x112>
2000d7ae:	2301      	movs	r3, #1
2000d7b0:	4622      	mov	r2, r4
2000d7b2:	4639      	mov	r1, r7
2000d7b4:	4630      	mov	r0, r6
2000d7b6:	47c0      	blx	r8
2000d7b8:	3001      	adds	r0, #1
2000d7ba:	f105 0501 	add.w	r5, r5, #1
2000d7be:	d1f4      	bne.n	2000d7aa <_printf_common+0xd2>
2000d7c0:	e7c5      	b.n	2000d74e <_printf_common+0x76>
2000d7c2:	f013 0f06 	tst.w	r3, #6
2000d7c6:	d013      	beq.n	2000d7f0 <_printf_common+0x118>
2000d7c8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
2000d7cc:	3300      	adds	r3, #0
2000d7ce:	bf18      	it	ne
2000d7d0:	2301      	movne	r3, #1
2000d7d2:	e7d3      	b.n	2000d77c <_printf_common+0xa4>
2000d7d4:	f8d9 0000 	ldr.w	r0, [r9]
2000d7d8:	68e3      	ldr	r3, [r4, #12]
2000d7da:	428a      	cmp	r2, r1
2000d7dc:	eba3 0300 	sub.w	r3, r3, r0
2000d7e0:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
2000d7e4:	dcdc      	bgt.n	2000d7a0 <_printf_common+0xc8>
2000d7e6:	2b00      	cmp	r3, #0
2000d7e8:	dcdc      	bgt.n	2000d7a4 <_printf_common+0xcc>
2000d7ea:	2000      	movs	r0, #0
2000d7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d7f0:	68e1      	ldr	r1, [r4, #12]
2000d7f2:	f8d9 2000 	ldr.w	r2, [r9]
2000d7f6:	1a8a      	subs	r2, r1, r2
2000d7f8:	2a00      	cmp	r2, #0
2000d7fa:	bfd8      	it	le
2000d7fc:	4619      	movle	r1, r3
2000d7fe:	dc93      	bgt.n	2000d728 <_printf_common+0x50>
2000d800:	e7aa      	b.n	2000d758 <_printf_common+0x80>
2000d802:	bf00      	nop

2000d804 <_printf_i>:
2000d804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
2000d808:	460c      	mov	r4, r1
2000d80a:	7e09      	ldrb	r1, [r1, #24]
2000d80c:	b085      	sub	sp, #20
2000d80e:	296e      	cmp	r1, #110	; 0x6e
2000d810:	4606      	mov	r6, r0
2000d812:	4617      	mov	r7, r2
2000d814:	980c      	ldr	r0, [sp, #48]	; 0x30
2000d816:	4698      	mov	r8, r3
2000d818:	f104 0e43 	add.w	lr, r4, #67	; 0x43
2000d81c:	d06d      	beq.n	2000d8fa <_printf_i+0xf6>
2000d81e:	d939      	bls.n	2000d894 <_printf_i+0x90>
2000d820:	2973      	cmp	r1, #115	; 0x73
2000d822:	f000 80f6 	beq.w	2000da12 <_printf_i+0x20e>
2000d826:	d944      	bls.n	2000d8b2 <_printf_i+0xae>
2000d828:	2975      	cmp	r1, #117	; 0x75
2000d82a:	f000 8104 	beq.w	2000da36 <_printf_i+0x232>
2000d82e:	2978      	cmp	r1, #120	; 0x78
2000d830:	f040 8111 	bne.w	2000da56 <_printf_i+0x252>
2000d834:	2378      	movs	r3, #120	; 0x78
2000d836:	6822      	ldr	r2, [r4, #0]
2000d838:	f8df c258 	ldr.w	ip, [pc, #600]	; 2000da94 <_printf_i+0x290>
2000d83c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
2000d840:	6801      	ldr	r1, [r0, #0]
2000d842:	0615      	lsls	r5, r2, #24
2000d844:	f851 3b04 	ldr.w	r3, [r1], #4
2000d848:	6001      	str	r1, [r0, #0]
2000d84a:	f140 80a1 	bpl.w	2000d990 <_printf_i+0x18c>
2000d84e:	07d1      	lsls	r1, r2, #31
2000d850:	bf44      	itt	mi
2000d852:	f042 0220 	orrmi.w	r2, r2, #32
2000d856:	6022      	strmi	r2, [r4, #0]
2000d858:	2b00      	cmp	r3, #0
2000d85a:	f000 8093 	beq.w	2000d984 <_printf_i+0x180>
2000d85e:	2210      	movs	r2, #16
2000d860:	2100      	movs	r1, #0
2000d862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
2000d866:	6860      	ldr	r0, [r4, #4]
2000d868:	60a0      	str	r0, [r4, #8]
2000d86a:	2800      	cmp	r0, #0
2000d86c:	f2c0 80c8 	blt.w	2000da00 <_printf_i+0x1fc>
2000d870:	6821      	ldr	r1, [r4, #0]
2000d872:	f021 0104 	bic.w	r1, r1, #4
2000d876:	6021      	str	r1, [r4, #0]
2000d878:	2b00      	cmp	r3, #0
2000d87a:	f040 80a3 	bne.w	2000d9c4 <_printf_i+0x1c0>
2000d87e:	2800      	cmp	r0, #0
2000d880:	f040 80c0 	bne.w	2000da04 <_printf_i+0x200>
2000d884:	4675      	mov	r5, lr
2000d886:	2a08      	cmp	r2, #8
2000d888:	f000 80ac 	beq.w	2000d9e4 <_printf_i+0x1e0>
2000d88c:	ebae 0305 	sub.w	r3, lr, r5
2000d890:	6123      	str	r3, [r4, #16]
2000d892:	e041      	b.n	2000d918 <_printf_i+0x114>
2000d894:	2963      	cmp	r1, #99	; 0x63
2000d896:	f000 80e5 	beq.w	2000da64 <_printf_i+0x260>
2000d89a:	d81a      	bhi.n	2000d8d2 <_printf_i+0xce>
2000d89c:	2900      	cmp	r1, #0
2000d89e:	d038      	beq.n	2000d912 <_printf_i+0x10e>
2000d8a0:	2958      	cmp	r1, #88	; 0x58
2000d8a2:	f040 80d8 	bne.w	2000da56 <_printf_i+0x252>
2000d8a6:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
2000d8aa:	6822      	ldr	r2, [r4, #0]
2000d8ac:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 2000da98 <_printf_i+0x294>
2000d8b0:	e7c6      	b.n	2000d840 <_printf_i+0x3c>
2000d8b2:	296f      	cmp	r1, #111	; 0x6f
2000d8b4:	f000 80bf 	beq.w	2000da36 <_printf_i+0x232>
2000d8b8:	2970      	cmp	r1, #112	; 0x70
2000d8ba:	f040 80cc 	bne.w	2000da56 <_printf_i+0x252>
2000d8be:	6822      	ldr	r2, [r4, #0]
2000d8c0:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 2000da94 <_printf_i+0x290>
2000d8c4:	f042 0220 	orr.w	r2, r2, #32
2000d8c8:	2378      	movs	r3, #120	; 0x78
2000d8ca:	6022      	str	r2, [r4, #0]
2000d8cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
2000d8d0:	e7b6      	b.n	2000d840 <_printf_i+0x3c>
2000d8d2:	2964      	cmp	r1, #100	; 0x64
2000d8d4:	d002      	beq.n	2000d8dc <_printf_i+0xd8>
2000d8d6:	2969      	cmp	r1, #105	; 0x69
2000d8d8:	f040 80bd 	bne.w	2000da56 <_printf_i+0x252>
2000d8dc:	6822      	ldr	r2, [r4, #0]
2000d8de:	6803      	ldr	r3, [r0, #0]
2000d8e0:	0611      	lsls	r1, r2, #24
2000d8e2:	f103 0504 	add.w	r5, r3, #4
2000d8e6:	d557      	bpl.n	2000d998 <_printf_i+0x194>
2000d8e8:	6819      	ldr	r1, [r3, #0]
2000d8ea:	6005      	str	r5, [r0, #0]
2000d8ec:	460b      	mov	r3, r1
2000d8ee:	2900      	cmp	r1, #0
2000d8f0:	db59      	blt.n	2000d9a6 <_printf_i+0x1a2>
2000d8f2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 2000da98 <_printf_i+0x294>
2000d8f6:	220a      	movs	r2, #10
2000d8f8:	e7b5      	b.n	2000d866 <_printf_i+0x62>
2000d8fa:	6803      	ldr	r3, [r0, #0]
2000d8fc:	6822      	ldr	r2, [r4, #0]
2000d8fe:	6961      	ldr	r1, [r4, #20]
2000d900:	1d1d      	adds	r5, r3, #4
2000d902:	6005      	str	r5, [r0, #0]
2000d904:	0615      	lsls	r5, r2, #24
2000d906:	681b      	ldr	r3, [r3, #0]
2000d908:	d402      	bmi.n	2000d910 <_printf_i+0x10c>
2000d90a:	0650      	lsls	r0, r2, #25
2000d90c:	f100 80bd 	bmi.w	2000da8a <_printf_i+0x286>
2000d910:	6019      	str	r1, [r3, #0]
2000d912:	2300      	movs	r3, #0
2000d914:	4675      	mov	r5, lr
2000d916:	6123      	str	r3, [r4, #16]
2000d918:	f8cd 8000 	str.w	r8, [sp]
2000d91c:	463b      	mov	r3, r7
2000d91e:	aa03      	add	r2, sp, #12
2000d920:	4621      	mov	r1, r4
2000d922:	4630      	mov	r0, r6
2000d924:	f7ff fed8 	bl	2000d6d8 <_printf_common>
2000d928:	3001      	adds	r0, #1
2000d92a:	d020      	beq.n	2000d96e <_printf_i+0x16a>
2000d92c:	462a      	mov	r2, r5
2000d92e:	6923      	ldr	r3, [r4, #16]
2000d930:	4639      	mov	r1, r7
2000d932:	4630      	mov	r0, r6
2000d934:	47c0      	blx	r8
2000d936:	3001      	adds	r0, #1
2000d938:	d019      	beq.n	2000d96e <_printf_i+0x16a>
2000d93a:	6822      	ldr	r2, [r4, #0]
2000d93c:	9803      	ldr	r0, [sp, #12]
2000d93e:	68e3      	ldr	r3, [r4, #12]
2000d940:	0792      	lsls	r2, r2, #30
2000d942:	d519      	bpl.n	2000d978 <_printf_i+0x174>
2000d944:	1a1a      	subs	r2, r3, r0
2000d946:	2a00      	cmp	r2, #0
2000d948:	dd16      	ble.n	2000d978 <_printf_i+0x174>
2000d94a:	f104 0919 	add.w	r9, r4, #25
2000d94e:	2500      	movs	r5, #0
2000d950:	e004      	b.n	2000d95c <_printf_i+0x158>
2000d952:	68e3      	ldr	r3, [r4, #12]
2000d954:	9803      	ldr	r0, [sp, #12]
2000d956:	1a1a      	subs	r2, r3, r0
2000d958:	42aa      	cmp	r2, r5
2000d95a:	dd0d      	ble.n	2000d978 <_printf_i+0x174>
2000d95c:	2301      	movs	r3, #1
2000d95e:	464a      	mov	r2, r9
2000d960:	4639      	mov	r1, r7
2000d962:	4630      	mov	r0, r6
2000d964:	47c0      	blx	r8
2000d966:	3001      	adds	r0, #1
2000d968:	f105 0501 	add.w	r5, r5, #1
2000d96c:	d1f1      	bne.n	2000d952 <_printf_i+0x14e>
2000d96e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000d972:	b005      	add	sp, #20
2000d974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2000d978:	4298      	cmp	r0, r3
2000d97a:	bfb8      	it	lt
2000d97c:	4618      	movlt	r0, r3
2000d97e:	b005      	add	sp, #20
2000d980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2000d984:	6822      	ldr	r2, [r4, #0]
2000d986:	f022 0220 	bic.w	r2, r2, #32
2000d98a:	6022      	str	r2, [r4, #0]
2000d98c:	2210      	movs	r2, #16
2000d98e:	e767      	b.n	2000d860 <_printf_i+0x5c>
2000d990:	0650      	lsls	r0, r2, #25
2000d992:	bf48      	it	mi
2000d994:	b29b      	uxthmi	r3, r3
2000d996:	e75a      	b.n	2000d84e <_printf_i+0x4a>
2000d998:	0651      	lsls	r1, r2, #25
2000d99a:	d5a5      	bpl.n	2000d8e8 <_printf_i+0xe4>
2000d99c:	f9b3 3000 	ldrsh.w	r3, [r3]
2000d9a0:	6005      	str	r5, [r0, #0]
2000d9a2:	4619      	mov	r1, r3
2000d9a4:	e7a3      	b.n	2000d8ee <_printf_i+0xea>
2000d9a6:	6861      	ldr	r1, [r4, #4]
2000d9a8:	60a1      	str	r1, [r4, #8]
2000d9aa:	202d      	movs	r0, #45	; 0x2d
2000d9ac:	2900      	cmp	r1, #0
2000d9ae:	f1c3 0300 	rsb	r3, r3, #0
2000d9b2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
2000d9b6:	db02      	blt.n	2000d9be <_printf_i+0x1ba>
2000d9b8:	f022 0204 	bic.w	r2, r2, #4
2000d9bc:	6022      	str	r2, [r4, #0]
2000d9be:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 2000da98 <_printf_i+0x294>
2000d9c2:	220a      	movs	r2, #10
2000d9c4:	4675      	mov	r5, lr
2000d9c6:	e000      	b.n	2000d9ca <_printf_i+0x1c6>
2000d9c8:	460b      	mov	r3, r1
2000d9ca:	fbb3 f1f2 	udiv	r1, r3, r2
2000d9ce:	fb02 3011 	mls	r0, r2, r1, r3
2000d9d2:	4293      	cmp	r3, r2
2000d9d4:	f81c 0000 	ldrb.w	r0, [ip, r0]
2000d9d8:	f805 0d01 	strb.w	r0, [r5, #-1]!
2000d9dc:	d2f4      	bcs.n	2000d9c8 <_printf_i+0x1c4>
2000d9de:	2a08      	cmp	r2, #8
2000d9e0:	f47f af54 	bne.w	2000d88c <_printf_i+0x88>
2000d9e4:	6823      	ldr	r3, [r4, #0]
2000d9e6:	07db      	lsls	r3, r3, #31
2000d9e8:	f57f af50 	bpl.w	2000d88c <_printf_i+0x88>
2000d9ec:	6862      	ldr	r2, [r4, #4]
2000d9ee:	6923      	ldr	r3, [r4, #16]
2000d9f0:	429a      	cmp	r2, r3
2000d9f2:	f73f af4b 	bgt.w	2000d88c <_printf_i+0x88>
2000d9f6:	2330      	movs	r3, #48	; 0x30
2000d9f8:	f805 3c01 	strb.w	r3, [r5, #-1]
2000d9fc:	3d01      	subs	r5, #1
2000d9fe:	e745      	b.n	2000d88c <_printf_i+0x88>
2000da00:	2b00      	cmp	r3, #0
2000da02:	d1df      	bne.n	2000d9c4 <_printf_i+0x1c0>
2000da04:	f89c 3000 	ldrb.w	r3, [ip]
2000da08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
2000da0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
2000da10:	e739      	b.n	2000d886 <_printf_i+0x82>
2000da12:	6803      	ldr	r3, [r0, #0]
2000da14:	6862      	ldr	r2, [r4, #4]
2000da16:	1d19      	adds	r1, r3, #4
2000da18:	6001      	str	r1, [r0, #0]
2000da1a:	681d      	ldr	r5, [r3, #0]
2000da1c:	2100      	movs	r1, #0
2000da1e:	4628      	mov	r0, r5
2000da20:	f000 f83e 	bl	2000daa0 <memchr>
2000da24:	2800      	cmp	r0, #0
2000da26:	d032      	beq.n	2000da8e <_printf_i+0x28a>
2000da28:	1b40      	subs	r0, r0, r5
2000da2a:	6060      	str	r0, [r4, #4]
2000da2c:	6120      	str	r0, [r4, #16]
2000da2e:	2300      	movs	r3, #0
2000da30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2000da34:	e770      	b.n	2000d918 <_printf_i+0x114>
2000da36:	6822      	ldr	r2, [r4, #0]
2000da38:	6803      	ldr	r3, [r0, #0]
2000da3a:	f012 0f80 	tst.w	r2, #128	; 0x80
2000da3e:	f103 0504 	add.w	r5, r3, #4
2000da42:	d01a      	beq.n	2000da7a <_printf_i+0x276>
2000da44:	681b      	ldr	r3, [r3, #0]
2000da46:	6005      	str	r5, [r0, #0]
2000da48:	296f      	cmp	r1, #111	; 0x6f
2000da4a:	bf0c      	ite	eq
2000da4c:	2208      	moveq	r2, #8
2000da4e:	220a      	movne	r2, #10
2000da50:	f8df c044 	ldr.w	ip, [pc, #68]	; 2000da98 <_printf_i+0x294>
2000da54:	e704      	b.n	2000d860 <_printf_i+0x5c>
2000da56:	2301      	movs	r3, #1
2000da58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
2000da5c:	6123      	str	r3, [r4, #16]
2000da5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
2000da62:	e7e4      	b.n	2000da2e <_printf_i+0x22a>
2000da64:	6803      	ldr	r3, [r0, #0]
2000da66:	681a      	ldr	r2, [r3, #0]
2000da68:	1d19      	adds	r1, r3, #4
2000da6a:	2301      	movs	r3, #1
2000da6c:	6001      	str	r1, [r0, #0]
2000da6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
2000da72:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
2000da76:	6123      	str	r3, [r4, #16]
2000da78:	e7d9      	b.n	2000da2e <_printf_i+0x22a>
2000da7a:	f012 0f40 	tst.w	r2, #64	; 0x40
2000da7e:	bf0d      	iteet	eq
2000da80:	681b      	ldreq	r3, [r3, #0]
2000da82:	6005      	strne	r5, [r0, #0]
2000da84:	881b      	ldrhne	r3, [r3, #0]
2000da86:	6005      	streq	r5, [r0, #0]
2000da88:	e7de      	b.n	2000da48 <_printf_i+0x244>
2000da8a:	8019      	strh	r1, [r3, #0]
2000da8c:	e741      	b.n	2000d912 <_printf_i+0x10e>
2000da8e:	6860      	ldr	r0, [r4, #4]
2000da90:	e7cc      	b.n	2000da2c <_printf_i+0x228>
2000da92:	bf00      	nop
2000da94:	2001002c 	.word	0x2001002c
2000da98:	20010018 	.word	0x20010018
2000da9c:	00000000 	.word	0x00000000

2000daa0 <memchr>:
2000daa0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000daa4:	2a10      	cmp	r2, #16
2000daa6:	db2b      	blt.n	2000db00 <memchr+0x60>
2000daa8:	f010 0f07 	tst.w	r0, #7
2000daac:	d008      	beq.n	2000dac0 <memchr+0x20>
2000daae:	f810 3b01 	ldrb.w	r3, [r0], #1
2000dab2:	3a01      	subs	r2, #1
2000dab4:	428b      	cmp	r3, r1
2000dab6:	d02d      	beq.n	2000db14 <memchr+0x74>
2000dab8:	f010 0f07 	tst.w	r0, #7
2000dabc:	b342      	cbz	r2, 2000db10 <memchr+0x70>
2000dabe:	d1f6      	bne.n	2000daae <memchr+0xe>
2000dac0:	b4f0      	push	{r4, r5, r6, r7}
2000dac2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
2000dac6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2000daca:	f022 0407 	bic.w	r4, r2, #7
2000dace:	f07f 0700 	mvns.w	r7, #0
2000dad2:	2300      	movs	r3, #0
2000dad4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
2000dad8:	3c08      	subs	r4, #8
2000dada:	ea85 0501 	eor.w	r5, r5, r1
2000dade:	ea86 0601 	eor.w	r6, r6, r1
2000dae2:	fa85 f547 	uadd8	r5, r5, r7
2000dae6:	faa3 f587 	sel	r5, r3, r7
2000daea:	fa86 f647 	uadd8	r6, r6, r7
2000daee:	faa5 f687 	sel	r6, r5, r7
2000daf2:	b98e      	cbnz	r6, 2000db18 <memchr+0x78>
2000daf4:	d1ee      	bne.n	2000dad4 <memchr+0x34>
2000daf6:	bcf0      	pop	{r4, r5, r6, r7}
2000daf8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000dafc:	f002 0207 	and.w	r2, r2, #7
2000db00:	b132      	cbz	r2, 2000db10 <memchr+0x70>
2000db02:	f810 3b01 	ldrb.w	r3, [r0], #1
2000db06:	3a01      	subs	r2, #1
2000db08:	ea83 0301 	eor.w	r3, r3, r1
2000db0c:	b113      	cbz	r3, 2000db14 <memchr+0x74>
2000db0e:	d1f8      	bne.n	2000db02 <memchr+0x62>
2000db10:	2000      	movs	r0, #0
2000db12:	4770      	bx	lr
2000db14:	3801      	subs	r0, #1
2000db16:	4770      	bx	lr
2000db18:	2d00      	cmp	r5, #0
2000db1a:	bf06      	itte	eq
2000db1c:	4635      	moveq	r5, r6
2000db1e:	3803      	subeq	r0, #3
2000db20:	3807      	subne	r0, #7
2000db22:	f015 0f01 	tst.w	r5, #1
2000db26:	d107      	bne.n	2000db38 <memchr+0x98>
2000db28:	3001      	adds	r0, #1
2000db2a:	f415 7f80 	tst.w	r5, #256	; 0x100
2000db2e:	bf02      	ittt	eq
2000db30:	3001      	addeq	r0, #1
2000db32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
2000db36:	3001      	addeq	r0, #1
2000db38:	bcf0      	pop	{r4, r5, r6, r7}
2000db3a:	3801      	subs	r0, #1
2000db3c:	4770      	bx	lr
2000db3e:	bf00      	nop

2000db40 <memcpy>:
2000db40:	4684      	mov	ip, r0
2000db42:	ea41 0300 	orr.w	r3, r1, r0
2000db46:	f013 0303 	ands.w	r3, r3, #3
2000db4a:	d16d      	bne.n	2000dc28 <memcpy+0xe8>
2000db4c:	3a40      	subs	r2, #64	; 0x40
2000db4e:	d341      	bcc.n	2000dbd4 <memcpy+0x94>
2000db50:	f851 3b04 	ldr.w	r3, [r1], #4
2000db54:	f840 3b04 	str.w	r3, [r0], #4
2000db58:	f851 3b04 	ldr.w	r3, [r1], #4
2000db5c:	f840 3b04 	str.w	r3, [r0], #4
2000db60:	f851 3b04 	ldr.w	r3, [r1], #4
2000db64:	f840 3b04 	str.w	r3, [r0], #4
2000db68:	f851 3b04 	ldr.w	r3, [r1], #4
2000db6c:	f840 3b04 	str.w	r3, [r0], #4
2000db70:	f851 3b04 	ldr.w	r3, [r1], #4
2000db74:	f840 3b04 	str.w	r3, [r0], #4
2000db78:	f851 3b04 	ldr.w	r3, [r1], #4
2000db7c:	f840 3b04 	str.w	r3, [r0], #4
2000db80:	f851 3b04 	ldr.w	r3, [r1], #4
2000db84:	f840 3b04 	str.w	r3, [r0], #4
2000db88:	f851 3b04 	ldr.w	r3, [r1], #4
2000db8c:	f840 3b04 	str.w	r3, [r0], #4
2000db90:	f851 3b04 	ldr.w	r3, [r1], #4
2000db94:	f840 3b04 	str.w	r3, [r0], #4
2000db98:	f851 3b04 	ldr.w	r3, [r1], #4
2000db9c:	f840 3b04 	str.w	r3, [r0], #4
2000dba0:	f851 3b04 	ldr.w	r3, [r1], #4
2000dba4:	f840 3b04 	str.w	r3, [r0], #4
2000dba8:	f851 3b04 	ldr.w	r3, [r1], #4
2000dbac:	f840 3b04 	str.w	r3, [r0], #4
2000dbb0:	f851 3b04 	ldr.w	r3, [r1], #4
2000dbb4:	f840 3b04 	str.w	r3, [r0], #4
2000dbb8:	f851 3b04 	ldr.w	r3, [r1], #4
2000dbbc:	f840 3b04 	str.w	r3, [r0], #4
2000dbc0:	f851 3b04 	ldr.w	r3, [r1], #4
2000dbc4:	f840 3b04 	str.w	r3, [r0], #4
2000dbc8:	f851 3b04 	ldr.w	r3, [r1], #4
2000dbcc:	f840 3b04 	str.w	r3, [r0], #4
2000dbd0:	3a40      	subs	r2, #64	; 0x40
2000dbd2:	d2bd      	bcs.n	2000db50 <memcpy+0x10>
2000dbd4:	3230      	adds	r2, #48	; 0x30
2000dbd6:	d311      	bcc.n	2000dbfc <memcpy+0xbc>
2000dbd8:	f851 3b04 	ldr.w	r3, [r1], #4
2000dbdc:	f840 3b04 	str.w	r3, [r0], #4
2000dbe0:	f851 3b04 	ldr.w	r3, [r1], #4
2000dbe4:	f840 3b04 	str.w	r3, [r0], #4
2000dbe8:	f851 3b04 	ldr.w	r3, [r1], #4
2000dbec:	f840 3b04 	str.w	r3, [r0], #4
2000dbf0:	f851 3b04 	ldr.w	r3, [r1], #4
2000dbf4:	f840 3b04 	str.w	r3, [r0], #4
2000dbf8:	3a10      	subs	r2, #16
2000dbfa:	d2ed      	bcs.n	2000dbd8 <memcpy+0x98>
2000dbfc:	320c      	adds	r2, #12
2000dbfe:	d305      	bcc.n	2000dc0c <memcpy+0xcc>
2000dc00:	f851 3b04 	ldr.w	r3, [r1], #4
2000dc04:	f840 3b04 	str.w	r3, [r0], #4
2000dc08:	3a04      	subs	r2, #4
2000dc0a:	d2f9      	bcs.n	2000dc00 <memcpy+0xc0>
2000dc0c:	3204      	adds	r2, #4
2000dc0e:	d008      	beq.n	2000dc22 <memcpy+0xe2>
2000dc10:	07d2      	lsls	r2, r2, #31
2000dc12:	bf1c      	itt	ne
2000dc14:	f811 3b01 	ldrbne.w	r3, [r1], #1
2000dc18:	f800 3b01 	strbne.w	r3, [r0], #1
2000dc1c:	d301      	bcc.n	2000dc22 <memcpy+0xe2>
2000dc1e:	880b      	ldrh	r3, [r1, #0]
2000dc20:	8003      	strh	r3, [r0, #0]
2000dc22:	4660      	mov	r0, ip
2000dc24:	4770      	bx	lr
2000dc26:	bf00      	nop
2000dc28:	2a08      	cmp	r2, #8
2000dc2a:	d313      	bcc.n	2000dc54 <memcpy+0x114>
2000dc2c:	078b      	lsls	r3, r1, #30
2000dc2e:	d08d      	beq.n	2000db4c <memcpy+0xc>
2000dc30:	f010 0303 	ands.w	r3, r0, #3
2000dc34:	d08a      	beq.n	2000db4c <memcpy+0xc>
2000dc36:	f1c3 0304 	rsb	r3, r3, #4
2000dc3a:	1ad2      	subs	r2, r2, r3
2000dc3c:	07db      	lsls	r3, r3, #31
2000dc3e:	bf1c      	itt	ne
2000dc40:	f811 3b01 	ldrbne.w	r3, [r1], #1
2000dc44:	f800 3b01 	strbne.w	r3, [r0], #1
2000dc48:	d380      	bcc.n	2000db4c <memcpy+0xc>
2000dc4a:	f831 3b02 	ldrh.w	r3, [r1], #2
2000dc4e:	f820 3b02 	strh.w	r3, [r0], #2
2000dc52:	e77b      	b.n	2000db4c <memcpy+0xc>
2000dc54:	3a04      	subs	r2, #4
2000dc56:	d3d9      	bcc.n	2000dc0c <memcpy+0xcc>
2000dc58:	3a01      	subs	r2, #1
2000dc5a:	f811 3b01 	ldrb.w	r3, [r1], #1
2000dc5e:	f800 3b01 	strb.w	r3, [r0], #1
2000dc62:	d2f9      	bcs.n	2000dc58 <memcpy+0x118>
2000dc64:	780b      	ldrb	r3, [r1, #0]
2000dc66:	7003      	strb	r3, [r0, #0]
2000dc68:	784b      	ldrb	r3, [r1, #1]
2000dc6a:	7043      	strb	r3, [r0, #1]
2000dc6c:	788b      	ldrb	r3, [r1, #2]
2000dc6e:	7083      	strb	r3, [r0, #2]
2000dc70:	4660      	mov	r0, ip
2000dc72:	4770      	bx	lr

2000dc74 <memmove>:
2000dc74:	4288      	cmp	r0, r1
2000dc76:	b4f0      	push	{r4, r5, r6, r7}
2000dc78:	d90d      	bls.n	2000dc96 <memmove+0x22>
2000dc7a:	188b      	adds	r3, r1, r2
2000dc7c:	4283      	cmp	r3, r0
2000dc7e:	d90a      	bls.n	2000dc96 <memmove+0x22>
2000dc80:	1884      	adds	r4, r0, r2
2000dc82:	b132      	cbz	r2, 2000dc92 <memmove+0x1e>
2000dc84:	4622      	mov	r2, r4
2000dc86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
2000dc8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
2000dc8e:	4299      	cmp	r1, r3
2000dc90:	d1f9      	bne.n	2000dc86 <memmove+0x12>
2000dc92:	bcf0      	pop	{r4, r5, r6, r7}
2000dc94:	4770      	bx	lr
2000dc96:	2a0f      	cmp	r2, #15
2000dc98:	d80e      	bhi.n	2000dcb8 <memmove+0x44>
2000dc9a:	4603      	mov	r3, r0
2000dc9c:	1e54      	subs	r4, r2, #1
2000dc9e:	2a00      	cmp	r2, #0
2000dca0:	d0f7      	beq.n	2000dc92 <memmove+0x1e>
2000dca2:	3401      	adds	r4, #1
2000dca4:	440c      	add	r4, r1
2000dca6:	3b01      	subs	r3, #1
2000dca8:	f811 2b01 	ldrb.w	r2, [r1], #1
2000dcac:	f803 2f01 	strb.w	r2, [r3, #1]!
2000dcb0:	42a1      	cmp	r1, r4
2000dcb2:	d1f9      	bne.n	2000dca8 <memmove+0x34>
2000dcb4:	bcf0      	pop	{r4, r5, r6, r7}
2000dcb6:	4770      	bx	lr
2000dcb8:	ea40 0301 	orr.w	r3, r0, r1
2000dcbc:	079b      	lsls	r3, r3, #30
2000dcbe:	d13b      	bne.n	2000dd38 <memmove+0xc4>
2000dcc0:	f1a2 0710 	sub.w	r7, r2, #16
2000dcc4:	093f      	lsrs	r7, r7, #4
2000dcc6:	f101 0620 	add.w	r6, r1, #32
2000dcca:	eb06 1607 	add.w	r6, r6, r7, lsl #4
2000dcce:	f101 0310 	add.w	r3, r1, #16
2000dcd2:	f100 0410 	add.w	r4, r0, #16
2000dcd6:	f853 5c10 	ldr.w	r5, [r3, #-16]
2000dcda:	f844 5c10 	str.w	r5, [r4, #-16]
2000dcde:	f853 5c0c 	ldr.w	r5, [r3, #-12]
2000dce2:	f844 5c0c 	str.w	r5, [r4, #-12]
2000dce6:	f853 5c08 	ldr.w	r5, [r3, #-8]
2000dcea:	f844 5c08 	str.w	r5, [r4, #-8]
2000dcee:	f853 5c04 	ldr.w	r5, [r3, #-4]
2000dcf2:	f844 5c04 	str.w	r5, [r4, #-4]
2000dcf6:	3310      	adds	r3, #16
2000dcf8:	42b3      	cmp	r3, r6
2000dcfa:	f104 0410 	add.w	r4, r4, #16
2000dcfe:	d1ea      	bne.n	2000dcd6 <memmove+0x62>
2000dd00:	1c7b      	adds	r3, r7, #1
2000dd02:	011b      	lsls	r3, r3, #4
2000dd04:	f012 0f0c 	tst.w	r2, #12
2000dd08:	4419      	add	r1, r3
2000dd0a:	f002 050f 	and.w	r5, r2, #15
2000dd0e:	4403      	add	r3, r0
2000dd10:	d015      	beq.n	2000dd3e <memmove+0xca>
2000dd12:	3d04      	subs	r5, #4
2000dd14:	08ad      	lsrs	r5, r5, #2
2000dd16:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
2000dd1a:	1f1c      	subs	r4, r3, #4
2000dd1c:	460e      	mov	r6, r1
2000dd1e:	f856 7b04 	ldr.w	r7, [r6], #4
2000dd22:	f844 7f04 	str.w	r7, [r4, #4]!
2000dd26:	4564      	cmp	r4, ip
2000dd28:	d1f9      	bne.n	2000dd1e <memmove+0xaa>
2000dd2a:	3501      	adds	r5, #1
2000dd2c:	00ad      	lsls	r5, r5, #2
2000dd2e:	442b      	add	r3, r5
2000dd30:	4429      	add	r1, r5
2000dd32:	f002 0203 	and.w	r2, r2, #3
2000dd36:	e7b1      	b.n	2000dc9c <memmove+0x28>
2000dd38:	1e54      	subs	r4, r2, #1
2000dd3a:	4603      	mov	r3, r0
2000dd3c:	e7b1      	b.n	2000dca2 <memmove+0x2e>
2000dd3e:	462a      	mov	r2, r5
2000dd40:	e7ac      	b.n	2000dc9c <memmove+0x28>
2000dd42:	bf00      	nop

2000dd44 <_free_r>:
2000dd44:	2900      	cmp	r1, #0
2000dd46:	d03c      	beq.n	2000ddc2 <_free_r+0x7e>
2000dd48:	b538      	push	{r3, r4, r5, lr}
2000dd4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000dd4e:	1f0c      	subs	r4, r1, #4
2000dd50:	2b00      	cmp	r3, #0
2000dd52:	bfb8      	it	lt
2000dd54:	18e4      	addlt	r4, r4, r3
2000dd56:	4605      	mov	r5, r0
2000dd58:	f000 f8e6 	bl	2000df28 <__malloc_lock>
2000dd5c:	4b23      	ldr	r3, [pc, #140]	; (2000ddec <_free_r+0xa8>)
2000dd5e:	681a      	ldr	r2, [r3, #0]
2000dd60:	b12a      	cbz	r2, 2000dd6e <_free_r+0x2a>
2000dd62:	42a2      	cmp	r2, r4
2000dd64:	d90d      	bls.n	2000dd82 <_free_r+0x3e>
2000dd66:	6821      	ldr	r1, [r4, #0]
2000dd68:	1860      	adds	r0, r4, r1
2000dd6a:	4282      	cmp	r2, r0
2000dd6c:	d023      	beq.n	2000ddb6 <_free_r+0x72>
2000dd6e:	6062      	str	r2, [r4, #4]
2000dd70:	4628      	mov	r0, r5
2000dd72:	601c      	str	r4, [r3, #0]
2000dd74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2000dd78:	f000 b8d8 	b.w	2000df2c <__malloc_unlock>
2000dd7c:	42a3      	cmp	r3, r4
2000dd7e:	d803      	bhi.n	2000dd88 <_free_r+0x44>
2000dd80:	461a      	mov	r2, r3
2000dd82:	6853      	ldr	r3, [r2, #4]
2000dd84:	2b00      	cmp	r3, #0
2000dd86:	d1f9      	bne.n	2000dd7c <_free_r+0x38>
2000dd88:	6811      	ldr	r1, [r2, #0]
2000dd8a:	1850      	adds	r0, r2, r1
2000dd8c:	42a0      	cmp	r0, r4
2000dd8e:	d019      	beq.n	2000ddc4 <_free_r+0x80>
2000dd90:	d824      	bhi.n	2000dddc <_free_r+0x98>
2000dd92:	6821      	ldr	r1, [r4, #0]
2000dd94:	1860      	adds	r0, r4, r1
2000dd96:	4283      	cmp	r3, r0
2000dd98:	d006      	beq.n	2000dda8 <_free_r+0x64>
2000dd9a:	6063      	str	r3, [r4, #4]
2000dd9c:	6054      	str	r4, [r2, #4]
2000dd9e:	4628      	mov	r0, r5
2000dda0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2000dda4:	f000 b8c2 	b.w	2000df2c <__malloc_unlock>
2000dda8:	e9d3 0300 	ldrd	r0, r3, [r3]
2000ddac:	4401      	add	r1, r0
2000ddae:	6063      	str	r3, [r4, #4]
2000ddb0:	6021      	str	r1, [r4, #0]
2000ddb2:	6054      	str	r4, [r2, #4]
2000ddb4:	e7f3      	b.n	2000dd9e <_free_r+0x5a>
2000ddb6:	e9d2 0200 	ldrd	r0, r2, [r2]
2000ddba:	4401      	add	r1, r0
2000ddbc:	6062      	str	r2, [r4, #4]
2000ddbe:	6021      	str	r1, [r4, #0]
2000ddc0:	e7d6      	b.n	2000dd70 <_free_r+0x2c>
2000ddc2:	4770      	bx	lr
2000ddc4:	6820      	ldr	r0, [r4, #0]
2000ddc6:	4401      	add	r1, r0
2000ddc8:	1850      	adds	r0, r2, r1
2000ddca:	4283      	cmp	r3, r0
2000ddcc:	6011      	str	r1, [r2, #0]
2000ddce:	d1e6      	bne.n	2000dd9e <_free_r+0x5a>
2000ddd0:	e9d3 0300 	ldrd	r0, r3, [r3]
2000ddd4:	4401      	add	r1, r0
2000ddd6:	6053      	str	r3, [r2, #4]
2000ddd8:	6011      	str	r1, [r2, #0]
2000ddda:	e7e0      	b.n	2000dd9e <_free_r+0x5a>
2000dddc:	230c      	movs	r3, #12
2000ddde:	602b      	str	r3, [r5, #0]
2000dde0:	4628      	mov	r0, r5
2000dde2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2000dde6:	f000 b8a1 	b.w	2000df2c <__malloc_unlock>
2000ddea:	bf00      	nop
2000ddec:	200100f0 	.word	0x200100f0

2000ddf0 <_malloc_r>:
2000ddf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000ddf2:	1ccd      	adds	r5, r1, #3
2000ddf4:	f025 0503 	bic.w	r5, r5, #3
2000ddf8:	3508      	adds	r5, #8
2000ddfa:	2d0c      	cmp	r5, #12
2000ddfc:	bf38      	it	cc
2000ddfe:	250c      	movcc	r5, #12
2000de00:	2d00      	cmp	r5, #0
2000de02:	4606      	mov	r6, r0
2000de04:	db33      	blt.n	2000de6e <_malloc_r+0x7e>
2000de06:	42a9      	cmp	r1, r5
2000de08:	d831      	bhi.n	2000de6e <_malloc_r+0x7e>
2000de0a:	4f2a      	ldr	r7, [pc, #168]	; (2000deb4 <_malloc_r+0xc4>)
2000de0c:	f000 f88c 	bl	2000df28 <__malloc_lock>
2000de10:	683a      	ldr	r2, [r7, #0]
2000de12:	b152      	cbz	r2, 2000de2a <_malloc_r+0x3a>
2000de14:	6813      	ldr	r3, [r2, #0]
2000de16:	1b5b      	subs	r3, r3, r5
2000de18:	d404      	bmi.n	2000de24 <_malloc_r+0x34>
2000de1a:	e03f      	b.n	2000de9c <_malloc_r+0xac>
2000de1c:	6823      	ldr	r3, [r4, #0]
2000de1e:	1b5b      	subs	r3, r3, r5
2000de20:	d529      	bpl.n	2000de76 <_malloc_r+0x86>
2000de22:	4622      	mov	r2, r4
2000de24:	6854      	ldr	r4, [r2, #4]
2000de26:	2c00      	cmp	r4, #0
2000de28:	d1f8      	bne.n	2000de1c <_malloc_r+0x2c>
2000de2a:	6879      	ldr	r1, [r7, #4]
2000de2c:	2900      	cmp	r1, #0
2000de2e:	d03b      	beq.n	2000dea8 <_malloc_r+0xb8>
2000de30:	4629      	mov	r1, r5
2000de32:	4630      	mov	r0, r6
2000de34:	f000 f866 	bl	2000df04 <_sbrk_r>
2000de38:	1c43      	adds	r3, r0, #1
2000de3a:	d028      	beq.n	2000de8e <_malloc_r+0x9e>
2000de3c:	1cc4      	adds	r4, r0, #3
2000de3e:	f024 0403 	bic.w	r4, r4, #3
2000de42:	42a0      	cmp	r0, r4
2000de44:	d005      	beq.n	2000de52 <_malloc_r+0x62>
2000de46:	1a21      	subs	r1, r4, r0
2000de48:	4630      	mov	r0, r6
2000de4a:	f000 f85b 	bl	2000df04 <_sbrk_r>
2000de4e:	3001      	adds	r0, #1
2000de50:	d01d      	beq.n	2000de8e <_malloc_r+0x9e>
2000de52:	6025      	str	r5, [r4, #0]
2000de54:	4630      	mov	r0, r6
2000de56:	f000 f869 	bl	2000df2c <__malloc_unlock>
2000de5a:	f104 000b 	add.w	r0, r4, #11
2000de5e:	f020 0007 	bic.w	r0, r0, #7
2000de62:	1d23      	adds	r3, r4, #4
2000de64:	1ac2      	subs	r2, r0, r3
2000de66:	d001      	beq.n	2000de6c <_malloc_r+0x7c>
2000de68:	1a1b      	subs	r3, r3, r0
2000de6a:	50a3      	str	r3, [r4, r2]
2000de6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000de6e:	220c      	movs	r2, #12
2000de70:	6032      	str	r2, [r6, #0]
2000de72:	2000      	movs	r0, #0
2000de74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000de76:	2b0b      	cmp	r3, #11
2000de78:	d805      	bhi.n	2000de86 <_malloc_r+0x96>
2000de7a:	42a2      	cmp	r2, r4
2000de7c:	6863      	ldr	r3, [r4, #4]
2000de7e:	d011      	beq.n	2000dea4 <_malloc_r+0xb4>
2000de80:	6053      	str	r3, [r2, #4]
2000de82:	e7e7      	b.n	2000de54 <_malloc_r+0x64>
2000de84:	4614      	mov	r4, r2
2000de86:	6023      	str	r3, [r4, #0]
2000de88:	441c      	add	r4, r3
2000de8a:	6025      	str	r5, [r4, #0]
2000de8c:	e7e2      	b.n	2000de54 <_malloc_r+0x64>
2000de8e:	230c      	movs	r3, #12
2000de90:	4630      	mov	r0, r6
2000de92:	6033      	str	r3, [r6, #0]
2000de94:	f000 f84a 	bl	2000df2c <__malloc_unlock>
2000de98:	2000      	movs	r0, #0
2000de9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000de9c:	2b0b      	cmp	r3, #11
2000de9e:	d8f1      	bhi.n	2000de84 <_malloc_r+0x94>
2000dea0:	6853      	ldr	r3, [r2, #4]
2000dea2:	4614      	mov	r4, r2
2000dea4:	603b      	str	r3, [r7, #0]
2000dea6:	e7d5      	b.n	2000de54 <_malloc_r+0x64>
2000dea8:	4630      	mov	r0, r6
2000deaa:	f000 f82b 	bl	2000df04 <_sbrk_r>
2000deae:	6078      	str	r0, [r7, #4]
2000deb0:	e7be      	b.n	2000de30 <_malloc_r+0x40>
2000deb2:	bf00      	nop
2000deb4:	200100f0 	.word	0x200100f0

2000deb8 <_realloc_r>:
2000deb8:	b309      	cbz	r1, 2000defe <_realloc_r+0x46>
2000deba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000debc:	4614      	mov	r4, r2
2000debe:	b1ca      	cbz	r2, 2000def4 <_realloc_r+0x3c>
2000dec0:	4606      	mov	r6, r0
2000dec2:	460d      	mov	r5, r1
2000dec4:	f000 f834 	bl	2000df30 <_malloc_usable_size_r>
2000dec8:	42a0      	cmp	r0, r4
2000deca:	d302      	bcc.n	2000ded2 <_realloc_r+0x1a>
2000decc:	462f      	mov	r7, r5
2000dece:	4638      	mov	r0, r7
2000ded0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000ded2:	4621      	mov	r1, r4
2000ded4:	4630      	mov	r0, r6
2000ded6:	f7ff ff8b 	bl	2000ddf0 <_malloc_r>
2000deda:	4607      	mov	r7, r0
2000dedc:	2800      	cmp	r0, #0
2000dede:	d0f6      	beq.n	2000dece <_realloc_r+0x16>
2000dee0:	4622      	mov	r2, r4
2000dee2:	4629      	mov	r1, r5
2000dee4:	f7ff fe2c 	bl	2000db40 <memcpy>
2000dee8:	4630      	mov	r0, r6
2000deea:	4629      	mov	r1, r5
2000deec:	f7ff ff2a 	bl	2000dd44 <_free_r>
2000def0:	4638      	mov	r0, r7
2000def2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000def4:	4627      	mov	r7, r4
2000def6:	f7ff ff25 	bl	2000dd44 <_free_r>
2000defa:	4638      	mov	r0, r7
2000defc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000defe:	4611      	mov	r1, r2
2000df00:	f7ff bf76 	b.w	2000ddf0 <_malloc_r>

2000df04 <_sbrk_r>:
2000df04:	b538      	push	{r3, r4, r5, lr}
2000df06:	4c07      	ldr	r4, [pc, #28]	; (2000df24 <_sbrk_r+0x20>)
2000df08:	2300      	movs	r3, #0
2000df0a:	4605      	mov	r5, r0
2000df0c:	4608      	mov	r0, r1
2000df0e:	6023      	str	r3, [r4, #0]
2000df10:	f000 fa18 	bl	2000e344 <_sbrk>
2000df14:	1c43      	adds	r3, r0, #1
2000df16:	d000      	beq.n	2000df1a <_sbrk_r+0x16>
2000df18:	bd38      	pop	{r3, r4, r5, pc}
2000df1a:	6823      	ldr	r3, [r4, #0]
2000df1c:	2b00      	cmp	r3, #0
2000df1e:	d0fb      	beq.n	2000df18 <_sbrk_r+0x14>
2000df20:	602b      	str	r3, [r5, #0]
2000df22:	bd38      	pop	{r3, r4, r5, pc}
2000df24:	20010210 	.word	0x20010210

2000df28 <__malloc_lock>:
2000df28:	4770      	bx	lr
2000df2a:	bf00      	nop

2000df2c <__malloc_unlock>:
2000df2c:	4770      	bx	lr
2000df2e:	bf00      	nop

2000df30 <_malloc_usable_size_r>:
2000df30:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000df34:	1f18      	subs	r0, r3, #4
2000df36:	2b00      	cmp	r3, #0
2000df38:	bfbc      	itt	lt
2000df3a:	580b      	ldrlt	r3, [r1, r0]
2000df3c:	18c0      	addlt	r0, r0, r3
2000df3e:	4770      	bx	lr

2000df40 <crc32stream>:
    0xBAD03605UL, 0xCDD70693UL, 0x54DE5729UL, 0x23D967BFUL, 
    0xB3667A2EUL, 0xC4614AB8UL, 0x5D681B02UL, 0x2A6F2B94UL, 
    0xB40BBE37UL, 0xC30C8EA1UL, 0x5A05DF1BUL, 0x2D02EF8DUL };

unsigned long crc32stream( unsigned char c, unsigned long crc )    
{
2000df40:	b480      	push	{r7}
2000df42:	b083      	sub	sp, #12
2000df44:	af00      	add	r7, sp, #0
2000df46:	4603      	mov	r3, r0
2000df48:	6039      	str	r1, [r7, #0]
2000df4a:	71fb      	strb	r3, [r7, #7]
    crc = ((crc>>8) & 0x00FFFFFF) ^ crc32_table[ (crc^c) & 0xFF ];
2000df4c:	683b      	ldr	r3, [r7, #0]
2000df4e:	0a1a      	lsrs	r2, r3, #8
2000df50:	79f9      	ldrb	r1, [r7, #7]
2000df52:	683b      	ldr	r3, [r7, #0]
2000df54:	404b      	eors	r3, r1
2000df56:	b2db      	uxtb	r3, r3
2000df58:	4906      	ldr	r1, [pc, #24]	; (2000df74 <crc32stream+0x34>)
2000df5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
2000df5e:	4053      	eors	r3, r2
2000df60:	603b      	str	r3, [r7, #0]
    return( crc^0xFFFFFFFF );
2000df62:	683b      	ldr	r3, [r7, #0]
2000df64:	43db      	mvns	r3, r3
}
2000df66:	4618      	mov	r0, r3
2000df68:	370c      	adds	r7, #12
2000df6a:	46bd      	mov	sp, r7
2000df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000df70:	4770      	bx	lr
2000df72:	bf00      	nop
2000df74:	2000fbf4 	.word	0x2000fbf4

2000df78 <crc32>:


unsigned long crc32( unsigned char * buf, unsigned long len, unsigned long crc )    
{
2000df78:	b580      	push	{r7, lr}
2000df7a:	b086      	sub	sp, #24
2000df7c:	af00      	add	r7, sp, #0
2000df7e:	60f8      	str	r0, [r7, #12]
2000df80:	60b9      	str	r1, [r7, #8]
2000df82:	607a      	str	r2, [r7, #4]
unsigned long i;

    for( i = 0; i < len; i++ )
2000df84:	2300      	movs	r3, #0
2000df86:	617b      	str	r3, [r7, #20]
2000df88:	e00b      	b.n	2000dfa2 <crc32+0x2a>
	{
        crc = crc32stream( buf[ i ], crc );
2000df8a:	68fa      	ldr	r2, [r7, #12]
2000df8c:	697b      	ldr	r3, [r7, #20]
2000df8e:	4413      	add	r3, r2
2000df90:	781b      	ldrb	r3, [r3, #0]
2000df92:	6879      	ldr	r1, [r7, #4]
2000df94:	4618      	mov	r0, r3
2000df96:	f7ff ffd3 	bl	2000df40 <crc32stream>
2000df9a:	6078      	str	r0, [r7, #4]
    for( i = 0; i < len; i++ )
2000df9c:	697b      	ldr	r3, [r7, #20]
2000df9e:	3301      	adds	r3, #1
2000dfa0:	617b      	str	r3, [r7, #20]
2000dfa2:	697a      	ldr	r2, [r7, #20]
2000dfa4:	68bb      	ldr	r3, [r7, #8]
2000dfa6:	429a      	cmp	r2, r3
2000dfa8:	d3ef      	bcc.n	2000df8a <crc32+0x12>
	}

    return crc;
2000dfaa:	687b      	ldr	r3, [r7, #4]
}
2000dfac:	4618      	mov	r0, r3
2000dfae:	3718      	adds	r7, #24
2000dfb0:	46bd      	mov	sp, r7
2000dfb2:	bd80      	pop	{r7, pc}

2000dfb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
2000dfb4:	b580      	push	{r7, lr}
2000dfb6:	b08a      	sub	sp, #40	; 0x28
2000dfb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000dfba:	f107 0314 	add.w	r3, r7, #20
2000dfbe:	2200      	movs	r2, #0
2000dfc0:	601a      	str	r2, [r3, #0]
2000dfc2:	605a      	str	r2, [r3, #4]
2000dfc4:	609a      	str	r2, [r3, #8]
2000dfc6:	60da      	str	r2, [r3, #12]
2000dfc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
2000dfca:	2300      	movs	r3, #0
2000dfcc:	613b      	str	r3, [r7, #16]
2000dfce:	4b27      	ldr	r3, [pc, #156]	; (2000e06c <MX_GPIO_Init+0xb8>)
2000dfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000dfd2:	4a26      	ldr	r2, [pc, #152]	; (2000e06c <MX_GPIO_Init+0xb8>)
2000dfd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000dfd8:	6313      	str	r3, [r2, #48]	; 0x30
2000dfda:	4b24      	ldr	r3, [pc, #144]	; (2000e06c <MX_GPIO_Init+0xb8>)
2000dfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000dfde:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000dfe2:	613b      	str	r3, [r7, #16]
2000dfe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
2000dfe6:	2300      	movs	r3, #0
2000dfe8:	60fb      	str	r3, [r7, #12]
2000dfea:	4b20      	ldr	r3, [pc, #128]	; (2000e06c <MX_GPIO_Init+0xb8>)
2000dfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000dfee:	4a1f      	ldr	r2, [pc, #124]	; (2000e06c <MX_GPIO_Init+0xb8>)
2000dff0:	f043 0308 	orr.w	r3, r3, #8
2000dff4:	6313      	str	r3, [r2, #48]	; 0x30
2000dff6:	4b1d      	ldr	r3, [pc, #116]	; (2000e06c <MX_GPIO_Init+0xb8>)
2000dff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000dffa:	f003 0308 	and.w	r3, r3, #8
2000dffe:	60fb      	str	r3, [r7, #12]
2000e000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
2000e002:	2300      	movs	r3, #0
2000e004:	60bb      	str	r3, [r7, #8]
2000e006:	4b19      	ldr	r3, [pc, #100]	; (2000e06c <MX_GPIO_Init+0xb8>)
2000e008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e00a:	4a18      	ldr	r2, [pc, #96]	; (2000e06c <MX_GPIO_Init+0xb8>)
2000e00c:	f043 0301 	orr.w	r3, r3, #1
2000e010:	6313      	str	r3, [r2, #48]	; 0x30
2000e012:	4b16      	ldr	r3, [pc, #88]	; (2000e06c <MX_GPIO_Init+0xb8>)
2000e014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e016:	f003 0301 	and.w	r3, r3, #1
2000e01a:	60bb      	str	r3, [r7, #8]
2000e01c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
2000e01e:	2300      	movs	r3, #0
2000e020:	607b      	str	r3, [r7, #4]
2000e022:	4b12      	ldr	r3, [pc, #72]	; (2000e06c <MX_GPIO_Init+0xb8>)
2000e024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e026:	4a11      	ldr	r2, [pc, #68]	; (2000e06c <MX_GPIO_Init+0xb8>)
2000e028:	f043 0302 	orr.w	r3, r3, #2
2000e02c:	6313      	str	r3, [r2, #48]	; 0x30
2000e02e:	4b0f      	ldr	r3, [pc, #60]	; (2000e06c <MX_GPIO_Init+0xb8>)
2000e030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e032:	f003 0302 	and.w	r3, r3, #2
2000e036:	607b      	str	r3, [r7, #4]
2000e038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
2000e03a:	2200      	movs	r2, #0
2000e03c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
2000e040:	480b      	ldr	r0, [pc, #44]	; (2000e070 <MX_GPIO_Init+0xbc>)
2000e042:	f000 fe8f 	bl	2000ed64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
2000e046:	f44f 4360 	mov.w	r3, #57344	; 0xe000
2000e04a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000e04c:	2301      	movs	r3, #1
2000e04e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000e050:	2300      	movs	r3, #0
2000e052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
2000e054:	2302      	movs	r3, #2
2000e056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2000e058:	f107 0314 	add.w	r3, r7, #20
2000e05c:	4619      	mov	r1, r3
2000e05e:	4804      	ldr	r0, [pc, #16]	; (2000e070 <MX_GPIO_Init+0xbc>)
2000e060:	f000 fccc 	bl	2000e9fc <HAL_GPIO_Init>

}
2000e064:	bf00      	nop
2000e066:	3728      	adds	r7, #40	; 0x28
2000e068:	46bd      	mov	sp, r7
2000e06a:	bd80      	pop	{r7, pc}
2000e06c:	40023800 	.word	0x40023800
2000e070:	40020c00 	.word	0x40020c00

2000e074 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
2000e074:	b580      	push	{r7, lr}
2000e076:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
2000e078:	4b09      	ldr	r3, [pc, #36]	; (2000e0a0 <MX_IWDG_Init+0x2c>)
2000e07a:	4a0a      	ldr	r2, [pc, #40]	; (2000e0a4 <MX_IWDG_Init+0x30>)
2000e07c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
2000e07e:	4b08      	ldr	r3, [pc, #32]	; (2000e0a0 <MX_IWDG_Init+0x2c>)
2000e080:	2204      	movs	r2, #4
2000e082:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
2000e084:	4b06      	ldr	r3, [pc, #24]	; (2000e0a0 <MX_IWDG_Init+0x2c>)
2000e086:	f640 72ff 	movw	r2, #4095	; 0xfff
2000e08a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
2000e08c:	4804      	ldr	r0, [pc, #16]	; (2000e0a0 <MX_IWDG_Init+0x2c>)
2000e08e:	f000 fe9d 	bl	2000edcc <HAL_IWDG_Init>
2000e092:	4603      	mov	r3, r0
2000e094:	2b00      	cmp	r3, #0
2000e096:	d001      	beq.n	2000e09c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
2000e098:	f000 f8f6 	bl	2000e288 <Error_Handler>
  }

}
2000e09c:	bf00      	nop
2000e09e:	bd80      	pop	{r7, pc}
2000e0a0:	20010100 	.word	0x20010100
2000e0a4:	40003000 	.word	0x40003000

2000e0a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
2000e0a8:	b580      	push	{r7, lr}
2000e0aa:	b084      	sub	sp, #16
2000e0ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
2000e0ae:	f000 fb29 	bl	2000e704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2000e0b2:	f000 f87d 	bl	2000e1b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
2000e0b6:	f7ff ff7d 	bl	2000dfb4 <MX_GPIO_Init>
  MX_IWDG_Init();
2000e0ba:	f7ff ffdb 	bl	2000e074 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* Do not remove this code below */
  MX_TRACE_Init();
2000e0be:	f000 f98d 	bl	2000e3dc <MX_TRACE_Init>
  SDK_TRACE_Start();
2000e0c2:	f000 f9ad 	bl	2000e420 <SDK_TRACE_Start>
  /* Do not remove this code from above */

  SDK_TRACE_Timestamp(PRINT, 1);
2000e0c6:	2101      	movs	r1, #1
2000e0c8:	2004      	movs	r0, #4
2000e0ca:	f000 f9e1 	bl	2000e490 <SDK_TRACE_Timestamp>
  SDK_TRACE_Print("%s","LEDs Blink test");
2000e0ce:	4930      	ldr	r1, [pc, #192]	; (2000e190 <main+0xe8>)
2000e0d0:	4830      	ldr	r0, [pc, #192]	; (2000e194 <main+0xec>)
2000e0d2:	f000 fa2f 	bl	2000e534 <SDK_TRACE_Print>
  SDK_TRACE_Timestamp(PRINT, 0);
2000e0d6:	2100      	movs	r1, #0
2000e0d8:	2004      	movs	r0, #4
2000e0da:	f000 f9d9 	bl	2000e490 <SDK_TRACE_Timestamp>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
2000e0de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000e0e2:	482d      	ldr	r0, [pc, #180]	; (2000e198 <main+0xf0>)
2000e0e4:	f000 fe57 	bl	2000ed96 <HAL_GPIO_TogglePin>
  SDK_TRACE_Timestamp(LED3, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15));
2000e0e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000e0ec:	482a      	ldr	r0, [pc, #168]	; (2000e198 <main+0xf0>)
2000e0ee:	f000 fe21 	bl	2000ed34 <HAL_GPIO_ReadPin>
2000e0f2:	4603      	mov	r3, r0
2000e0f4:	4619      	mov	r1, r3
2000e0f6:	2003      	movs	r0, #3
2000e0f8:	f000 f9ca 	bl	2000e490 <SDK_TRACE_Timestamp>
  /* Place your code from here */
  /* Example of using LED tracing */

  for (int i = 0; i < 10; i++) {
2000e0fc:	2300      	movs	r3, #0
2000e0fe:	607b      	str	r3, [r7, #4]
2000e100:	e004      	b.n	2000e10c <main+0x64>
	  rust_main();
2000e102:	f001 face 	bl	2000f6a2 <rust_main>
  for (int i = 0; i < 10; i++) {
2000e106:	687b      	ldr	r3, [r7, #4]
2000e108:	3301      	adds	r3, #1
2000e10a:	607b      	str	r3, [r7, #4]
2000e10c:	687b      	ldr	r3, [r7, #4]
2000e10e:	2b09      	cmp	r3, #9
2000e110:	ddf7      	ble.n	2000e102 <main+0x5a>
  }

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
2000e112:	2200      	movs	r2, #0
2000e114:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000e118:	481f      	ldr	r0, [pc, #124]	; (2000e198 <main+0xf0>)
2000e11a:	f000 fe23 	bl	2000ed64 <HAL_GPIO_WritePin>
  SDK_TRACE_Timestamp(LED1, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13));
2000e11e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000e122:	481d      	ldr	r0, [pc, #116]	; (2000e198 <main+0xf0>)
2000e124:	f000 fe06 	bl	2000ed34 <HAL_GPIO_ReadPin>
2000e128:	4603      	mov	r3, r0
2000e12a:	4619      	mov	r1, r3
2000e12c:	2001      	movs	r0, #1
2000e12e:	f000 f9af 	bl	2000e490 <SDK_TRACE_Timestamp>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
2000e132:	2200      	movs	r2, #0
2000e134:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000e138:	4817      	ldr	r0, [pc, #92]	; (2000e198 <main+0xf0>)
2000e13a:	f000 fe13 	bl	2000ed64 <HAL_GPIO_WritePin>
  SDK_TRACE_Timestamp(LED3, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15));
2000e13e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000e142:	4815      	ldr	r0, [pc, #84]	; (2000e198 <main+0xf0>)
2000e144:	f000 fdf6 	bl	2000ed34 <HAL_GPIO_ReadPin>
2000e148:	4603      	mov	r3, r0
2000e14a:	4619      	mov	r1, r3
2000e14c:	2003      	movs	r0, #3
2000e14e:	f000 f99f 	bl	2000e490 <SDK_TRACE_Timestamp>

  SDK_TRACE_Timestamp(PRINT, 1);
2000e152:	2101      	movs	r1, #1
2000e154:	2004      	movs	r0, #4
2000e156:	f000 f99b 	bl	2000e490 <SDK_TRACE_Timestamp>
  SDK_TRACE_Print("%s","Test passed");
2000e15a:	4910      	ldr	r1, [pc, #64]	; (2000e19c <main+0xf4>)
2000e15c:	480d      	ldr	r0, [pc, #52]	; (2000e194 <main+0xec>)
2000e15e:	f000 f9e9 	bl	2000e534 <SDK_TRACE_Print>
  SDK_TRACE_Timestamp(PRINT, 0);
2000e162:	2100      	movs	r1, #0
2000e164:	2004      	movs	r0, #4
2000e166:	f000 f993 	bl	2000e490 <SDK_TRACE_Timestamp>

  /* Example of sending debug messages */

  SDK_TRACE_Print("%s%d%s%X", "Decimal value: ", 255, " Hex value: ", 255);
2000e16a:	23ff      	movs	r3, #255	; 0xff
2000e16c:	9300      	str	r3, [sp, #0]
2000e16e:	4b0c      	ldr	r3, [pc, #48]	; (2000e1a0 <main+0xf8>)
2000e170:	22ff      	movs	r2, #255	; 0xff
2000e172:	490c      	ldr	r1, [pc, #48]	; (2000e1a4 <main+0xfc>)
2000e174:	480c      	ldr	r0, [pc, #48]	; (2000e1a8 <main+0x100>)
2000e176:	f000 f9dd 	bl	2000e534 <SDK_TRACE_Print>

  /* Example of writing dump */

  uint8_t data[4] = { 0xDE, 0xAD, 0xBE, 0xEF };
2000e17a:	4b0c      	ldr	r3, [pc, #48]	; (2000e1ac <main+0x104>)
2000e17c:	603b      	str	r3, [r7, #0]
  SDK_TRACE_Dump((uint32_t)&data, 4);
2000e17e:	463b      	mov	r3, r7
2000e180:	2104      	movs	r1, #4
2000e182:	4618      	mov	r0, r3
2000e184:	f000 fa3c 	bl	2000e600 <SDK_TRACE_Dump>

  /* Place your code before here */
  /* Do not remove this code below */
  SDK_TRACE_Stop();
2000e188:	f000 f95a 	bl	2000e440 <SDK_TRACE_Stop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
2000e18c:	e7fe      	b.n	2000e18c <main+0xe4>
2000e18e:	bf00      	nop
2000e190:	2000fba8 	.word	0x2000fba8
2000e194:	2000fbb8 	.word	0x2000fbb8
2000e198:	40020c00 	.word	0x40020c00
2000e19c:	2000fbbc 	.word	0x2000fbbc
2000e1a0:	2000fbc8 	.word	0x2000fbc8
2000e1a4:	2000fbd8 	.word	0x2000fbd8
2000e1a8:	2000fbe8 	.word	0x2000fbe8
2000e1ac:	efbeadde 	.word	0xefbeadde

2000e1b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
2000e1b0:	b580      	push	{r7, lr}
2000e1b2:	b094      	sub	sp, #80	; 0x50
2000e1b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2000e1b6:	f107 0320 	add.w	r3, r7, #32
2000e1ba:	2230      	movs	r2, #48	; 0x30
2000e1bc:	2100      	movs	r1, #0
2000e1be:	4618      	mov	r0, r3
2000e1c0:	f001 fa7c 	bl	2000f6bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2000e1c4:	f107 030c 	add.w	r3, r7, #12
2000e1c8:	2200      	movs	r2, #0
2000e1ca:	601a      	str	r2, [r3, #0]
2000e1cc:	605a      	str	r2, [r3, #4]
2000e1ce:	609a      	str	r2, [r3, #8]
2000e1d0:	60da      	str	r2, [r3, #12]
2000e1d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
2000e1d4:	2300      	movs	r3, #0
2000e1d6:	60bb      	str	r3, [r7, #8]
2000e1d8:	4b29      	ldr	r3, [pc, #164]	; (2000e280 <SystemClock_Config+0xd0>)
2000e1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e1dc:	4a28      	ldr	r2, [pc, #160]	; (2000e280 <SystemClock_Config+0xd0>)
2000e1de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000e1e2:	6413      	str	r3, [r2, #64]	; 0x40
2000e1e4:	4b26      	ldr	r3, [pc, #152]	; (2000e280 <SystemClock_Config+0xd0>)
2000e1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e1e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e1ec:	60bb      	str	r3, [r7, #8]
2000e1ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2000e1f0:	2300      	movs	r3, #0
2000e1f2:	607b      	str	r3, [r7, #4]
2000e1f4:	4b23      	ldr	r3, [pc, #140]	; (2000e284 <SystemClock_Config+0xd4>)
2000e1f6:	681b      	ldr	r3, [r3, #0]
2000e1f8:	4a22      	ldr	r2, [pc, #136]	; (2000e284 <SystemClock_Config+0xd4>)
2000e1fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000e1fe:	6013      	str	r3, [r2, #0]
2000e200:	4b20      	ldr	r3, [pc, #128]	; (2000e284 <SystemClock_Config+0xd4>)
2000e202:	681b      	ldr	r3, [r3, #0]
2000e204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000e208:	607b      	str	r3, [r7, #4]
2000e20a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
2000e20c:	2309      	movs	r3, #9
2000e20e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
2000e210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000e214:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
2000e216:	2301      	movs	r3, #1
2000e218:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2000e21a:	2302      	movs	r3, #2
2000e21c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2000e21e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000e222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
2000e224:	2319      	movs	r3, #25
2000e226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
2000e228:	f44f 73a8 	mov.w	r3, #336	; 0x150
2000e22c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
2000e22e:	2302      	movs	r3, #2
2000e230:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
2000e232:	2304      	movs	r3, #4
2000e234:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000e236:	f107 0320 	add.w	r3, r7, #32
2000e23a:	4618      	mov	r0, r3
2000e23c:	f000 fe00 	bl	2000ee40 <HAL_RCC_OscConfig>
2000e240:	4603      	mov	r3, r0
2000e242:	2b00      	cmp	r3, #0
2000e244:	d001      	beq.n	2000e24a <SystemClock_Config+0x9a>
  {
    Error_Handler();
2000e246:	f000 f81f 	bl	2000e288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2000e24a:	230f      	movs	r3, #15
2000e24c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2000e24e:	2302      	movs	r3, #2
2000e250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
2000e252:	2300      	movs	r3, #0
2000e254:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
2000e256:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
2000e25a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
2000e25c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2000e260:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
2000e262:	f107 030c 	add.w	r3, r7, #12
2000e266:	2105      	movs	r1, #5
2000e268:	4618      	mov	r0, r3
2000e26a:	f001 f859 	bl	2000f320 <HAL_RCC_ClockConfig>
2000e26e:	4603      	mov	r3, r0
2000e270:	2b00      	cmp	r3, #0
2000e272:	d001      	beq.n	2000e278 <SystemClock_Config+0xc8>
  {
    Error_Handler();
2000e274:	f000 f808 	bl	2000e288 <Error_Handler>
  }
}
2000e278:	bf00      	nop
2000e27a:	3750      	adds	r7, #80	; 0x50
2000e27c:	46bd      	mov	sp, r7
2000e27e:	bd80      	pop	{r7, pc}
2000e280:	40023800 	.word	0x40023800
2000e284:	40007000 	.word	0x40007000

2000e288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
2000e288:	b480      	push	{r7}
2000e28a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
2000e28c:	bf00      	nop
2000e28e:	46bd      	mov	sp, r7
2000e290:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e294:	4770      	bx	lr
	...

2000e298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
2000e298:	b480      	push	{r7}
2000e29a:	b083      	sub	sp, #12
2000e29c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000e29e:	2300      	movs	r3, #0
2000e2a0:	607b      	str	r3, [r7, #4]
2000e2a2:	4b10      	ldr	r3, [pc, #64]	; (2000e2e4 <HAL_MspInit+0x4c>)
2000e2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e2a6:	4a0f      	ldr	r2, [pc, #60]	; (2000e2e4 <HAL_MspInit+0x4c>)
2000e2a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000e2ac:	6453      	str	r3, [r2, #68]	; 0x44
2000e2ae:	4b0d      	ldr	r3, [pc, #52]	; (2000e2e4 <HAL_MspInit+0x4c>)
2000e2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e2b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000e2b6:	607b      	str	r3, [r7, #4]
2000e2b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
2000e2ba:	2300      	movs	r3, #0
2000e2bc:	603b      	str	r3, [r7, #0]
2000e2be:	4b09      	ldr	r3, [pc, #36]	; (2000e2e4 <HAL_MspInit+0x4c>)
2000e2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e2c2:	4a08      	ldr	r2, [pc, #32]	; (2000e2e4 <HAL_MspInit+0x4c>)
2000e2c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000e2c8:	6413      	str	r3, [r2, #64]	; 0x40
2000e2ca:	4b06      	ldr	r3, [pc, #24]	; (2000e2e4 <HAL_MspInit+0x4c>)
2000e2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e2ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e2d2:	603b      	str	r3, [r7, #0]
2000e2d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2000e2d6:	bf00      	nop
2000e2d8:	370c      	adds	r7, #12
2000e2da:	46bd      	mov	sp, r7
2000e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e2e0:	4770      	bx	lr
2000e2e2:	bf00      	nop
2000e2e4:	40023800 	.word	0x40023800

2000e2e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
2000e2e8:	b480      	push	{r7}
2000e2ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
2000e2ec:	bf00      	nop
2000e2ee:	46bd      	mov	sp, r7
2000e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e2f4:	4770      	bx	lr

2000e2f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
2000e2f6:	b480      	push	{r7}
2000e2f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2000e2fa:	e7fe      	b.n	2000e2fa <HardFault_Handler+0x4>

2000e2fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
2000e2fc:	b480      	push	{r7}
2000e2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000e300:	e7fe      	b.n	2000e300 <MemManage_Handler+0x4>

2000e302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2000e302:	b480      	push	{r7}
2000e304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
2000e306:	e7fe      	b.n	2000e306 <BusFault_Handler+0x4>

2000e308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
2000e308:	b480      	push	{r7}
2000e30a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
2000e30c:	e7fe      	b.n	2000e30c <UsageFault_Handler+0x4>

2000e30e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2000e30e:	b480      	push	{r7}
2000e310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2000e312:	bf00      	nop
2000e314:	46bd      	mov	sp, r7
2000e316:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e31a:	4770      	bx	lr

2000e31c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
2000e31c:	b480      	push	{r7}
2000e31e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2000e320:	bf00      	nop
2000e322:	46bd      	mov	sp, r7
2000e324:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e328:	4770      	bx	lr

2000e32a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
2000e32a:	b480      	push	{r7}
2000e32c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2000e32e:	bf00      	nop
2000e330:	46bd      	mov	sp, r7
2000e332:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e336:	4770      	bx	lr

2000e338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2000e338:	b580      	push	{r7, lr}
2000e33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2000e33c:	f000 fa34 	bl	2000e7a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
2000e340:	bf00      	nop
2000e342:	bd80      	pop	{r7, pc}

2000e344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
2000e344:	b580      	push	{r7, lr}
2000e346:	b086      	sub	sp, #24
2000e348:	af00      	add	r7, sp, #0
2000e34a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
2000e34c:	4a14      	ldr	r2, [pc, #80]	; (2000e3a0 <_sbrk+0x5c>)
2000e34e:	4b15      	ldr	r3, [pc, #84]	; (2000e3a4 <_sbrk+0x60>)
2000e350:	1ad3      	subs	r3, r2, r3
2000e352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
2000e354:	697b      	ldr	r3, [r7, #20]
2000e356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
2000e358:	4b13      	ldr	r3, [pc, #76]	; (2000e3a8 <_sbrk+0x64>)
2000e35a:	681b      	ldr	r3, [r3, #0]
2000e35c:	2b00      	cmp	r3, #0
2000e35e:	d102      	bne.n	2000e366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
2000e360:	4b11      	ldr	r3, [pc, #68]	; (2000e3a8 <_sbrk+0x64>)
2000e362:	4a12      	ldr	r2, [pc, #72]	; (2000e3ac <_sbrk+0x68>)
2000e364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
2000e366:	4b10      	ldr	r3, [pc, #64]	; (2000e3a8 <_sbrk+0x64>)
2000e368:	681a      	ldr	r2, [r3, #0]
2000e36a:	687b      	ldr	r3, [r7, #4]
2000e36c:	4413      	add	r3, r2
2000e36e:	693a      	ldr	r2, [r7, #16]
2000e370:	429a      	cmp	r2, r3
2000e372:	d207      	bcs.n	2000e384 <_sbrk+0x40>
  {
    errno = ENOMEM;
2000e374:	f7fe ff50 	bl	2000d218 <__errno>
2000e378:	4603      	mov	r3, r0
2000e37a:	220c      	movs	r2, #12
2000e37c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
2000e37e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2000e382:	e009      	b.n	2000e398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
2000e384:	4b08      	ldr	r3, [pc, #32]	; (2000e3a8 <_sbrk+0x64>)
2000e386:	681b      	ldr	r3, [r3, #0]
2000e388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
2000e38a:	4b07      	ldr	r3, [pc, #28]	; (2000e3a8 <_sbrk+0x64>)
2000e38c:	681a      	ldr	r2, [r3, #0]
2000e38e:	687b      	ldr	r3, [r7, #4]
2000e390:	4413      	add	r3, r2
2000e392:	4a05      	ldr	r2, [pc, #20]	; (2000e3a8 <_sbrk+0x64>)
2000e394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
2000e396:	68fb      	ldr	r3, [r7, #12]
}
2000e398:	4618      	mov	r0, r3
2000e39a:	3718      	adds	r7, #24
2000e39c:	46bd      	mov	sp, r7
2000e39e:	bd80      	pop	{r7, pc}
2000e3a0:	20020000 	.word	0x20020000
2000e3a4:	00000400 	.word	0x00000400
2000e3a8:	200100f8 	.word	0x200100f8
2000e3ac:	20010218 	.word	0x20010218

2000e3b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
2000e3b0:	b480      	push	{r7}
2000e3b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
2000e3b4:	4b07      	ldr	r3, [pc, #28]	; (2000e3d4 <SystemInit+0x24>)
2000e3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e3ba:	4a06      	ldr	r2, [pc, #24]	; (2000e3d4 <SystemInit+0x24>)
2000e3bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
2000e3c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
2000e3c4:	4b03      	ldr	r3, [pc, #12]	; (2000e3d4 <SystemInit+0x24>)
2000e3c6:	4a04      	ldr	r2, [pc, #16]	; (2000e3d8 <SystemInit+0x28>)
2000e3c8:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
2000e3ca:	bf00      	nop
2000e3cc:	46bd      	mov	sp, r7
2000e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e3d2:	4770      	bx	lr
2000e3d4:	e000ed00 	.word	0xe000ed00
2000e3d8:	2000d000 	.word	0x2000d000

2000e3dc <MX_TRACE_Init>:
 * ----------------------------------------------------------------------
 * Trace initialization function
 *-----------------------------------------------------------------------
 */
void MX_TRACE_Init(void)
{
2000e3dc:	b480      	push	{r7}
2000e3de:	af00      	add	r7, sp, #0
	InitCC();
2000e3e0:	4b0c      	ldr	r3, [pc, #48]	; (2000e414 <MX_TRACE_Init+0x38>)
2000e3e2:	681b      	ldr	r3, [r3, #0]
2000e3e4:	4a0b      	ldr	r2, [pc, #44]	; (2000e414 <MX_TRACE_Init+0x38>)
2000e3e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2000e3ea:	6013      	str	r3, [r2, #0]
	ResetCC();
2000e3ec:	4b0a      	ldr	r3, [pc, #40]	; (2000e418 <MX_TRACE_Init+0x3c>)
2000e3ee:	2200      	movs	r2, #0
2000e3f0:	601a      	str	r2, [r3, #0]
	TI->printlog_size = 0x00;
2000e3f2:	4b0a      	ldr	r3, [pc, #40]	; (2000e41c <MX_TRACE_Init+0x40>)
2000e3f4:	681b      	ldr	r3, [r3, #0]
2000e3f6:	2200      	movs	r2, #0
2000e3f8:	605a      	str	r2, [r3, #4]
	TI->tracelog_size = 0x00;
2000e3fa:	4b08      	ldr	r3, [pc, #32]	; (2000e41c <MX_TRACE_Init+0x40>)
2000e3fc:	681b      	ldr	r3, [r3, #0]
2000e3fe:	2200      	movs	r2, #0
2000e400:	601a      	str	r2, [r3, #0]
	TI->dumpbuf_size = 0x00;
2000e402:	4b06      	ldr	r3, [pc, #24]	; (2000e41c <MX_TRACE_Init+0x40>)
2000e404:	681b      	ldr	r3, [r3, #0]
2000e406:	2200      	movs	r2, #0
2000e408:	609a      	str	r2, [r3, #8]
}
2000e40a:	bf00      	nop
2000e40c:	46bd      	mov	sp, r7
2000e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e412:	4770      	bx	lr
2000e414:	e000edfc 	.word	0xe000edfc
2000e418:	e0001004 	.word	0xe0001004
2000e41c:	200100b8 	.word	0x200100b8

2000e420 <SDK_TRACE_Start>:
 * ----------------------------------------------------------------------
 * Start trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Start(void)
{
2000e420:	b480      	push	{r7}
2000e422:	af00      	add	r7, sp, #0
	EnableCC();
2000e424:	4b05      	ldr	r3, [pc, #20]	; (2000e43c <SDK_TRACE_Start+0x1c>)
2000e426:	681b      	ldr	r3, [r3, #0]
2000e428:	4a04      	ldr	r2, [pc, #16]	; (2000e43c <SDK_TRACE_Start+0x1c>)
2000e42a:	f043 0301 	orr.w	r3, r3, #1
2000e42e:	6013      	str	r3, [r2, #0]
}
2000e430:	bf00      	nop
2000e432:	46bd      	mov	sp, r7
2000e434:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e438:	4770      	bx	lr
2000e43a:	bf00      	nop
2000e43c:	e0001000 	.word	0xe0001000

2000e440 <SDK_TRACE_Stop>:
 * ----------------------------------------------------------------------
 * Stop trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Stop(void)
{
2000e440:	b598      	push	{r3, r4, r7, lr}
2000e442:	af00      	add	r7, sp, #0
	DisableCC();
2000e444:	4b0c      	ldr	r3, [pc, #48]	; (2000e478 <SDK_TRACE_Stop+0x38>)
2000e446:	681b      	ldr	r3, [r3, #0]
2000e448:	4a0b      	ldr	r2, [pc, #44]	; (2000e478 <SDK_TRACE_Stop+0x38>)
2000e44a:	f023 0301 	bic.w	r3, r3, #1
2000e44e:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
2000e450:	b672      	cpsid	i
}
2000e452:	bf00      	nop
	__disable_irq();
	*CRC32 = crc32((unsigned char *)TRACEINFO_ADDR, sizeof(traceinfo_t) + (TI->tracelog_size), 0);
2000e454:	4b09      	ldr	r3, [pc, #36]	; (2000e47c <SDK_TRACE_Stop+0x3c>)
2000e456:	681b      	ldr	r3, [r3, #0]
2000e458:	681b      	ldr	r3, [r3, #0]
2000e45a:	3310      	adds	r3, #16
2000e45c:	4a08      	ldr	r2, [pc, #32]	; (2000e480 <SDK_TRACE_Stop+0x40>)
2000e45e:	6814      	ldr	r4, [r2, #0]
2000e460:	2200      	movs	r2, #0
2000e462:	4619      	mov	r1, r3
2000e464:	4807      	ldr	r0, [pc, #28]	; (2000e484 <SDK_TRACE_Stop+0x44>)
2000e466:	f7ff fd87 	bl	2000df78 <crc32>
2000e46a:	4603      	mov	r3, r0
2000e46c:	6023      	str	r3, [r4, #0]
	SCB->AIRCR = 0x05FA0004;
2000e46e:	4b06      	ldr	r3, [pc, #24]	; (2000e488 <SDK_TRACE_Stop+0x48>)
2000e470:	4a06      	ldr	r2, [pc, #24]	; (2000e48c <SDK_TRACE_Stop+0x4c>)
2000e472:	60da      	str	r2, [r3, #12]
}
2000e474:	bf00      	nop
2000e476:	bd98      	pop	{r3, r4, r7, pc}
2000e478:	e0001000 	.word	0xe0001000
2000e47c:	200100b8 	.word	0x200100b8
2000e480:	200100c0 	.word	0x200100c0
2000e484:	10000004 	.word	0x10000004
2000e488:	e000ed00 	.word	0xe000ed00
2000e48c:	05fa0004 	.word	0x05fa0004

2000e490 <SDK_TRACE_Timestamp>:
 * @param id Event ID (For example: LED1)
 * @param value LED port state (0 or 1)
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Timestamp(uint8_t id, uint8_t value)
{
2000e490:	b590      	push	{r4, r7, lr}
2000e492:	b085      	sub	sp, #20
2000e494:	af00      	add	r7, sp, #0
2000e496:	4603      	mov	r3, r0
2000e498:	460a      	mov	r2, r1
2000e49a:	71fb      	strb	r3, [r7, #7]
2000e49c:	4613      	mov	r3, r2
2000e49e:	71bb      	strb	r3, [r7, #6]
	uint32_t eCode = 0x00;
2000e4a0:	2300      	movs	r3, #0
2000e4a2:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + 0x01;
2000e4a4:	68fb      	ldr	r3, [r7, #12]
2000e4a6:	021b      	lsls	r3, r3, #8
2000e4a8:	3301      	adds	r3, #1
2000e4aa:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + value;
2000e4ac:	68fb      	ldr	r3, [r7, #12]
2000e4ae:	021a      	lsls	r2, r3, #8
2000e4b0:	79bb      	ldrb	r3, [r7, #6]
2000e4b2:	4413      	add	r3, r2
2000e4b4:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + id;
2000e4b6:	68fb      	ldr	r3, [r7, #12]
2000e4b8:	021a      	lsls	r2, r3, #8
2000e4ba:	79fb      	ldrb	r3, [r7, #7]
2000e4bc:	4413      	add	r3, r2
2000e4be:	60fb      	str	r3, [r7, #12]
	TL[TI->tracelog_size/8].timecode = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000e4c0:	4b17      	ldr	r3, [pc, #92]	; (2000e520 <SDK_TRACE_Timestamp+0x90>)
2000e4c2:	681c      	ldr	r4, [r3, #0]
2000e4c4:	f001 f8c8 	bl	2000f658 <HAL_RCC_GetHCLKFreq>
2000e4c8:	4603      	mov	r3, r0
2000e4ca:	4a16      	ldr	r2, [pc, #88]	; (2000e524 <SDK_TRACE_Timestamp+0x94>)
2000e4cc:	fba2 2303 	umull	r2, r3, r2, r3
2000e4d0:	0c9a      	lsrs	r2, r3, #18
2000e4d2:	4b15      	ldr	r3, [pc, #84]	; (2000e528 <SDK_TRACE_Timestamp+0x98>)
2000e4d4:	6819      	ldr	r1, [r3, #0]
2000e4d6:	4b15      	ldr	r3, [pc, #84]	; (2000e52c <SDK_TRACE_Timestamp+0x9c>)
2000e4d8:	681b      	ldr	r3, [r3, #0]
2000e4da:	681b      	ldr	r3, [r3, #0]
2000e4dc:	f023 0307 	bic.w	r3, r3, #7
2000e4e0:	440b      	add	r3, r1
2000e4e2:	fbb4 f2f2 	udiv	r2, r4, r2
2000e4e6:	601a      	str	r2, [r3, #0]
	TL[TI->tracelog_size/8].eventcode = eCode;
2000e4e8:	4b0f      	ldr	r3, [pc, #60]	; (2000e528 <SDK_TRACE_Timestamp+0x98>)
2000e4ea:	681a      	ldr	r2, [r3, #0]
2000e4ec:	4b0f      	ldr	r3, [pc, #60]	; (2000e52c <SDK_TRACE_Timestamp+0x9c>)
2000e4ee:	681b      	ldr	r3, [r3, #0]
2000e4f0:	681b      	ldr	r3, [r3, #0]
2000e4f2:	f023 0307 	bic.w	r3, r3, #7
2000e4f6:	4413      	add	r3, r2
2000e4f8:	68fa      	ldr	r2, [r7, #12]
2000e4fa:	605a      	str	r2, [r3, #4]
	TI->tracelog_size+=8;
2000e4fc:	4b0b      	ldr	r3, [pc, #44]	; (2000e52c <SDK_TRACE_Timestamp+0x9c>)
2000e4fe:	681b      	ldr	r3, [r3, #0]
2000e500:	681a      	ldr	r2, [r3, #0]
2000e502:	4b0a      	ldr	r3, [pc, #40]	; (2000e52c <SDK_TRACE_Timestamp+0x9c>)
2000e504:	681b      	ldr	r3, [r3, #0]
2000e506:	3208      	adds	r2, #8
2000e508:	601a      	str	r2, [r3, #0]
	eventId++;
2000e50a:	4b09      	ldr	r3, [pc, #36]	; (2000e530 <SDK_TRACE_Timestamp+0xa0>)
2000e50c:	781b      	ldrb	r3, [r3, #0]
2000e50e:	3301      	adds	r3, #1
2000e510:	b2da      	uxtb	r2, r3
2000e512:	4b07      	ldr	r3, [pc, #28]	; (2000e530 <SDK_TRACE_Timestamp+0xa0>)
2000e514:	701a      	strb	r2, [r3, #0]
}
2000e516:	bf00      	nop
2000e518:	3714      	adds	r7, #20
2000e51a:	46bd      	mov	sp, r7
2000e51c:	bd90      	pop	{r4, r7, pc}
2000e51e:	bf00      	nop
2000e520:	e0001004 	.word	0xe0001004
2000e524:	431bde83 	.word	0x431bde83
2000e528:	200100bc 	.word	0x200100bc
2000e52c:	200100b8 	.word	0x200100b8
2000e530:	200100fc 	.word	0x200100fc

2000e534 <SDK_TRACE_Print>:
 * ----------------------------------------------------------------------
 * Writes the C string pointed by format to the trace buffer
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Print(char * format, ...)
{
2000e534:	b40f      	push	{r0, r1, r2, r3}
2000e536:	b590      	push	{r4, r7, lr}
2000e538:	b085      	sub	sp, #20
2000e53a:	af00      	add	r7, sp, #0

	va_list args;
	va_start(args, format);
2000e53c:	f107 0324 	add.w	r3, r7, #36	; 0x24
2000e540:	607b      	str	r3, [r7, #4]

	vsprintf( __buf, format, args);
2000e542:	687a      	ldr	r2, [r7, #4]
2000e544:	6a39      	ldr	r1, [r7, #32]
2000e546:	4829      	ldr	r0, [pc, #164]	; (2000e5ec <SDK_TRACE_Print+0xb8>)
2000e548:	f7fe fea4 	bl	2000d294 <vsiprintf>

	uint8_t len = strlen(__buf);
2000e54c:	4827      	ldr	r0, [pc, #156]	; (2000e5ec <SDK_TRACE_Print+0xb8>)
2000e54e:	f001 f922 	bl	2000f796 <strlen>
2000e552:	4603      	mov	r3, r0
2000e554:	72fb      	strb	r3, [r7, #11]

	*(__IO uint32_t *)(Print_Write_Address+TI->printlog_size) = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000e556:	4b26      	ldr	r3, [pc, #152]	; (2000e5f0 <SDK_TRACE_Print+0xbc>)
2000e558:	681c      	ldr	r4, [r3, #0]
2000e55a:	f001 f87d 	bl	2000f658 <HAL_RCC_GetHCLKFreq>
2000e55e:	4603      	mov	r3, r0
2000e560:	4a24      	ldr	r2, [pc, #144]	; (2000e5f4 <SDK_TRACE_Print+0xc0>)
2000e562:	fba2 2303 	umull	r2, r3, r2, r3
2000e566:	0c9b      	lsrs	r3, r3, #18
2000e568:	4a23      	ldr	r2, [pc, #140]	; (2000e5f8 <SDK_TRACE_Print+0xc4>)
2000e56a:	6812      	ldr	r2, [r2, #0]
2000e56c:	6851      	ldr	r1, [r2, #4]
2000e56e:	4a23      	ldr	r2, [pc, #140]	; (2000e5fc <SDK_TRACE_Print+0xc8>)
2000e570:	6812      	ldr	r2, [r2, #0]
2000e572:	440a      	add	r2, r1
2000e574:	fbb4 f3f3 	udiv	r3, r4, r3
2000e578:	6013      	str	r3, [r2, #0]
	TI->printlog_size+=4;
2000e57a:	4b1f      	ldr	r3, [pc, #124]	; (2000e5f8 <SDK_TRACE_Print+0xc4>)
2000e57c:	681b      	ldr	r3, [r3, #0]
2000e57e:	685a      	ldr	r2, [r3, #4]
2000e580:	4b1d      	ldr	r3, [pc, #116]	; (2000e5f8 <SDK_TRACE_Print+0xc4>)
2000e582:	681b      	ldr	r3, [r3, #0]
2000e584:	3204      	adds	r2, #4
2000e586:	605a      	str	r2, [r3, #4]

	*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = len;
2000e588:	4b1b      	ldr	r3, [pc, #108]	; (2000e5f8 <SDK_TRACE_Print+0xc4>)
2000e58a:	681b      	ldr	r3, [r3, #0]
2000e58c:	685a      	ldr	r2, [r3, #4]
2000e58e:	4b1b      	ldr	r3, [pc, #108]	; (2000e5fc <SDK_TRACE_Print+0xc8>)
2000e590:	681b      	ldr	r3, [r3, #0]
2000e592:	4413      	add	r3, r2
2000e594:	461a      	mov	r2, r3
2000e596:	7afb      	ldrb	r3, [r7, #11]
2000e598:	7013      	strb	r3, [r2, #0]
	TI->printlog_size++;
2000e59a:	4b17      	ldr	r3, [pc, #92]	; (2000e5f8 <SDK_TRACE_Print+0xc4>)
2000e59c:	681b      	ldr	r3, [r3, #0]
2000e59e:	685a      	ldr	r2, [r3, #4]
2000e5a0:	3201      	adds	r2, #1
2000e5a2:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < len; i++)
2000e5a4:	2300      	movs	r3, #0
2000e5a6:	60fb      	str	r3, [r7, #12]
2000e5a8:	e013      	b.n	2000e5d2 <SDK_TRACE_Print+0x9e>
	{
		*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = __buf[i];
2000e5aa:	4b13      	ldr	r3, [pc, #76]	; (2000e5f8 <SDK_TRACE_Print+0xc4>)
2000e5ac:	681b      	ldr	r3, [r3, #0]
2000e5ae:	685a      	ldr	r2, [r3, #4]
2000e5b0:	4b12      	ldr	r3, [pc, #72]	; (2000e5fc <SDK_TRACE_Print+0xc8>)
2000e5b2:	681b      	ldr	r3, [r3, #0]
2000e5b4:	4413      	add	r3, r2
2000e5b6:	4619      	mov	r1, r3
2000e5b8:	4a0c      	ldr	r2, [pc, #48]	; (2000e5ec <SDK_TRACE_Print+0xb8>)
2000e5ba:	68fb      	ldr	r3, [r7, #12]
2000e5bc:	4413      	add	r3, r2
2000e5be:	781b      	ldrb	r3, [r3, #0]
2000e5c0:	700b      	strb	r3, [r1, #0]
		TI->printlog_size++;
2000e5c2:	4b0d      	ldr	r3, [pc, #52]	; (2000e5f8 <SDK_TRACE_Print+0xc4>)
2000e5c4:	681b      	ldr	r3, [r3, #0]
2000e5c6:	685a      	ldr	r2, [r3, #4]
2000e5c8:	3201      	adds	r2, #1
2000e5ca:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < len; i++)
2000e5cc:	68fb      	ldr	r3, [r7, #12]
2000e5ce:	3301      	adds	r3, #1
2000e5d0:	60fb      	str	r3, [r7, #12]
2000e5d2:	7afb      	ldrb	r3, [r7, #11]
2000e5d4:	68fa      	ldr	r2, [r7, #12]
2000e5d6:	429a      	cmp	r2, r3
2000e5d8:	dbe7      	blt.n	2000e5aa <SDK_TRACE_Print+0x76>
	}
}
2000e5da:	bf00      	nop
2000e5dc:	bf00      	nop
2000e5de:	3714      	adds	r7, #20
2000e5e0:	46bd      	mov	sp, r7
2000e5e2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
2000e5e6:	b004      	add	sp, #16
2000e5e8:	4770      	bx	lr
2000e5ea:	bf00      	nop
2000e5ec:	2001010c 	.word	0x2001010c
2000e5f0:	e0001004 	.word	0xe0001004
2000e5f4:	431bde83 	.word	0x431bde83
2000e5f8:	200100b8 	.word	0x200100b8
2000e5fc:	200100c4 	.word	0x200100c4

2000e600 <SDK_TRACE_Dump>:
 * @param addr Address of data
 * @param size Size of data
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Dump(uint32_t addr, uint16_t size)
{
2000e600:	b590      	push	{r4, r7, lr}
2000e602:	b085      	sub	sp, #20
2000e604:	af00      	add	r7, sp, #0
2000e606:	6078      	str	r0, [r7, #4]
2000e608:	460b      	mov	r3, r1
2000e60a:	807b      	strh	r3, [r7, #2]

	*(__IO uint32_t *)(Dump_Write_Address+TI->dumpbuf_size) = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000e60c:	4b24      	ldr	r3, [pc, #144]	; (2000e6a0 <SDK_TRACE_Dump+0xa0>)
2000e60e:	681c      	ldr	r4, [r3, #0]
2000e610:	f001 f822 	bl	2000f658 <HAL_RCC_GetHCLKFreq>
2000e614:	4603      	mov	r3, r0
2000e616:	4a23      	ldr	r2, [pc, #140]	; (2000e6a4 <SDK_TRACE_Dump+0xa4>)
2000e618:	fba2 2303 	umull	r2, r3, r2, r3
2000e61c:	0c9b      	lsrs	r3, r3, #18
2000e61e:	4a22      	ldr	r2, [pc, #136]	; (2000e6a8 <SDK_TRACE_Dump+0xa8>)
2000e620:	6812      	ldr	r2, [r2, #0]
2000e622:	6891      	ldr	r1, [r2, #8]
2000e624:	4a21      	ldr	r2, [pc, #132]	; (2000e6ac <SDK_TRACE_Dump+0xac>)
2000e626:	6812      	ldr	r2, [r2, #0]
2000e628:	440a      	add	r2, r1
2000e62a:	fbb4 f3f3 	udiv	r3, r4, r3
2000e62e:	6013      	str	r3, [r2, #0]
	TI->dumpbuf_size+=4;
2000e630:	4b1d      	ldr	r3, [pc, #116]	; (2000e6a8 <SDK_TRACE_Dump+0xa8>)
2000e632:	681b      	ldr	r3, [r3, #0]
2000e634:	689a      	ldr	r2, [r3, #8]
2000e636:	4b1c      	ldr	r3, [pc, #112]	; (2000e6a8 <SDK_TRACE_Dump+0xa8>)
2000e638:	681b      	ldr	r3, [r3, #0]
2000e63a:	3204      	adds	r2, #4
2000e63c:	609a      	str	r2, [r3, #8]

	*(__IO uint16_t *)(Dump_Write_Address+TI->dumpbuf_size) = size;
2000e63e:	4b1a      	ldr	r3, [pc, #104]	; (2000e6a8 <SDK_TRACE_Dump+0xa8>)
2000e640:	681b      	ldr	r3, [r3, #0]
2000e642:	689a      	ldr	r2, [r3, #8]
2000e644:	4b19      	ldr	r3, [pc, #100]	; (2000e6ac <SDK_TRACE_Dump+0xac>)
2000e646:	681b      	ldr	r3, [r3, #0]
2000e648:	4413      	add	r3, r2
2000e64a:	461a      	mov	r2, r3
2000e64c:	887b      	ldrh	r3, [r7, #2]
2000e64e:	8013      	strh	r3, [r2, #0]
	TI->dumpbuf_size+=2;
2000e650:	4b15      	ldr	r3, [pc, #84]	; (2000e6a8 <SDK_TRACE_Dump+0xa8>)
2000e652:	681b      	ldr	r3, [r3, #0]
2000e654:	689a      	ldr	r2, [r3, #8]
2000e656:	4b14      	ldr	r3, [pc, #80]	; (2000e6a8 <SDK_TRACE_Dump+0xa8>)
2000e658:	681b      	ldr	r3, [r3, #0]
2000e65a:	3202      	adds	r2, #2
2000e65c:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < size; i++)
2000e65e:	2300      	movs	r3, #0
2000e660:	60fb      	str	r3, [r7, #12]
2000e662:	e014      	b.n	2000e68e <SDK_TRACE_Dump+0x8e>
	{
		*(__IO uint8_t *)(Dump_Write_Address+TI->dumpbuf_size) = *(__IO uint8_t*)(addr + i);
2000e664:	68fa      	ldr	r2, [r7, #12]
2000e666:	687b      	ldr	r3, [r7, #4]
2000e668:	4413      	add	r3, r2
2000e66a:	4619      	mov	r1, r3
2000e66c:	4b0e      	ldr	r3, [pc, #56]	; (2000e6a8 <SDK_TRACE_Dump+0xa8>)
2000e66e:	681b      	ldr	r3, [r3, #0]
2000e670:	689a      	ldr	r2, [r3, #8]
2000e672:	4b0e      	ldr	r3, [pc, #56]	; (2000e6ac <SDK_TRACE_Dump+0xac>)
2000e674:	681b      	ldr	r3, [r3, #0]
2000e676:	4413      	add	r3, r2
2000e678:	780a      	ldrb	r2, [r1, #0]
2000e67a:	b2d2      	uxtb	r2, r2
2000e67c:	701a      	strb	r2, [r3, #0]
		TI->dumpbuf_size++;
2000e67e:	4b0a      	ldr	r3, [pc, #40]	; (2000e6a8 <SDK_TRACE_Dump+0xa8>)
2000e680:	681b      	ldr	r3, [r3, #0]
2000e682:	689a      	ldr	r2, [r3, #8]
2000e684:	3201      	adds	r2, #1
2000e686:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < size; i++)
2000e688:	68fb      	ldr	r3, [r7, #12]
2000e68a:	3301      	adds	r3, #1
2000e68c:	60fb      	str	r3, [r7, #12]
2000e68e:	887b      	ldrh	r3, [r7, #2]
2000e690:	68fa      	ldr	r2, [r7, #12]
2000e692:	429a      	cmp	r2, r3
2000e694:	dbe6      	blt.n	2000e664 <SDK_TRACE_Dump+0x64>
	}
}
2000e696:	bf00      	nop
2000e698:	bf00      	nop
2000e69a:	3714      	adds	r7, #20
2000e69c:	46bd      	mov	sp, r7
2000e69e:	bd90      	pop	{r4, r7, pc}
2000e6a0:	e0001004 	.word	0xe0001004
2000e6a4:	431bde83 	.word	0x431bde83
2000e6a8:	200100b8 	.word	0x200100b8
2000e6ac:	200100c8 	.word	0x200100c8

2000e6b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
2000e6b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 2000e6e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
2000e6b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
2000e6b6:	e003      	b.n	2000e6c0 <LoopCopyDataInit>

2000e6b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
2000e6b8:	4b0c      	ldr	r3, [pc, #48]	; (2000e6ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
2000e6ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
2000e6bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
2000e6be:	3104      	adds	r1, #4

2000e6c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
2000e6c0:	480b      	ldr	r0, [pc, #44]	; (2000e6f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
2000e6c2:	4b0c      	ldr	r3, [pc, #48]	; (2000e6f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
2000e6c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
2000e6c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
2000e6c8:	d3f6      	bcc.n	2000e6b8 <CopyDataInit>
  ldr  r2, =_sbss
2000e6ca:	4a0b      	ldr	r2, [pc, #44]	; (2000e6f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
2000e6cc:	e002      	b.n	2000e6d4 <LoopFillZerobss>

2000e6ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
2000e6ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
2000e6d0:	f842 3b04 	str.w	r3, [r2], #4

2000e6d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
2000e6d4:	4b09      	ldr	r3, [pc, #36]	; (2000e6fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
2000e6d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
2000e6d8:	d3f9      	bcc.n	2000e6ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
2000e6da:	f7ff fe69 	bl	2000e3b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
2000e6de:	f7fe fda1 	bl	2000d224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2000e6e2:	f7ff fce1 	bl	2000e0a8 <main>
  bx  lr    
2000e6e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
2000e6e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
2000e6ec:	20010050 	.word	0x20010050
  ldr  r0, =_sdata
2000e6f0:	20010050 	.word	0x20010050
  ldr  r3, =_edata
2000e6f4:	200100d4 	.word	0x200100d4
  ldr  r2, =_sbss
2000e6f8:	200100d4 	.word	0x200100d4
  ldr  r3, = _ebss
2000e6fc:	20010214 	.word	0x20010214

2000e700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
2000e700:	e7fe      	b.n	2000e700 <ADC_IRQHandler>
	...

2000e704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
2000e704:	b580      	push	{r7, lr}
2000e706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
2000e708:	4b0e      	ldr	r3, [pc, #56]	; (2000e744 <HAL_Init+0x40>)
2000e70a:	681b      	ldr	r3, [r3, #0]
2000e70c:	4a0d      	ldr	r2, [pc, #52]	; (2000e744 <HAL_Init+0x40>)
2000e70e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000e712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
2000e714:	4b0b      	ldr	r3, [pc, #44]	; (2000e744 <HAL_Init+0x40>)
2000e716:	681b      	ldr	r3, [r3, #0]
2000e718:	4a0a      	ldr	r2, [pc, #40]	; (2000e744 <HAL_Init+0x40>)
2000e71a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2000e71e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
2000e720:	4b08      	ldr	r3, [pc, #32]	; (2000e744 <HAL_Init+0x40>)
2000e722:	681b      	ldr	r3, [r3, #0]
2000e724:	4a07      	ldr	r2, [pc, #28]	; (2000e744 <HAL_Init+0x40>)
2000e726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000e72a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2000e72c:	2003      	movs	r0, #3
2000e72e:	f000 f931 	bl	2000e994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
2000e732:	2000      	movs	r0, #0
2000e734:	f000 f808 	bl	2000e748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
2000e738:	f7ff fdae 	bl	2000e298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
2000e73c:	2300      	movs	r3, #0
}
2000e73e:	4618      	mov	r0, r3
2000e740:	bd80      	pop	{r7, pc}
2000e742:	bf00      	nop
2000e744:	40023c00 	.word	0x40023c00

2000e748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
2000e748:	b580      	push	{r7, lr}
2000e74a:	b082      	sub	sp, #8
2000e74c:	af00      	add	r7, sp, #0
2000e74e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
2000e750:	4b12      	ldr	r3, [pc, #72]	; (2000e79c <HAL_InitTick+0x54>)
2000e752:	681a      	ldr	r2, [r3, #0]
2000e754:	4b12      	ldr	r3, [pc, #72]	; (2000e7a0 <HAL_InitTick+0x58>)
2000e756:	781b      	ldrb	r3, [r3, #0]
2000e758:	4619      	mov	r1, r3
2000e75a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
2000e75e:	fbb3 f3f1 	udiv	r3, r3, r1
2000e762:	fbb2 f3f3 	udiv	r3, r2, r3
2000e766:	4618      	mov	r0, r3
2000e768:	f000 f93b 	bl	2000e9e2 <HAL_SYSTICK_Config>
2000e76c:	4603      	mov	r3, r0
2000e76e:	2b00      	cmp	r3, #0
2000e770:	d001      	beq.n	2000e776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
2000e772:	2301      	movs	r3, #1
2000e774:	e00e      	b.n	2000e794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2000e776:	687b      	ldr	r3, [r7, #4]
2000e778:	2b0f      	cmp	r3, #15
2000e77a:	d80a      	bhi.n	2000e792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2000e77c:	2200      	movs	r2, #0
2000e77e:	6879      	ldr	r1, [r7, #4]
2000e780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000e784:	f000 f911 	bl	2000e9aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
2000e788:	4a06      	ldr	r2, [pc, #24]	; (2000e7a4 <HAL_InitTick+0x5c>)
2000e78a:	687b      	ldr	r3, [r7, #4]
2000e78c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2000e78e:	2300      	movs	r3, #0
2000e790:	e000      	b.n	2000e794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
2000e792:	2301      	movs	r3, #1
}
2000e794:	4618      	mov	r0, r3
2000e796:	3708      	adds	r7, #8
2000e798:	46bd      	mov	sp, r7
2000e79a:	bd80      	pop	{r7, pc}
2000e79c:	200100b4 	.word	0x200100b4
2000e7a0:	200100d0 	.word	0x200100d0
2000e7a4:	200100cc 	.word	0x200100cc

2000e7a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
2000e7a8:	b480      	push	{r7}
2000e7aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
2000e7ac:	4b06      	ldr	r3, [pc, #24]	; (2000e7c8 <HAL_IncTick+0x20>)
2000e7ae:	781b      	ldrb	r3, [r3, #0]
2000e7b0:	461a      	mov	r2, r3
2000e7b2:	4b06      	ldr	r3, [pc, #24]	; (2000e7cc <HAL_IncTick+0x24>)
2000e7b4:	681b      	ldr	r3, [r3, #0]
2000e7b6:	4413      	add	r3, r2
2000e7b8:	4a04      	ldr	r2, [pc, #16]	; (2000e7cc <HAL_IncTick+0x24>)
2000e7ba:	6013      	str	r3, [r2, #0]
}
2000e7bc:	bf00      	nop
2000e7be:	46bd      	mov	sp, r7
2000e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e7c4:	4770      	bx	lr
2000e7c6:	bf00      	nop
2000e7c8:	200100d0 	.word	0x200100d0
2000e7cc:	2001020c 	.word	0x2001020c

2000e7d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
2000e7d0:	b480      	push	{r7}
2000e7d2:	af00      	add	r7, sp, #0
  return uwTick;
2000e7d4:	4b03      	ldr	r3, [pc, #12]	; (2000e7e4 <HAL_GetTick+0x14>)
2000e7d6:	681b      	ldr	r3, [r3, #0]
}
2000e7d8:	4618      	mov	r0, r3
2000e7da:	46bd      	mov	sp, r7
2000e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e7e0:	4770      	bx	lr
2000e7e2:	bf00      	nop
2000e7e4:	2001020c 	.word	0x2001020c

2000e7e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
2000e7e8:	b580      	push	{r7, lr}
2000e7ea:	b084      	sub	sp, #16
2000e7ec:	af00      	add	r7, sp, #0
2000e7ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
2000e7f0:	f7ff ffee 	bl	2000e7d0 <HAL_GetTick>
2000e7f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
2000e7f6:	687b      	ldr	r3, [r7, #4]
2000e7f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
2000e7fa:	68fb      	ldr	r3, [r7, #12]
2000e7fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
2000e800:	d005      	beq.n	2000e80e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
2000e802:	4b0a      	ldr	r3, [pc, #40]	; (2000e82c <HAL_Delay+0x44>)
2000e804:	781b      	ldrb	r3, [r3, #0]
2000e806:	461a      	mov	r2, r3
2000e808:	68fb      	ldr	r3, [r7, #12]
2000e80a:	4413      	add	r3, r2
2000e80c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
2000e80e:	bf00      	nop
2000e810:	f7ff ffde 	bl	2000e7d0 <HAL_GetTick>
2000e814:	4602      	mov	r2, r0
2000e816:	68bb      	ldr	r3, [r7, #8]
2000e818:	1ad3      	subs	r3, r2, r3
2000e81a:	68fa      	ldr	r2, [r7, #12]
2000e81c:	429a      	cmp	r2, r3
2000e81e:	d8f7      	bhi.n	2000e810 <HAL_Delay+0x28>
  {
  }
}
2000e820:	bf00      	nop
2000e822:	bf00      	nop
2000e824:	3710      	adds	r7, #16
2000e826:	46bd      	mov	sp, r7
2000e828:	bd80      	pop	{r7, pc}
2000e82a:	bf00      	nop
2000e82c:	200100d0 	.word	0x200100d0

2000e830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000e830:	b480      	push	{r7}
2000e832:	b085      	sub	sp, #20
2000e834:	af00      	add	r7, sp, #0
2000e836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
2000e838:	687b      	ldr	r3, [r7, #4]
2000e83a:	f003 0307 	and.w	r3, r3, #7
2000e83e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
2000e840:	4b0c      	ldr	r3, [pc, #48]	; (2000e874 <__NVIC_SetPriorityGrouping+0x44>)
2000e842:	68db      	ldr	r3, [r3, #12]
2000e844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000e846:	68ba      	ldr	r2, [r7, #8]
2000e848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
2000e84c:	4013      	ands	r3, r2
2000e84e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
2000e850:	68fb      	ldr	r3, [r7, #12]
2000e852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2000e854:	68bb      	ldr	r3, [r7, #8]
2000e856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
2000e858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
2000e85c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2000e860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000e862:	4a04      	ldr	r2, [pc, #16]	; (2000e874 <__NVIC_SetPriorityGrouping+0x44>)
2000e864:	68bb      	ldr	r3, [r7, #8]
2000e866:	60d3      	str	r3, [r2, #12]
}
2000e868:	bf00      	nop
2000e86a:	3714      	adds	r7, #20
2000e86c:	46bd      	mov	sp, r7
2000e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e872:	4770      	bx	lr
2000e874:	e000ed00 	.word	0xe000ed00

2000e878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
2000e878:	b480      	push	{r7}
2000e87a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
2000e87c:	4b04      	ldr	r3, [pc, #16]	; (2000e890 <__NVIC_GetPriorityGrouping+0x18>)
2000e87e:	68db      	ldr	r3, [r3, #12]
2000e880:	0a1b      	lsrs	r3, r3, #8
2000e882:	f003 0307 	and.w	r3, r3, #7
}
2000e886:	4618      	mov	r0, r3
2000e888:	46bd      	mov	sp, r7
2000e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e88e:	4770      	bx	lr
2000e890:	e000ed00 	.word	0xe000ed00

2000e894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
2000e894:	b480      	push	{r7}
2000e896:	b083      	sub	sp, #12
2000e898:	af00      	add	r7, sp, #0
2000e89a:	4603      	mov	r3, r0
2000e89c:	6039      	str	r1, [r7, #0]
2000e89e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000e8a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000e8a4:	2b00      	cmp	r3, #0
2000e8a6:	db0a      	blt.n	2000e8be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000e8a8:	683b      	ldr	r3, [r7, #0]
2000e8aa:	b2da      	uxtb	r2, r3
2000e8ac:	490c      	ldr	r1, [pc, #48]	; (2000e8e0 <__NVIC_SetPriority+0x4c>)
2000e8ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000e8b2:	0112      	lsls	r2, r2, #4
2000e8b4:	b2d2      	uxtb	r2, r2
2000e8b6:	440b      	add	r3, r1
2000e8b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
2000e8bc:	e00a      	b.n	2000e8d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000e8be:	683b      	ldr	r3, [r7, #0]
2000e8c0:	b2da      	uxtb	r2, r3
2000e8c2:	4908      	ldr	r1, [pc, #32]	; (2000e8e4 <__NVIC_SetPriority+0x50>)
2000e8c4:	79fb      	ldrb	r3, [r7, #7]
2000e8c6:	f003 030f 	and.w	r3, r3, #15
2000e8ca:	3b04      	subs	r3, #4
2000e8cc:	0112      	lsls	r2, r2, #4
2000e8ce:	b2d2      	uxtb	r2, r2
2000e8d0:	440b      	add	r3, r1
2000e8d2:	761a      	strb	r2, [r3, #24]
}
2000e8d4:	bf00      	nop
2000e8d6:	370c      	adds	r7, #12
2000e8d8:	46bd      	mov	sp, r7
2000e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e8de:	4770      	bx	lr
2000e8e0:	e000e100 	.word	0xe000e100
2000e8e4:	e000ed00 	.word	0xe000ed00

2000e8e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2000e8e8:	b480      	push	{r7}
2000e8ea:	b089      	sub	sp, #36	; 0x24
2000e8ec:	af00      	add	r7, sp, #0
2000e8ee:	60f8      	str	r0, [r7, #12]
2000e8f0:	60b9      	str	r1, [r7, #8]
2000e8f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
2000e8f4:	68fb      	ldr	r3, [r7, #12]
2000e8f6:	f003 0307 	and.w	r3, r3, #7
2000e8fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2000e8fc:	69fb      	ldr	r3, [r7, #28]
2000e8fe:	f1c3 0307 	rsb	r3, r3, #7
2000e902:	2b04      	cmp	r3, #4
2000e904:	bf28      	it	cs
2000e906:	2304      	movcs	r3, #4
2000e908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000e90a:	69fb      	ldr	r3, [r7, #28]
2000e90c:	3304      	adds	r3, #4
2000e90e:	2b06      	cmp	r3, #6
2000e910:	d902      	bls.n	2000e918 <NVIC_EncodePriority+0x30>
2000e912:	69fb      	ldr	r3, [r7, #28]
2000e914:	3b03      	subs	r3, #3
2000e916:	e000      	b.n	2000e91a <NVIC_EncodePriority+0x32>
2000e918:	2300      	movs	r3, #0
2000e91a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000e91c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2000e920:	69bb      	ldr	r3, [r7, #24]
2000e922:	fa02 f303 	lsl.w	r3, r2, r3
2000e926:	43da      	mvns	r2, r3
2000e928:	68bb      	ldr	r3, [r7, #8]
2000e92a:	401a      	ands	r2, r3
2000e92c:	697b      	ldr	r3, [r7, #20]
2000e92e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2000e930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
2000e934:	697b      	ldr	r3, [r7, #20]
2000e936:	fa01 f303 	lsl.w	r3, r1, r3
2000e93a:	43d9      	mvns	r1, r3
2000e93c:	687b      	ldr	r3, [r7, #4]
2000e93e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000e940:	4313      	orrs	r3, r2
         );
}
2000e942:	4618      	mov	r0, r3
2000e944:	3724      	adds	r7, #36	; 0x24
2000e946:	46bd      	mov	sp, r7
2000e948:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e94c:	4770      	bx	lr
	...

2000e950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
2000e950:	b580      	push	{r7, lr}
2000e952:	b082      	sub	sp, #8
2000e954:	af00      	add	r7, sp, #0
2000e956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
2000e958:	687b      	ldr	r3, [r7, #4]
2000e95a:	3b01      	subs	r3, #1
2000e95c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2000e960:	d301      	bcc.n	2000e966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
2000e962:	2301      	movs	r3, #1
2000e964:	e00f      	b.n	2000e986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000e966:	4a0a      	ldr	r2, [pc, #40]	; (2000e990 <SysTick_Config+0x40>)
2000e968:	687b      	ldr	r3, [r7, #4]
2000e96a:	3b01      	subs	r3, #1
2000e96c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000e96e:	210f      	movs	r1, #15
2000e970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000e974:	f7ff ff8e 	bl	2000e894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000e978:	4b05      	ldr	r3, [pc, #20]	; (2000e990 <SysTick_Config+0x40>)
2000e97a:	2200      	movs	r2, #0
2000e97c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2000e97e:	4b04      	ldr	r3, [pc, #16]	; (2000e990 <SysTick_Config+0x40>)
2000e980:	2207      	movs	r2, #7
2000e982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
2000e984:	2300      	movs	r3, #0
}
2000e986:	4618      	mov	r0, r3
2000e988:	3708      	adds	r7, #8
2000e98a:	46bd      	mov	sp, r7
2000e98c:	bd80      	pop	{r7, pc}
2000e98e:	bf00      	nop
2000e990:	e000e010 	.word	0xe000e010

2000e994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000e994:	b580      	push	{r7, lr}
2000e996:	b082      	sub	sp, #8
2000e998:	af00      	add	r7, sp, #0
2000e99a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
2000e99c:	6878      	ldr	r0, [r7, #4]
2000e99e:	f7ff ff47 	bl	2000e830 <__NVIC_SetPriorityGrouping>
}
2000e9a2:	bf00      	nop
2000e9a4:	3708      	adds	r7, #8
2000e9a6:	46bd      	mov	sp, r7
2000e9a8:	bd80      	pop	{r7, pc}

2000e9aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
2000e9aa:	b580      	push	{r7, lr}
2000e9ac:	b086      	sub	sp, #24
2000e9ae:	af00      	add	r7, sp, #0
2000e9b0:	4603      	mov	r3, r0
2000e9b2:	60b9      	str	r1, [r7, #8]
2000e9b4:	607a      	str	r2, [r7, #4]
2000e9b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
2000e9b8:	2300      	movs	r3, #0
2000e9ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
2000e9bc:	f7ff ff5c 	bl	2000e878 <__NVIC_GetPriorityGrouping>
2000e9c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2000e9c2:	687a      	ldr	r2, [r7, #4]
2000e9c4:	68b9      	ldr	r1, [r7, #8]
2000e9c6:	6978      	ldr	r0, [r7, #20]
2000e9c8:	f7ff ff8e 	bl	2000e8e8 <NVIC_EncodePriority>
2000e9cc:	4602      	mov	r2, r0
2000e9ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000e9d2:	4611      	mov	r1, r2
2000e9d4:	4618      	mov	r0, r3
2000e9d6:	f7ff ff5d 	bl	2000e894 <__NVIC_SetPriority>
}
2000e9da:	bf00      	nop
2000e9dc:	3718      	adds	r7, #24
2000e9de:	46bd      	mov	sp, r7
2000e9e0:	bd80      	pop	{r7, pc}

2000e9e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000e9e2:	b580      	push	{r7, lr}
2000e9e4:	b082      	sub	sp, #8
2000e9e6:	af00      	add	r7, sp, #0
2000e9e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2000e9ea:	6878      	ldr	r0, [r7, #4]
2000e9ec:	f7ff ffb0 	bl	2000e950 <SysTick_Config>
2000e9f0:	4603      	mov	r3, r0
}
2000e9f2:	4618      	mov	r0, r3
2000e9f4:	3708      	adds	r7, #8
2000e9f6:	46bd      	mov	sp, r7
2000e9f8:	bd80      	pop	{r7, pc}
	...

2000e9fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2000e9fc:	b480      	push	{r7}
2000e9fe:	b089      	sub	sp, #36	; 0x24
2000ea00:	af00      	add	r7, sp, #0
2000ea02:	6078      	str	r0, [r7, #4]
2000ea04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
2000ea06:	2300      	movs	r3, #0
2000ea08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
2000ea0a:	2300      	movs	r3, #0
2000ea0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
2000ea0e:	2300      	movs	r3, #0
2000ea10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
2000ea12:	2300      	movs	r3, #0
2000ea14:	61fb      	str	r3, [r7, #28]
2000ea16:	e16b      	b.n	2000ecf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
2000ea18:	2201      	movs	r2, #1
2000ea1a:	69fb      	ldr	r3, [r7, #28]
2000ea1c:	fa02 f303 	lsl.w	r3, r2, r3
2000ea20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
2000ea22:	683b      	ldr	r3, [r7, #0]
2000ea24:	681b      	ldr	r3, [r3, #0]
2000ea26:	697a      	ldr	r2, [r7, #20]
2000ea28:	4013      	ands	r3, r2
2000ea2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
2000ea2c:	693a      	ldr	r2, [r7, #16]
2000ea2e:	697b      	ldr	r3, [r7, #20]
2000ea30:	429a      	cmp	r2, r3
2000ea32:	f040 815a 	bne.w	2000ecea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000ea36:	683b      	ldr	r3, [r7, #0]
2000ea38:	685b      	ldr	r3, [r3, #4]
2000ea3a:	2b01      	cmp	r3, #1
2000ea3c:	d00b      	beq.n	2000ea56 <HAL_GPIO_Init+0x5a>
2000ea3e:	683b      	ldr	r3, [r7, #0]
2000ea40:	685b      	ldr	r3, [r3, #4]
2000ea42:	2b02      	cmp	r3, #2
2000ea44:	d007      	beq.n	2000ea56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000ea46:	683b      	ldr	r3, [r7, #0]
2000ea48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000ea4a:	2b11      	cmp	r3, #17
2000ea4c:	d003      	beq.n	2000ea56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000ea4e:	683b      	ldr	r3, [r7, #0]
2000ea50:	685b      	ldr	r3, [r3, #4]
2000ea52:	2b12      	cmp	r3, #18
2000ea54:	d130      	bne.n	2000eab8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
2000ea56:	687b      	ldr	r3, [r7, #4]
2000ea58:	689b      	ldr	r3, [r3, #8]
2000ea5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
2000ea5c:	69fb      	ldr	r3, [r7, #28]
2000ea5e:	005b      	lsls	r3, r3, #1
2000ea60:	2203      	movs	r2, #3
2000ea62:	fa02 f303 	lsl.w	r3, r2, r3
2000ea66:	43db      	mvns	r3, r3
2000ea68:	69ba      	ldr	r2, [r7, #24]
2000ea6a:	4013      	ands	r3, r2
2000ea6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2000ea6e:	683b      	ldr	r3, [r7, #0]
2000ea70:	68da      	ldr	r2, [r3, #12]
2000ea72:	69fb      	ldr	r3, [r7, #28]
2000ea74:	005b      	lsls	r3, r3, #1
2000ea76:	fa02 f303 	lsl.w	r3, r2, r3
2000ea7a:	69ba      	ldr	r2, [r7, #24]
2000ea7c:	4313      	orrs	r3, r2
2000ea7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
2000ea80:	687b      	ldr	r3, [r7, #4]
2000ea82:	69ba      	ldr	r2, [r7, #24]
2000ea84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2000ea86:	687b      	ldr	r3, [r7, #4]
2000ea88:	685b      	ldr	r3, [r3, #4]
2000ea8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
2000ea8c:	2201      	movs	r2, #1
2000ea8e:	69fb      	ldr	r3, [r7, #28]
2000ea90:	fa02 f303 	lsl.w	r3, r2, r3
2000ea94:	43db      	mvns	r3, r3
2000ea96:	69ba      	ldr	r2, [r7, #24]
2000ea98:	4013      	ands	r3, r2
2000ea9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
2000ea9c:	683b      	ldr	r3, [r7, #0]
2000ea9e:	685b      	ldr	r3, [r3, #4]
2000eaa0:	091b      	lsrs	r3, r3, #4
2000eaa2:	f003 0201 	and.w	r2, r3, #1
2000eaa6:	69fb      	ldr	r3, [r7, #28]
2000eaa8:	fa02 f303 	lsl.w	r3, r2, r3
2000eaac:	69ba      	ldr	r2, [r7, #24]
2000eaae:	4313      	orrs	r3, r2
2000eab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2000eab2:	687b      	ldr	r3, [r7, #4]
2000eab4:	69ba      	ldr	r2, [r7, #24]
2000eab6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
2000eab8:	687b      	ldr	r3, [r7, #4]
2000eaba:	68db      	ldr	r3, [r3, #12]
2000eabc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2000eabe:	69fb      	ldr	r3, [r7, #28]
2000eac0:	005b      	lsls	r3, r3, #1
2000eac2:	2203      	movs	r2, #3
2000eac4:	fa02 f303 	lsl.w	r3, r2, r3
2000eac8:	43db      	mvns	r3, r3
2000eaca:	69ba      	ldr	r2, [r7, #24]
2000eacc:	4013      	ands	r3, r2
2000eace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2000ead0:	683b      	ldr	r3, [r7, #0]
2000ead2:	689a      	ldr	r2, [r3, #8]
2000ead4:	69fb      	ldr	r3, [r7, #28]
2000ead6:	005b      	lsls	r3, r3, #1
2000ead8:	fa02 f303 	lsl.w	r3, r2, r3
2000eadc:	69ba      	ldr	r2, [r7, #24]
2000eade:	4313      	orrs	r3, r2
2000eae0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
2000eae2:	687b      	ldr	r3, [r7, #4]
2000eae4:	69ba      	ldr	r2, [r7, #24]
2000eae6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000eae8:	683b      	ldr	r3, [r7, #0]
2000eaea:	685b      	ldr	r3, [r3, #4]
2000eaec:	2b02      	cmp	r3, #2
2000eaee:	d003      	beq.n	2000eaf8 <HAL_GPIO_Init+0xfc>
2000eaf0:	683b      	ldr	r3, [r7, #0]
2000eaf2:	685b      	ldr	r3, [r3, #4]
2000eaf4:	2b12      	cmp	r3, #18
2000eaf6:	d123      	bne.n	2000eb40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2000eaf8:	69fb      	ldr	r3, [r7, #28]
2000eafa:	08da      	lsrs	r2, r3, #3
2000eafc:	687b      	ldr	r3, [r7, #4]
2000eafe:	3208      	adds	r2, #8
2000eb00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000eb04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
2000eb06:	69fb      	ldr	r3, [r7, #28]
2000eb08:	f003 0307 	and.w	r3, r3, #7
2000eb0c:	009b      	lsls	r3, r3, #2
2000eb0e:	220f      	movs	r2, #15
2000eb10:	fa02 f303 	lsl.w	r3, r2, r3
2000eb14:	43db      	mvns	r3, r3
2000eb16:	69ba      	ldr	r2, [r7, #24]
2000eb18:	4013      	ands	r3, r2
2000eb1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
2000eb1c:	683b      	ldr	r3, [r7, #0]
2000eb1e:	691a      	ldr	r2, [r3, #16]
2000eb20:	69fb      	ldr	r3, [r7, #28]
2000eb22:	f003 0307 	and.w	r3, r3, #7
2000eb26:	009b      	lsls	r3, r3, #2
2000eb28:	fa02 f303 	lsl.w	r3, r2, r3
2000eb2c:	69ba      	ldr	r2, [r7, #24]
2000eb2e:	4313      	orrs	r3, r2
2000eb30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
2000eb32:	69fb      	ldr	r3, [r7, #28]
2000eb34:	08da      	lsrs	r2, r3, #3
2000eb36:	687b      	ldr	r3, [r7, #4]
2000eb38:	3208      	adds	r2, #8
2000eb3a:	69b9      	ldr	r1, [r7, #24]
2000eb3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2000eb40:	687b      	ldr	r3, [r7, #4]
2000eb42:	681b      	ldr	r3, [r3, #0]
2000eb44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
2000eb46:	69fb      	ldr	r3, [r7, #28]
2000eb48:	005b      	lsls	r3, r3, #1
2000eb4a:	2203      	movs	r2, #3
2000eb4c:	fa02 f303 	lsl.w	r3, r2, r3
2000eb50:	43db      	mvns	r3, r3
2000eb52:	69ba      	ldr	r2, [r7, #24]
2000eb54:	4013      	ands	r3, r2
2000eb56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2000eb58:	683b      	ldr	r3, [r7, #0]
2000eb5a:	685b      	ldr	r3, [r3, #4]
2000eb5c:	f003 0203 	and.w	r2, r3, #3
2000eb60:	69fb      	ldr	r3, [r7, #28]
2000eb62:	005b      	lsls	r3, r3, #1
2000eb64:	fa02 f303 	lsl.w	r3, r2, r3
2000eb68:	69ba      	ldr	r2, [r7, #24]
2000eb6a:	4313      	orrs	r3, r2
2000eb6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2000eb6e:	687b      	ldr	r3, [r7, #4]
2000eb70:	69ba      	ldr	r2, [r7, #24]
2000eb72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
2000eb74:	683b      	ldr	r3, [r7, #0]
2000eb76:	685b      	ldr	r3, [r3, #4]
2000eb78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000eb7c:	2b00      	cmp	r3, #0
2000eb7e:	f000 80b4 	beq.w	2000ecea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2000eb82:	2300      	movs	r3, #0
2000eb84:	60fb      	str	r3, [r7, #12]
2000eb86:	4b60      	ldr	r3, [pc, #384]	; (2000ed08 <HAL_GPIO_Init+0x30c>)
2000eb88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000eb8a:	4a5f      	ldr	r2, [pc, #380]	; (2000ed08 <HAL_GPIO_Init+0x30c>)
2000eb8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000eb90:	6453      	str	r3, [r2, #68]	; 0x44
2000eb92:	4b5d      	ldr	r3, [pc, #372]	; (2000ed08 <HAL_GPIO_Init+0x30c>)
2000eb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000eb96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000eb9a:	60fb      	str	r3, [r7, #12]
2000eb9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2000eb9e:	4a5b      	ldr	r2, [pc, #364]	; (2000ed0c <HAL_GPIO_Init+0x310>)
2000eba0:	69fb      	ldr	r3, [r7, #28]
2000eba2:	089b      	lsrs	r3, r3, #2
2000eba4:	3302      	adds	r3, #2
2000eba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2000ebaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
2000ebac:	69fb      	ldr	r3, [r7, #28]
2000ebae:	f003 0303 	and.w	r3, r3, #3
2000ebb2:	009b      	lsls	r3, r3, #2
2000ebb4:	220f      	movs	r2, #15
2000ebb6:	fa02 f303 	lsl.w	r3, r2, r3
2000ebba:	43db      	mvns	r3, r3
2000ebbc:	69ba      	ldr	r2, [r7, #24]
2000ebbe:	4013      	ands	r3, r2
2000ebc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
2000ebc2:	687b      	ldr	r3, [r7, #4]
2000ebc4:	4a52      	ldr	r2, [pc, #328]	; (2000ed10 <HAL_GPIO_Init+0x314>)
2000ebc6:	4293      	cmp	r3, r2
2000ebc8:	d02b      	beq.n	2000ec22 <HAL_GPIO_Init+0x226>
2000ebca:	687b      	ldr	r3, [r7, #4]
2000ebcc:	4a51      	ldr	r2, [pc, #324]	; (2000ed14 <HAL_GPIO_Init+0x318>)
2000ebce:	4293      	cmp	r3, r2
2000ebd0:	d025      	beq.n	2000ec1e <HAL_GPIO_Init+0x222>
2000ebd2:	687b      	ldr	r3, [r7, #4]
2000ebd4:	4a50      	ldr	r2, [pc, #320]	; (2000ed18 <HAL_GPIO_Init+0x31c>)
2000ebd6:	4293      	cmp	r3, r2
2000ebd8:	d01f      	beq.n	2000ec1a <HAL_GPIO_Init+0x21e>
2000ebda:	687b      	ldr	r3, [r7, #4]
2000ebdc:	4a4f      	ldr	r2, [pc, #316]	; (2000ed1c <HAL_GPIO_Init+0x320>)
2000ebde:	4293      	cmp	r3, r2
2000ebe0:	d019      	beq.n	2000ec16 <HAL_GPIO_Init+0x21a>
2000ebe2:	687b      	ldr	r3, [r7, #4]
2000ebe4:	4a4e      	ldr	r2, [pc, #312]	; (2000ed20 <HAL_GPIO_Init+0x324>)
2000ebe6:	4293      	cmp	r3, r2
2000ebe8:	d013      	beq.n	2000ec12 <HAL_GPIO_Init+0x216>
2000ebea:	687b      	ldr	r3, [r7, #4]
2000ebec:	4a4d      	ldr	r2, [pc, #308]	; (2000ed24 <HAL_GPIO_Init+0x328>)
2000ebee:	4293      	cmp	r3, r2
2000ebf0:	d00d      	beq.n	2000ec0e <HAL_GPIO_Init+0x212>
2000ebf2:	687b      	ldr	r3, [r7, #4]
2000ebf4:	4a4c      	ldr	r2, [pc, #304]	; (2000ed28 <HAL_GPIO_Init+0x32c>)
2000ebf6:	4293      	cmp	r3, r2
2000ebf8:	d007      	beq.n	2000ec0a <HAL_GPIO_Init+0x20e>
2000ebfa:	687b      	ldr	r3, [r7, #4]
2000ebfc:	4a4b      	ldr	r2, [pc, #300]	; (2000ed2c <HAL_GPIO_Init+0x330>)
2000ebfe:	4293      	cmp	r3, r2
2000ec00:	d101      	bne.n	2000ec06 <HAL_GPIO_Init+0x20a>
2000ec02:	2307      	movs	r3, #7
2000ec04:	e00e      	b.n	2000ec24 <HAL_GPIO_Init+0x228>
2000ec06:	2308      	movs	r3, #8
2000ec08:	e00c      	b.n	2000ec24 <HAL_GPIO_Init+0x228>
2000ec0a:	2306      	movs	r3, #6
2000ec0c:	e00a      	b.n	2000ec24 <HAL_GPIO_Init+0x228>
2000ec0e:	2305      	movs	r3, #5
2000ec10:	e008      	b.n	2000ec24 <HAL_GPIO_Init+0x228>
2000ec12:	2304      	movs	r3, #4
2000ec14:	e006      	b.n	2000ec24 <HAL_GPIO_Init+0x228>
2000ec16:	2303      	movs	r3, #3
2000ec18:	e004      	b.n	2000ec24 <HAL_GPIO_Init+0x228>
2000ec1a:	2302      	movs	r3, #2
2000ec1c:	e002      	b.n	2000ec24 <HAL_GPIO_Init+0x228>
2000ec1e:	2301      	movs	r3, #1
2000ec20:	e000      	b.n	2000ec24 <HAL_GPIO_Init+0x228>
2000ec22:	2300      	movs	r3, #0
2000ec24:	69fa      	ldr	r2, [r7, #28]
2000ec26:	f002 0203 	and.w	r2, r2, #3
2000ec2a:	0092      	lsls	r2, r2, #2
2000ec2c:	4093      	lsls	r3, r2
2000ec2e:	69ba      	ldr	r2, [r7, #24]
2000ec30:	4313      	orrs	r3, r2
2000ec32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
2000ec34:	4935      	ldr	r1, [pc, #212]	; (2000ed0c <HAL_GPIO_Init+0x310>)
2000ec36:	69fb      	ldr	r3, [r7, #28]
2000ec38:	089b      	lsrs	r3, r3, #2
2000ec3a:	3302      	adds	r3, #2
2000ec3c:	69ba      	ldr	r2, [r7, #24]
2000ec3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
2000ec42:	4b3b      	ldr	r3, [pc, #236]	; (2000ed30 <HAL_GPIO_Init+0x334>)
2000ec44:	681b      	ldr	r3, [r3, #0]
2000ec46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000ec48:	693b      	ldr	r3, [r7, #16]
2000ec4a:	43db      	mvns	r3, r3
2000ec4c:	69ba      	ldr	r2, [r7, #24]
2000ec4e:	4013      	ands	r3, r2
2000ec50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
2000ec52:	683b      	ldr	r3, [r7, #0]
2000ec54:	685b      	ldr	r3, [r3, #4]
2000ec56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000ec5a:	2b00      	cmp	r3, #0
2000ec5c:	d003      	beq.n	2000ec66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
2000ec5e:	69ba      	ldr	r2, [r7, #24]
2000ec60:	693b      	ldr	r3, [r7, #16]
2000ec62:	4313      	orrs	r3, r2
2000ec64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
2000ec66:	4a32      	ldr	r2, [pc, #200]	; (2000ed30 <HAL_GPIO_Init+0x334>)
2000ec68:	69bb      	ldr	r3, [r7, #24]
2000ec6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
2000ec6c:	4b30      	ldr	r3, [pc, #192]	; (2000ed30 <HAL_GPIO_Init+0x334>)
2000ec6e:	685b      	ldr	r3, [r3, #4]
2000ec70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000ec72:	693b      	ldr	r3, [r7, #16]
2000ec74:	43db      	mvns	r3, r3
2000ec76:	69ba      	ldr	r2, [r7, #24]
2000ec78:	4013      	ands	r3, r2
2000ec7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
2000ec7c:	683b      	ldr	r3, [r7, #0]
2000ec7e:	685b      	ldr	r3, [r3, #4]
2000ec80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ec84:	2b00      	cmp	r3, #0
2000ec86:	d003      	beq.n	2000ec90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
2000ec88:	69ba      	ldr	r2, [r7, #24]
2000ec8a:	693b      	ldr	r3, [r7, #16]
2000ec8c:	4313      	orrs	r3, r2
2000ec8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
2000ec90:	4a27      	ldr	r2, [pc, #156]	; (2000ed30 <HAL_GPIO_Init+0x334>)
2000ec92:	69bb      	ldr	r3, [r7, #24]
2000ec94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
2000ec96:	4b26      	ldr	r3, [pc, #152]	; (2000ed30 <HAL_GPIO_Init+0x334>)
2000ec98:	689b      	ldr	r3, [r3, #8]
2000ec9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000ec9c:	693b      	ldr	r3, [r7, #16]
2000ec9e:	43db      	mvns	r3, r3
2000eca0:	69ba      	ldr	r2, [r7, #24]
2000eca2:	4013      	ands	r3, r2
2000eca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
2000eca6:	683b      	ldr	r3, [r7, #0]
2000eca8:	685b      	ldr	r3, [r3, #4]
2000ecaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2000ecae:	2b00      	cmp	r3, #0
2000ecb0:	d003      	beq.n	2000ecba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
2000ecb2:	69ba      	ldr	r2, [r7, #24]
2000ecb4:	693b      	ldr	r3, [r7, #16]
2000ecb6:	4313      	orrs	r3, r2
2000ecb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
2000ecba:	4a1d      	ldr	r2, [pc, #116]	; (2000ed30 <HAL_GPIO_Init+0x334>)
2000ecbc:	69bb      	ldr	r3, [r7, #24]
2000ecbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
2000ecc0:	4b1b      	ldr	r3, [pc, #108]	; (2000ed30 <HAL_GPIO_Init+0x334>)
2000ecc2:	68db      	ldr	r3, [r3, #12]
2000ecc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000ecc6:	693b      	ldr	r3, [r7, #16]
2000ecc8:	43db      	mvns	r3, r3
2000ecca:	69ba      	ldr	r2, [r7, #24]
2000eccc:	4013      	ands	r3, r2
2000ecce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
2000ecd0:	683b      	ldr	r3, [r7, #0]
2000ecd2:	685b      	ldr	r3, [r3, #4]
2000ecd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2000ecd8:	2b00      	cmp	r3, #0
2000ecda:	d003      	beq.n	2000ece4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
2000ecdc:	69ba      	ldr	r2, [r7, #24]
2000ecde:	693b      	ldr	r3, [r7, #16]
2000ece0:	4313      	orrs	r3, r2
2000ece2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
2000ece4:	4a12      	ldr	r2, [pc, #72]	; (2000ed30 <HAL_GPIO_Init+0x334>)
2000ece6:	69bb      	ldr	r3, [r7, #24]
2000ece8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
2000ecea:	69fb      	ldr	r3, [r7, #28]
2000ecec:	3301      	adds	r3, #1
2000ecee:	61fb      	str	r3, [r7, #28]
2000ecf0:	69fb      	ldr	r3, [r7, #28]
2000ecf2:	2b0f      	cmp	r3, #15
2000ecf4:	f67f ae90 	bls.w	2000ea18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
2000ecf8:	bf00      	nop
2000ecfa:	bf00      	nop
2000ecfc:	3724      	adds	r7, #36	; 0x24
2000ecfe:	46bd      	mov	sp, r7
2000ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ed04:	4770      	bx	lr
2000ed06:	bf00      	nop
2000ed08:	40023800 	.word	0x40023800
2000ed0c:	40013800 	.word	0x40013800
2000ed10:	40020000 	.word	0x40020000
2000ed14:	40020400 	.word	0x40020400
2000ed18:	40020800 	.word	0x40020800
2000ed1c:	40020c00 	.word	0x40020c00
2000ed20:	40021000 	.word	0x40021000
2000ed24:	40021400 	.word	0x40021400
2000ed28:	40021800 	.word	0x40021800
2000ed2c:	40021c00 	.word	0x40021c00
2000ed30:	40013c00 	.word	0x40013c00

2000ed34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000ed34:	b480      	push	{r7}
2000ed36:	b085      	sub	sp, #20
2000ed38:	af00      	add	r7, sp, #0
2000ed3a:	6078      	str	r0, [r7, #4]
2000ed3c:	460b      	mov	r3, r1
2000ed3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
2000ed40:	687b      	ldr	r3, [r7, #4]
2000ed42:	691a      	ldr	r2, [r3, #16]
2000ed44:	887b      	ldrh	r3, [r7, #2]
2000ed46:	4013      	ands	r3, r2
2000ed48:	2b00      	cmp	r3, #0
2000ed4a:	d002      	beq.n	2000ed52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
2000ed4c:	2301      	movs	r3, #1
2000ed4e:	73fb      	strb	r3, [r7, #15]
2000ed50:	e001      	b.n	2000ed56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
2000ed52:	2300      	movs	r3, #0
2000ed54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
2000ed56:	7bfb      	ldrb	r3, [r7, #15]
}
2000ed58:	4618      	mov	r0, r3
2000ed5a:	3714      	adds	r7, #20
2000ed5c:	46bd      	mov	sp, r7
2000ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ed62:	4770      	bx	lr

2000ed64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2000ed64:	b480      	push	{r7}
2000ed66:	b083      	sub	sp, #12
2000ed68:	af00      	add	r7, sp, #0
2000ed6a:	6078      	str	r0, [r7, #4]
2000ed6c:	460b      	mov	r3, r1
2000ed6e:	807b      	strh	r3, [r7, #2]
2000ed70:	4613      	mov	r3, r2
2000ed72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
2000ed74:	787b      	ldrb	r3, [r7, #1]
2000ed76:	2b00      	cmp	r3, #0
2000ed78:	d003      	beq.n	2000ed82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2000ed7a:	887a      	ldrh	r2, [r7, #2]
2000ed7c:	687b      	ldr	r3, [r7, #4]
2000ed7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
2000ed80:	e003      	b.n	2000ed8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
2000ed82:	887b      	ldrh	r3, [r7, #2]
2000ed84:	041a      	lsls	r2, r3, #16
2000ed86:	687b      	ldr	r3, [r7, #4]
2000ed88:	619a      	str	r2, [r3, #24]
}
2000ed8a:	bf00      	nop
2000ed8c:	370c      	adds	r7, #12
2000ed8e:	46bd      	mov	sp, r7
2000ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ed94:	4770      	bx	lr

2000ed96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000ed96:	b480      	push	{r7}
2000ed98:	b083      	sub	sp, #12
2000ed9a:	af00      	add	r7, sp, #0
2000ed9c:	6078      	str	r0, [r7, #4]
2000ed9e:	460b      	mov	r3, r1
2000eda0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
2000eda2:	687b      	ldr	r3, [r7, #4]
2000eda4:	695a      	ldr	r2, [r3, #20]
2000eda6:	887b      	ldrh	r3, [r7, #2]
2000eda8:	401a      	ands	r2, r3
2000edaa:	887b      	ldrh	r3, [r7, #2]
2000edac:	429a      	cmp	r2, r3
2000edae:	d104      	bne.n	2000edba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
2000edb0:	887b      	ldrh	r3, [r7, #2]
2000edb2:	041a      	lsls	r2, r3, #16
2000edb4:	687b      	ldr	r3, [r7, #4]
2000edb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
2000edb8:	e002      	b.n	2000edc0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
2000edba:	887a      	ldrh	r2, [r7, #2]
2000edbc:	687b      	ldr	r3, [r7, #4]
2000edbe:	619a      	str	r2, [r3, #24]
}
2000edc0:	bf00      	nop
2000edc2:	370c      	adds	r7, #12
2000edc4:	46bd      	mov	sp, r7
2000edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000edca:	4770      	bx	lr

2000edcc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
2000edcc:	b580      	push	{r7, lr}
2000edce:	b084      	sub	sp, #16
2000edd0:	af00      	add	r7, sp, #0
2000edd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
2000edd4:	687b      	ldr	r3, [r7, #4]
2000edd6:	2b00      	cmp	r3, #0
2000edd8:	d101      	bne.n	2000edde <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
2000edda:	2301      	movs	r3, #1
2000eddc:	e02b      	b.n	2000ee36 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
2000edde:	687b      	ldr	r3, [r7, #4]
2000ede0:	681b      	ldr	r3, [r3, #0]
2000ede2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
2000ede6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
2000ede8:	687b      	ldr	r3, [r7, #4]
2000edea:	681b      	ldr	r3, [r3, #0]
2000edec:	f245 5255 	movw	r2, #21845	; 0x5555
2000edf0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
2000edf2:	687b      	ldr	r3, [r7, #4]
2000edf4:	681b      	ldr	r3, [r3, #0]
2000edf6:	687a      	ldr	r2, [r7, #4]
2000edf8:	6852      	ldr	r2, [r2, #4]
2000edfa:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
2000edfc:	687b      	ldr	r3, [r7, #4]
2000edfe:	681b      	ldr	r3, [r3, #0]
2000ee00:	687a      	ldr	r2, [r7, #4]
2000ee02:	6892      	ldr	r2, [r2, #8]
2000ee04:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
2000ee06:	f7ff fce3 	bl	2000e7d0 <HAL_GetTick>
2000ee0a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
2000ee0c:	e008      	b.n	2000ee20 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
2000ee0e:	f7ff fcdf 	bl	2000e7d0 <HAL_GetTick>
2000ee12:	4602      	mov	r2, r0
2000ee14:	68fb      	ldr	r3, [r7, #12]
2000ee16:	1ad3      	subs	r3, r2, r3
2000ee18:	2b30      	cmp	r3, #48	; 0x30
2000ee1a:	d901      	bls.n	2000ee20 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
2000ee1c:	2303      	movs	r3, #3
2000ee1e:	e00a      	b.n	2000ee36 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
2000ee20:	687b      	ldr	r3, [r7, #4]
2000ee22:	681b      	ldr	r3, [r3, #0]
2000ee24:	68db      	ldr	r3, [r3, #12]
2000ee26:	2b00      	cmp	r3, #0
2000ee28:	d1f1      	bne.n	2000ee0e <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
2000ee2a:	687b      	ldr	r3, [r7, #4]
2000ee2c:	681b      	ldr	r3, [r3, #0]
2000ee2e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
2000ee32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
2000ee34:	2300      	movs	r3, #0
}
2000ee36:	4618      	mov	r0, r3
2000ee38:	3710      	adds	r7, #16
2000ee3a:	46bd      	mov	sp, r7
2000ee3c:	bd80      	pop	{r7, pc}
	...

2000ee40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2000ee40:	b580      	push	{r7, lr}
2000ee42:	b086      	sub	sp, #24
2000ee44:	af00      	add	r7, sp, #0
2000ee46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
2000ee48:	687b      	ldr	r3, [r7, #4]
2000ee4a:	2b00      	cmp	r3, #0
2000ee4c:	d101      	bne.n	2000ee52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
2000ee4e:	2301      	movs	r3, #1
2000ee50:	e25b      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2000ee52:	687b      	ldr	r3, [r7, #4]
2000ee54:	681b      	ldr	r3, [r3, #0]
2000ee56:	f003 0301 	and.w	r3, r3, #1
2000ee5a:	2b00      	cmp	r3, #0
2000ee5c:	d075      	beq.n	2000ef4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000ee5e:	4ba3      	ldr	r3, [pc, #652]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ee60:	689b      	ldr	r3, [r3, #8]
2000ee62:	f003 030c 	and.w	r3, r3, #12
2000ee66:	2b04      	cmp	r3, #4
2000ee68:	d00c      	beq.n	2000ee84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000ee6a:	4ba0      	ldr	r3, [pc, #640]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ee6c:	689b      	ldr	r3, [r3, #8]
2000ee6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000ee72:	2b08      	cmp	r3, #8
2000ee74:	d112      	bne.n	2000ee9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000ee76:	4b9d      	ldr	r3, [pc, #628]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ee78:	685b      	ldr	r3, [r3, #4]
2000ee7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000ee7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000ee82:	d10b      	bne.n	2000ee9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000ee84:	4b99      	ldr	r3, [pc, #612]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ee86:	681b      	ldr	r3, [r3, #0]
2000ee88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ee8c:	2b00      	cmp	r3, #0
2000ee8e:	d05b      	beq.n	2000ef48 <HAL_RCC_OscConfig+0x108>
2000ee90:	687b      	ldr	r3, [r7, #4]
2000ee92:	685b      	ldr	r3, [r3, #4]
2000ee94:	2b00      	cmp	r3, #0
2000ee96:	d157      	bne.n	2000ef48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
2000ee98:	2301      	movs	r3, #1
2000ee9a:	e236      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2000ee9c:	687b      	ldr	r3, [r7, #4]
2000ee9e:	685b      	ldr	r3, [r3, #4]
2000eea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000eea4:	d106      	bne.n	2000eeb4 <HAL_RCC_OscConfig+0x74>
2000eea6:	4b91      	ldr	r3, [pc, #580]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eea8:	681b      	ldr	r3, [r3, #0]
2000eeaa:	4a90      	ldr	r2, [pc, #576]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eeac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000eeb0:	6013      	str	r3, [r2, #0]
2000eeb2:	e01d      	b.n	2000eef0 <HAL_RCC_OscConfig+0xb0>
2000eeb4:	687b      	ldr	r3, [r7, #4]
2000eeb6:	685b      	ldr	r3, [r3, #4]
2000eeb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2000eebc:	d10c      	bne.n	2000eed8 <HAL_RCC_OscConfig+0x98>
2000eebe:	4b8b      	ldr	r3, [pc, #556]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eec0:	681b      	ldr	r3, [r3, #0]
2000eec2:	4a8a      	ldr	r2, [pc, #552]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2000eec8:	6013      	str	r3, [r2, #0]
2000eeca:	4b88      	ldr	r3, [pc, #544]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eecc:	681b      	ldr	r3, [r3, #0]
2000eece:	4a87      	ldr	r2, [pc, #540]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000eed4:	6013      	str	r3, [r2, #0]
2000eed6:	e00b      	b.n	2000eef0 <HAL_RCC_OscConfig+0xb0>
2000eed8:	4b84      	ldr	r3, [pc, #528]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eeda:	681b      	ldr	r3, [r3, #0]
2000eedc:	4a83      	ldr	r2, [pc, #524]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000eee2:	6013      	str	r3, [r2, #0]
2000eee4:	4b81      	ldr	r3, [pc, #516]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eee6:	681b      	ldr	r3, [r3, #0]
2000eee8:	4a80      	ldr	r2, [pc, #512]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000eeea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000eeee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
2000eef0:	687b      	ldr	r3, [r7, #4]
2000eef2:	685b      	ldr	r3, [r3, #4]
2000eef4:	2b00      	cmp	r3, #0
2000eef6:	d013      	beq.n	2000ef20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000eef8:	f7ff fc6a 	bl	2000e7d0 <HAL_GetTick>
2000eefc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000eefe:	e008      	b.n	2000ef12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000ef00:	f7ff fc66 	bl	2000e7d0 <HAL_GetTick>
2000ef04:	4602      	mov	r2, r0
2000ef06:	693b      	ldr	r3, [r7, #16]
2000ef08:	1ad3      	subs	r3, r2, r3
2000ef0a:	2b64      	cmp	r3, #100	; 0x64
2000ef0c:	d901      	bls.n	2000ef12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
2000ef0e:	2303      	movs	r3, #3
2000ef10:	e1fb      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000ef12:	4b76      	ldr	r3, [pc, #472]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef14:	681b      	ldr	r3, [r3, #0]
2000ef16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ef1a:	2b00      	cmp	r3, #0
2000ef1c:	d0f0      	beq.n	2000ef00 <HAL_RCC_OscConfig+0xc0>
2000ef1e:	e014      	b.n	2000ef4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000ef20:	f7ff fc56 	bl	2000e7d0 <HAL_GetTick>
2000ef24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000ef26:	e008      	b.n	2000ef3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000ef28:	f7ff fc52 	bl	2000e7d0 <HAL_GetTick>
2000ef2c:	4602      	mov	r2, r0
2000ef2e:	693b      	ldr	r3, [r7, #16]
2000ef30:	1ad3      	subs	r3, r2, r3
2000ef32:	2b64      	cmp	r3, #100	; 0x64
2000ef34:	d901      	bls.n	2000ef3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
2000ef36:	2303      	movs	r3, #3
2000ef38:	e1e7      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000ef3a:	4b6c      	ldr	r3, [pc, #432]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef3c:	681b      	ldr	r3, [r3, #0]
2000ef3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ef42:	2b00      	cmp	r3, #0
2000ef44:	d1f0      	bne.n	2000ef28 <HAL_RCC_OscConfig+0xe8>
2000ef46:	e000      	b.n	2000ef4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000ef48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2000ef4a:	687b      	ldr	r3, [r7, #4]
2000ef4c:	681b      	ldr	r3, [r3, #0]
2000ef4e:	f003 0302 	and.w	r3, r3, #2
2000ef52:	2b00      	cmp	r3, #0
2000ef54:	d063      	beq.n	2000f01e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000ef56:	4b65      	ldr	r3, [pc, #404]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef58:	689b      	ldr	r3, [r3, #8]
2000ef5a:	f003 030c 	and.w	r3, r3, #12
2000ef5e:	2b00      	cmp	r3, #0
2000ef60:	d00b      	beq.n	2000ef7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000ef62:	4b62      	ldr	r3, [pc, #392]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef64:	689b      	ldr	r3, [r3, #8]
2000ef66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000ef6a:	2b08      	cmp	r3, #8
2000ef6c:	d11c      	bne.n	2000efa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000ef6e:	4b5f      	ldr	r3, [pc, #380]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef70:	685b      	ldr	r3, [r3, #4]
2000ef72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000ef76:	2b00      	cmp	r3, #0
2000ef78:	d116      	bne.n	2000efa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000ef7a:	4b5c      	ldr	r3, [pc, #368]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef7c:	681b      	ldr	r3, [r3, #0]
2000ef7e:	f003 0302 	and.w	r3, r3, #2
2000ef82:	2b00      	cmp	r3, #0
2000ef84:	d005      	beq.n	2000ef92 <HAL_RCC_OscConfig+0x152>
2000ef86:	687b      	ldr	r3, [r7, #4]
2000ef88:	68db      	ldr	r3, [r3, #12]
2000ef8a:	2b01      	cmp	r3, #1
2000ef8c:	d001      	beq.n	2000ef92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
2000ef8e:	2301      	movs	r3, #1
2000ef90:	e1bb      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000ef92:	4b56      	ldr	r3, [pc, #344]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000ef94:	681b      	ldr	r3, [r3, #0]
2000ef96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000ef9a:	687b      	ldr	r3, [r7, #4]
2000ef9c:	691b      	ldr	r3, [r3, #16]
2000ef9e:	00db      	lsls	r3, r3, #3
2000efa0:	4952      	ldr	r1, [pc, #328]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000efa2:	4313      	orrs	r3, r2
2000efa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000efa6:	e03a      	b.n	2000f01e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
2000efa8:	687b      	ldr	r3, [r7, #4]
2000efaa:	68db      	ldr	r3, [r3, #12]
2000efac:	2b00      	cmp	r3, #0
2000efae:	d020      	beq.n	2000eff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
2000efb0:	4b4f      	ldr	r3, [pc, #316]	; (2000f0f0 <HAL_RCC_OscConfig+0x2b0>)
2000efb2:	2201      	movs	r2, #1
2000efb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000efb6:	f7ff fc0b 	bl	2000e7d0 <HAL_GetTick>
2000efba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000efbc:	e008      	b.n	2000efd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000efbe:	f7ff fc07 	bl	2000e7d0 <HAL_GetTick>
2000efc2:	4602      	mov	r2, r0
2000efc4:	693b      	ldr	r3, [r7, #16]
2000efc6:	1ad3      	subs	r3, r2, r3
2000efc8:	2b02      	cmp	r3, #2
2000efca:	d901      	bls.n	2000efd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
2000efcc:	2303      	movs	r3, #3
2000efce:	e19c      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000efd0:	4b46      	ldr	r3, [pc, #280]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000efd2:	681b      	ldr	r3, [r3, #0]
2000efd4:	f003 0302 	and.w	r3, r3, #2
2000efd8:	2b00      	cmp	r3, #0
2000efda:	d0f0      	beq.n	2000efbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000efdc:	4b43      	ldr	r3, [pc, #268]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000efde:	681b      	ldr	r3, [r3, #0]
2000efe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000efe4:	687b      	ldr	r3, [r7, #4]
2000efe6:	691b      	ldr	r3, [r3, #16]
2000efe8:	00db      	lsls	r3, r3, #3
2000efea:	4940      	ldr	r1, [pc, #256]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000efec:	4313      	orrs	r3, r2
2000efee:	600b      	str	r3, [r1, #0]
2000eff0:	e015      	b.n	2000f01e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2000eff2:	4b3f      	ldr	r3, [pc, #252]	; (2000f0f0 <HAL_RCC_OscConfig+0x2b0>)
2000eff4:	2200      	movs	r2, #0
2000eff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000eff8:	f7ff fbea 	bl	2000e7d0 <HAL_GetTick>
2000effc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000effe:	e008      	b.n	2000f012 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000f000:	f7ff fbe6 	bl	2000e7d0 <HAL_GetTick>
2000f004:	4602      	mov	r2, r0
2000f006:	693b      	ldr	r3, [r7, #16]
2000f008:	1ad3      	subs	r3, r2, r3
2000f00a:	2b02      	cmp	r3, #2
2000f00c:	d901      	bls.n	2000f012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
2000f00e:	2303      	movs	r3, #3
2000f010:	e17b      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000f012:	4b36      	ldr	r3, [pc, #216]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f014:	681b      	ldr	r3, [r3, #0]
2000f016:	f003 0302 	and.w	r3, r3, #2
2000f01a:	2b00      	cmp	r3, #0
2000f01c:	d1f0      	bne.n	2000f000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2000f01e:	687b      	ldr	r3, [r7, #4]
2000f020:	681b      	ldr	r3, [r3, #0]
2000f022:	f003 0308 	and.w	r3, r3, #8
2000f026:	2b00      	cmp	r3, #0
2000f028:	d030      	beq.n	2000f08c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
2000f02a:	687b      	ldr	r3, [r7, #4]
2000f02c:	695b      	ldr	r3, [r3, #20]
2000f02e:	2b00      	cmp	r3, #0
2000f030:	d016      	beq.n	2000f060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000f032:	4b30      	ldr	r3, [pc, #192]	; (2000f0f4 <HAL_RCC_OscConfig+0x2b4>)
2000f034:	2201      	movs	r2, #1
2000f036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000f038:	f7ff fbca 	bl	2000e7d0 <HAL_GetTick>
2000f03c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000f03e:	e008      	b.n	2000f052 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000f040:	f7ff fbc6 	bl	2000e7d0 <HAL_GetTick>
2000f044:	4602      	mov	r2, r0
2000f046:	693b      	ldr	r3, [r7, #16]
2000f048:	1ad3      	subs	r3, r2, r3
2000f04a:	2b02      	cmp	r3, #2
2000f04c:	d901      	bls.n	2000f052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
2000f04e:	2303      	movs	r3, #3
2000f050:	e15b      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000f052:	4b26      	ldr	r3, [pc, #152]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000f056:	f003 0302 	and.w	r3, r3, #2
2000f05a:	2b00      	cmp	r3, #0
2000f05c:	d0f0      	beq.n	2000f040 <HAL_RCC_OscConfig+0x200>
2000f05e:	e015      	b.n	2000f08c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2000f060:	4b24      	ldr	r3, [pc, #144]	; (2000f0f4 <HAL_RCC_OscConfig+0x2b4>)
2000f062:	2200      	movs	r2, #0
2000f064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000f066:	f7ff fbb3 	bl	2000e7d0 <HAL_GetTick>
2000f06a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000f06c:	e008      	b.n	2000f080 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000f06e:	f7ff fbaf 	bl	2000e7d0 <HAL_GetTick>
2000f072:	4602      	mov	r2, r0
2000f074:	693b      	ldr	r3, [r7, #16]
2000f076:	1ad3      	subs	r3, r2, r3
2000f078:	2b02      	cmp	r3, #2
2000f07a:	d901      	bls.n	2000f080 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
2000f07c:	2303      	movs	r3, #3
2000f07e:	e144      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000f080:	4b1a      	ldr	r3, [pc, #104]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000f084:	f003 0302 	and.w	r3, r3, #2
2000f088:	2b00      	cmp	r3, #0
2000f08a:	d1f0      	bne.n	2000f06e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2000f08c:	687b      	ldr	r3, [r7, #4]
2000f08e:	681b      	ldr	r3, [r3, #0]
2000f090:	f003 0304 	and.w	r3, r3, #4
2000f094:	2b00      	cmp	r3, #0
2000f096:	f000 80a0 	beq.w	2000f1da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
2000f09a:	2300      	movs	r3, #0
2000f09c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
2000f09e:	4b13      	ldr	r3, [pc, #76]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000f0a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000f0a6:	2b00      	cmp	r3, #0
2000f0a8:	d10f      	bne.n	2000f0ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
2000f0aa:	2300      	movs	r3, #0
2000f0ac:	60bb      	str	r3, [r7, #8]
2000f0ae:	4b0f      	ldr	r3, [pc, #60]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000f0b2:	4a0e      	ldr	r2, [pc, #56]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f0b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000f0b8:	6413      	str	r3, [r2, #64]	; 0x40
2000f0ba:	4b0c      	ldr	r3, [pc, #48]	; (2000f0ec <HAL_RCC_OscConfig+0x2ac>)
2000f0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000f0be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000f0c2:	60bb      	str	r3, [r7, #8]
2000f0c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
2000f0c6:	2301      	movs	r3, #1
2000f0c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000f0ca:	4b0b      	ldr	r3, [pc, #44]	; (2000f0f8 <HAL_RCC_OscConfig+0x2b8>)
2000f0cc:	681b      	ldr	r3, [r3, #0]
2000f0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000f0d2:	2b00      	cmp	r3, #0
2000f0d4:	d121      	bne.n	2000f11a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
2000f0d6:	4b08      	ldr	r3, [pc, #32]	; (2000f0f8 <HAL_RCC_OscConfig+0x2b8>)
2000f0d8:	681b      	ldr	r3, [r3, #0]
2000f0da:	4a07      	ldr	r2, [pc, #28]	; (2000f0f8 <HAL_RCC_OscConfig+0x2b8>)
2000f0dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000f0e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000f0e2:	f7ff fb75 	bl	2000e7d0 <HAL_GetTick>
2000f0e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000f0e8:	e011      	b.n	2000f10e <HAL_RCC_OscConfig+0x2ce>
2000f0ea:	bf00      	nop
2000f0ec:	40023800 	.word	0x40023800
2000f0f0:	42470000 	.word	0x42470000
2000f0f4:	42470e80 	.word	0x42470e80
2000f0f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000f0fc:	f7ff fb68 	bl	2000e7d0 <HAL_GetTick>
2000f100:	4602      	mov	r2, r0
2000f102:	693b      	ldr	r3, [r7, #16]
2000f104:	1ad3      	subs	r3, r2, r3
2000f106:	2b02      	cmp	r3, #2
2000f108:	d901      	bls.n	2000f10e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
2000f10a:	2303      	movs	r3, #3
2000f10c:	e0fd      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000f10e:	4b81      	ldr	r3, [pc, #516]	; (2000f314 <HAL_RCC_OscConfig+0x4d4>)
2000f110:	681b      	ldr	r3, [r3, #0]
2000f112:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000f116:	2b00      	cmp	r3, #0
2000f118:	d0f0      	beq.n	2000f0fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2000f11a:	687b      	ldr	r3, [r7, #4]
2000f11c:	689b      	ldr	r3, [r3, #8]
2000f11e:	2b01      	cmp	r3, #1
2000f120:	d106      	bne.n	2000f130 <HAL_RCC_OscConfig+0x2f0>
2000f122:	4b7d      	ldr	r3, [pc, #500]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f126:	4a7c      	ldr	r2, [pc, #496]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f128:	f043 0301 	orr.w	r3, r3, #1
2000f12c:	6713      	str	r3, [r2, #112]	; 0x70
2000f12e:	e01c      	b.n	2000f16a <HAL_RCC_OscConfig+0x32a>
2000f130:	687b      	ldr	r3, [r7, #4]
2000f132:	689b      	ldr	r3, [r3, #8]
2000f134:	2b05      	cmp	r3, #5
2000f136:	d10c      	bne.n	2000f152 <HAL_RCC_OscConfig+0x312>
2000f138:	4b77      	ldr	r3, [pc, #476]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f13c:	4a76      	ldr	r2, [pc, #472]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f13e:	f043 0304 	orr.w	r3, r3, #4
2000f142:	6713      	str	r3, [r2, #112]	; 0x70
2000f144:	4b74      	ldr	r3, [pc, #464]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f148:	4a73      	ldr	r2, [pc, #460]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f14a:	f043 0301 	orr.w	r3, r3, #1
2000f14e:	6713      	str	r3, [r2, #112]	; 0x70
2000f150:	e00b      	b.n	2000f16a <HAL_RCC_OscConfig+0x32a>
2000f152:	4b71      	ldr	r3, [pc, #452]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f156:	4a70      	ldr	r2, [pc, #448]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f158:	f023 0301 	bic.w	r3, r3, #1
2000f15c:	6713      	str	r3, [r2, #112]	; 0x70
2000f15e:	4b6e      	ldr	r3, [pc, #440]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f162:	4a6d      	ldr	r2, [pc, #436]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f164:	f023 0304 	bic.w	r3, r3, #4
2000f168:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2000f16a:	687b      	ldr	r3, [r7, #4]
2000f16c:	689b      	ldr	r3, [r3, #8]
2000f16e:	2b00      	cmp	r3, #0
2000f170:	d015      	beq.n	2000f19e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000f172:	f7ff fb2d 	bl	2000e7d0 <HAL_GetTick>
2000f176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000f178:	e00a      	b.n	2000f190 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000f17a:	f7ff fb29 	bl	2000e7d0 <HAL_GetTick>
2000f17e:	4602      	mov	r2, r0
2000f180:	693b      	ldr	r3, [r7, #16]
2000f182:	1ad3      	subs	r3, r2, r3
2000f184:	f241 3288 	movw	r2, #5000	; 0x1388
2000f188:	4293      	cmp	r3, r2
2000f18a:	d901      	bls.n	2000f190 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
2000f18c:	2303      	movs	r3, #3
2000f18e:	e0bc      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000f190:	4b61      	ldr	r3, [pc, #388]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f194:	f003 0302 	and.w	r3, r3, #2
2000f198:	2b00      	cmp	r3, #0
2000f19a:	d0ee      	beq.n	2000f17a <HAL_RCC_OscConfig+0x33a>
2000f19c:	e014      	b.n	2000f1c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000f19e:	f7ff fb17 	bl	2000e7d0 <HAL_GetTick>
2000f1a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000f1a4:	e00a      	b.n	2000f1bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000f1a6:	f7ff fb13 	bl	2000e7d0 <HAL_GetTick>
2000f1aa:	4602      	mov	r2, r0
2000f1ac:	693b      	ldr	r3, [r7, #16]
2000f1ae:	1ad3      	subs	r3, r2, r3
2000f1b0:	f241 3288 	movw	r2, #5000	; 0x1388
2000f1b4:	4293      	cmp	r3, r2
2000f1b6:	d901      	bls.n	2000f1bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
2000f1b8:	2303      	movs	r3, #3
2000f1ba:	e0a6      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000f1bc:	4b56      	ldr	r3, [pc, #344]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f1be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f1c0:	f003 0302 	and.w	r3, r3, #2
2000f1c4:	2b00      	cmp	r3, #0
2000f1c6:	d1ee      	bne.n	2000f1a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
2000f1c8:	7dfb      	ldrb	r3, [r7, #23]
2000f1ca:	2b01      	cmp	r3, #1
2000f1cc:	d105      	bne.n	2000f1da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
2000f1ce:	4b52      	ldr	r3, [pc, #328]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000f1d2:	4a51      	ldr	r2, [pc, #324]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f1d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000f1d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2000f1da:	687b      	ldr	r3, [r7, #4]
2000f1dc:	699b      	ldr	r3, [r3, #24]
2000f1de:	2b00      	cmp	r3, #0
2000f1e0:	f000 8092 	beq.w	2000f308 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2000f1e4:	4b4c      	ldr	r3, [pc, #304]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f1e6:	689b      	ldr	r3, [r3, #8]
2000f1e8:	f003 030c 	and.w	r3, r3, #12
2000f1ec:	2b08      	cmp	r3, #8
2000f1ee:	d05c      	beq.n	2000f2aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000f1f0:	687b      	ldr	r3, [r7, #4]
2000f1f2:	699b      	ldr	r3, [r3, #24]
2000f1f4:	2b02      	cmp	r3, #2
2000f1f6:	d141      	bne.n	2000f27c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000f1f8:	4b48      	ldr	r3, [pc, #288]	; (2000f31c <HAL_RCC_OscConfig+0x4dc>)
2000f1fa:	2200      	movs	r2, #0
2000f1fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000f1fe:	f7ff fae7 	bl	2000e7d0 <HAL_GetTick>
2000f202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000f204:	e008      	b.n	2000f218 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000f206:	f7ff fae3 	bl	2000e7d0 <HAL_GetTick>
2000f20a:	4602      	mov	r2, r0
2000f20c:	693b      	ldr	r3, [r7, #16]
2000f20e:	1ad3      	subs	r3, r2, r3
2000f210:	2b02      	cmp	r3, #2
2000f212:	d901      	bls.n	2000f218 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
2000f214:	2303      	movs	r3, #3
2000f216:	e078      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000f218:	4b3f      	ldr	r3, [pc, #252]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f21a:	681b      	ldr	r3, [r3, #0]
2000f21c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000f220:	2b00      	cmp	r3, #0
2000f222:	d1f0      	bne.n	2000f206 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
2000f224:	687b      	ldr	r3, [r7, #4]
2000f226:	69da      	ldr	r2, [r3, #28]
2000f228:	687b      	ldr	r3, [r7, #4]
2000f22a:	6a1b      	ldr	r3, [r3, #32]
2000f22c:	431a      	orrs	r2, r3
2000f22e:	687b      	ldr	r3, [r7, #4]
2000f230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000f232:	019b      	lsls	r3, r3, #6
2000f234:	431a      	orrs	r2, r3
2000f236:	687b      	ldr	r3, [r7, #4]
2000f238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000f23a:	085b      	lsrs	r3, r3, #1
2000f23c:	3b01      	subs	r3, #1
2000f23e:	041b      	lsls	r3, r3, #16
2000f240:	431a      	orrs	r2, r3
2000f242:	687b      	ldr	r3, [r7, #4]
2000f244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000f246:	061b      	lsls	r3, r3, #24
2000f248:	4933      	ldr	r1, [pc, #204]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f24a:	4313      	orrs	r3, r2
2000f24c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2000f24e:	4b33      	ldr	r3, [pc, #204]	; (2000f31c <HAL_RCC_OscConfig+0x4dc>)
2000f250:	2201      	movs	r2, #1
2000f252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000f254:	f7ff fabc 	bl	2000e7d0 <HAL_GetTick>
2000f258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000f25a:	e008      	b.n	2000f26e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000f25c:	f7ff fab8 	bl	2000e7d0 <HAL_GetTick>
2000f260:	4602      	mov	r2, r0
2000f262:	693b      	ldr	r3, [r7, #16]
2000f264:	1ad3      	subs	r3, r2, r3
2000f266:	2b02      	cmp	r3, #2
2000f268:	d901      	bls.n	2000f26e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
2000f26a:	2303      	movs	r3, #3
2000f26c:	e04d      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000f26e:	4b2a      	ldr	r3, [pc, #168]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f270:	681b      	ldr	r3, [r3, #0]
2000f272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000f276:	2b00      	cmp	r3, #0
2000f278:	d0f0      	beq.n	2000f25c <HAL_RCC_OscConfig+0x41c>
2000f27a:	e045      	b.n	2000f308 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000f27c:	4b27      	ldr	r3, [pc, #156]	; (2000f31c <HAL_RCC_OscConfig+0x4dc>)
2000f27e:	2200      	movs	r2, #0
2000f280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000f282:	f7ff faa5 	bl	2000e7d0 <HAL_GetTick>
2000f286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000f288:	e008      	b.n	2000f29c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000f28a:	f7ff faa1 	bl	2000e7d0 <HAL_GetTick>
2000f28e:	4602      	mov	r2, r0
2000f290:	693b      	ldr	r3, [r7, #16]
2000f292:	1ad3      	subs	r3, r2, r3
2000f294:	2b02      	cmp	r3, #2
2000f296:	d901      	bls.n	2000f29c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
2000f298:	2303      	movs	r3, #3
2000f29a:	e036      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000f29c:	4b1e      	ldr	r3, [pc, #120]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f29e:	681b      	ldr	r3, [r3, #0]
2000f2a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000f2a4:	2b00      	cmp	r3, #0
2000f2a6:	d1f0      	bne.n	2000f28a <HAL_RCC_OscConfig+0x44a>
2000f2a8:	e02e      	b.n	2000f308 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
2000f2aa:	687b      	ldr	r3, [r7, #4]
2000f2ac:	699b      	ldr	r3, [r3, #24]
2000f2ae:	2b01      	cmp	r3, #1
2000f2b0:	d101      	bne.n	2000f2b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
2000f2b2:	2301      	movs	r3, #1
2000f2b4:	e029      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
2000f2b6:	4b18      	ldr	r3, [pc, #96]	; (2000f318 <HAL_RCC_OscConfig+0x4d8>)
2000f2b8:	685b      	ldr	r3, [r3, #4]
2000f2ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000f2bc:	68fb      	ldr	r3, [r7, #12]
2000f2be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
2000f2c2:	687b      	ldr	r3, [r7, #4]
2000f2c4:	69db      	ldr	r3, [r3, #28]
2000f2c6:	429a      	cmp	r2, r3
2000f2c8:	d11c      	bne.n	2000f304 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000f2ca:	68fb      	ldr	r3, [r7, #12]
2000f2cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000f2d0:	687b      	ldr	r3, [r7, #4]
2000f2d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000f2d4:	429a      	cmp	r2, r3
2000f2d6:	d115      	bne.n	2000f304 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000f2d8:	68fa      	ldr	r2, [r7, #12]
2000f2da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
2000f2de:	4013      	ands	r3, r2
2000f2e0:	687a      	ldr	r2, [r7, #4]
2000f2e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000f2e4:	4293      	cmp	r3, r2
2000f2e6:	d10d      	bne.n	2000f304 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000f2e8:	68fb      	ldr	r3, [r7, #12]
2000f2ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2000f2ee:	687b      	ldr	r3, [r7, #4]
2000f2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000f2f2:	429a      	cmp	r2, r3
2000f2f4:	d106      	bne.n	2000f304 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
2000f2f6:	68fb      	ldr	r3, [r7, #12]
2000f2f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
2000f2fc:	687b      	ldr	r3, [r7, #4]
2000f2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000f300:	429a      	cmp	r2, r3
2000f302:	d001      	beq.n	2000f308 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
2000f304:	2301      	movs	r3, #1
2000f306:	e000      	b.n	2000f30a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
2000f308:	2300      	movs	r3, #0
}
2000f30a:	4618      	mov	r0, r3
2000f30c:	3718      	adds	r7, #24
2000f30e:	46bd      	mov	sp, r7
2000f310:	bd80      	pop	{r7, pc}
2000f312:	bf00      	nop
2000f314:	40007000 	.word	0x40007000
2000f318:	40023800 	.word	0x40023800
2000f31c:	42470060 	.word	0x42470060

2000f320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2000f320:	b580      	push	{r7, lr}
2000f322:	b084      	sub	sp, #16
2000f324:	af00      	add	r7, sp, #0
2000f326:	6078      	str	r0, [r7, #4]
2000f328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
2000f32a:	687b      	ldr	r3, [r7, #4]
2000f32c:	2b00      	cmp	r3, #0
2000f32e:	d101      	bne.n	2000f334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2000f330:	2301      	movs	r3, #1
2000f332:	e0cc      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
2000f334:	4b68      	ldr	r3, [pc, #416]	; (2000f4d8 <HAL_RCC_ClockConfig+0x1b8>)
2000f336:	681b      	ldr	r3, [r3, #0]
2000f338:	f003 030f 	and.w	r3, r3, #15
2000f33c:	683a      	ldr	r2, [r7, #0]
2000f33e:	429a      	cmp	r2, r3
2000f340:	d90c      	bls.n	2000f35c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000f342:	4b65      	ldr	r3, [pc, #404]	; (2000f4d8 <HAL_RCC_ClockConfig+0x1b8>)
2000f344:	683a      	ldr	r2, [r7, #0]
2000f346:	b2d2      	uxtb	r2, r2
2000f348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000f34a:	4b63      	ldr	r3, [pc, #396]	; (2000f4d8 <HAL_RCC_ClockConfig+0x1b8>)
2000f34c:	681b      	ldr	r3, [r3, #0]
2000f34e:	f003 030f 	and.w	r3, r3, #15
2000f352:	683a      	ldr	r2, [r7, #0]
2000f354:	429a      	cmp	r2, r3
2000f356:	d001      	beq.n	2000f35c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
2000f358:	2301      	movs	r3, #1
2000f35a:	e0b8      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2000f35c:	687b      	ldr	r3, [r7, #4]
2000f35e:	681b      	ldr	r3, [r3, #0]
2000f360:	f003 0302 	and.w	r3, r3, #2
2000f364:	2b00      	cmp	r3, #0
2000f366:	d020      	beq.n	2000f3aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000f368:	687b      	ldr	r3, [r7, #4]
2000f36a:	681b      	ldr	r3, [r3, #0]
2000f36c:	f003 0304 	and.w	r3, r3, #4
2000f370:	2b00      	cmp	r3, #0
2000f372:	d005      	beq.n	2000f380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
2000f374:	4b59      	ldr	r3, [pc, #356]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f376:	689b      	ldr	r3, [r3, #8]
2000f378:	4a58      	ldr	r2, [pc, #352]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f37a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2000f37e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000f380:	687b      	ldr	r3, [r7, #4]
2000f382:	681b      	ldr	r3, [r3, #0]
2000f384:	f003 0308 	and.w	r3, r3, #8
2000f388:	2b00      	cmp	r3, #0
2000f38a:	d005      	beq.n	2000f398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
2000f38c:	4b53      	ldr	r3, [pc, #332]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f38e:	689b      	ldr	r3, [r3, #8]
2000f390:	4a52      	ldr	r2, [pc, #328]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
2000f396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2000f398:	4b50      	ldr	r3, [pc, #320]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f39a:	689b      	ldr	r3, [r3, #8]
2000f39c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
2000f3a0:	687b      	ldr	r3, [r7, #4]
2000f3a2:	689b      	ldr	r3, [r3, #8]
2000f3a4:	494d      	ldr	r1, [pc, #308]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f3a6:	4313      	orrs	r3, r2
2000f3a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2000f3aa:	687b      	ldr	r3, [r7, #4]
2000f3ac:	681b      	ldr	r3, [r3, #0]
2000f3ae:	f003 0301 	and.w	r3, r3, #1
2000f3b2:	2b00      	cmp	r3, #0
2000f3b4:	d044      	beq.n	2000f440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2000f3b6:	687b      	ldr	r3, [r7, #4]
2000f3b8:	685b      	ldr	r3, [r3, #4]
2000f3ba:	2b01      	cmp	r3, #1
2000f3bc:	d107      	bne.n	2000f3ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000f3be:	4b47      	ldr	r3, [pc, #284]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f3c0:	681b      	ldr	r3, [r3, #0]
2000f3c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000f3c6:	2b00      	cmp	r3, #0
2000f3c8:	d119      	bne.n	2000f3fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000f3ca:	2301      	movs	r3, #1
2000f3cc:	e07f      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000f3ce:	687b      	ldr	r3, [r7, #4]
2000f3d0:	685b      	ldr	r3, [r3, #4]
2000f3d2:	2b02      	cmp	r3, #2
2000f3d4:	d003      	beq.n	2000f3de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
2000f3d6:	687b      	ldr	r3, [r7, #4]
2000f3d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000f3da:	2b03      	cmp	r3, #3
2000f3dc:	d107      	bne.n	2000f3ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000f3de:	4b3f      	ldr	r3, [pc, #252]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f3e0:	681b      	ldr	r3, [r3, #0]
2000f3e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000f3e6:	2b00      	cmp	r3, #0
2000f3e8:	d109      	bne.n	2000f3fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000f3ea:	2301      	movs	r3, #1
2000f3ec:	e06f      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000f3ee:	4b3b      	ldr	r3, [pc, #236]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f3f0:	681b      	ldr	r3, [r3, #0]
2000f3f2:	f003 0302 	and.w	r3, r3, #2
2000f3f6:	2b00      	cmp	r3, #0
2000f3f8:	d101      	bne.n	2000f3fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000f3fa:	2301      	movs	r3, #1
2000f3fc:	e067      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000f3fe:	4b37      	ldr	r3, [pc, #220]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f400:	689b      	ldr	r3, [r3, #8]
2000f402:	f023 0203 	bic.w	r2, r3, #3
2000f406:	687b      	ldr	r3, [r7, #4]
2000f408:	685b      	ldr	r3, [r3, #4]
2000f40a:	4934      	ldr	r1, [pc, #208]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f40c:	4313      	orrs	r3, r2
2000f40e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
2000f410:	f7ff f9de 	bl	2000e7d0 <HAL_GetTick>
2000f414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000f416:	e00a      	b.n	2000f42e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2000f418:	f7ff f9da 	bl	2000e7d0 <HAL_GetTick>
2000f41c:	4602      	mov	r2, r0
2000f41e:	68fb      	ldr	r3, [r7, #12]
2000f420:	1ad3      	subs	r3, r2, r3
2000f422:	f241 3288 	movw	r2, #5000	; 0x1388
2000f426:	4293      	cmp	r3, r2
2000f428:	d901      	bls.n	2000f42e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
2000f42a:	2303      	movs	r3, #3
2000f42c:	e04f      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000f42e:	4b2b      	ldr	r3, [pc, #172]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f430:	689b      	ldr	r3, [r3, #8]
2000f432:	f003 020c 	and.w	r2, r3, #12
2000f436:	687b      	ldr	r3, [r7, #4]
2000f438:	685b      	ldr	r3, [r3, #4]
2000f43a:	009b      	lsls	r3, r3, #2
2000f43c:	429a      	cmp	r2, r3
2000f43e:	d1eb      	bne.n	2000f418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
2000f440:	4b25      	ldr	r3, [pc, #148]	; (2000f4d8 <HAL_RCC_ClockConfig+0x1b8>)
2000f442:	681b      	ldr	r3, [r3, #0]
2000f444:	f003 030f 	and.w	r3, r3, #15
2000f448:	683a      	ldr	r2, [r7, #0]
2000f44a:	429a      	cmp	r2, r3
2000f44c:	d20c      	bcs.n	2000f468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000f44e:	4b22      	ldr	r3, [pc, #136]	; (2000f4d8 <HAL_RCC_ClockConfig+0x1b8>)
2000f450:	683a      	ldr	r2, [r7, #0]
2000f452:	b2d2      	uxtb	r2, r2
2000f454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000f456:	4b20      	ldr	r3, [pc, #128]	; (2000f4d8 <HAL_RCC_ClockConfig+0x1b8>)
2000f458:	681b      	ldr	r3, [r3, #0]
2000f45a:	f003 030f 	and.w	r3, r3, #15
2000f45e:	683a      	ldr	r2, [r7, #0]
2000f460:	429a      	cmp	r2, r3
2000f462:	d001      	beq.n	2000f468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
2000f464:	2301      	movs	r3, #1
2000f466:	e032      	b.n	2000f4ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000f468:	687b      	ldr	r3, [r7, #4]
2000f46a:	681b      	ldr	r3, [r3, #0]
2000f46c:	f003 0304 	and.w	r3, r3, #4
2000f470:	2b00      	cmp	r3, #0
2000f472:	d008      	beq.n	2000f486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
2000f474:	4b19      	ldr	r3, [pc, #100]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f476:	689b      	ldr	r3, [r3, #8]
2000f478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
2000f47c:	687b      	ldr	r3, [r7, #4]
2000f47e:	68db      	ldr	r3, [r3, #12]
2000f480:	4916      	ldr	r1, [pc, #88]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f482:	4313      	orrs	r3, r2
2000f484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000f486:	687b      	ldr	r3, [r7, #4]
2000f488:	681b      	ldr	r3, [r3, #0]
2000f48a:	f003 0308 	and.w	r3, r3, #8
2000f48e:	2b00      	cmp	r3, #0
2000f490:	d009      	beq.n	2000f4a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
2000f492:	4b12      	ldr	r3, [pc, #72]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f494:	689b      	ldr	r3, [r3, #8]
2000f496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
2000f49a:	687b      	ldr	r3, [r7, #4]
2000f49c:	691b      	ldr	r3, [r3, #16]
2000f49e:	00db      	lsls	r3, r3, #3
2000f4a0:	490e      	ldr	r1, [pc, #56]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f4a2:	4313      	orrs	r3, r2
2000f4a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
2000f4a6:	f000 f821 	bl	2000f4ec <HAL_RCC_GetSysClockFreq>
2000f4aa:	4602      	mov	r2, r0
2000f4ac:	4b0b      	ldr	r3, [pc, #44]	; (2000f4dc <HAL_RCC_ClockConfig+0x1bc>)
2000f4ae:	689b      	ldr	r3, [r3, #8]
2000f4b0:	091b      	lsrs	r3, r3, #4
2000f4b2:	f003 030f 	and.w	r3, r3, #15
2000f4b6:	490a      	ldr	r1, [pc, #40]	; (2000f4e0 <HAL_RCC_ClockConfig+0x1c0>)
2000f4b8:	5ccb      	ldrb	r3, [r1, r3]
2000f4ba:	fa22 f303 	lsr.w	r3, r2, r3
2000f4be:	4a09      	ldr	r2, [pc, #36]	; (2000f4e4 <HAL_RCC_ClockConfig+0x1c4>)
2000f4c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
2000f4c2:	4b09      	ldr	r3, [pc, #36]	; (2000f4e8 <HAL_RCC_ClockConfig+0x1c8>)
2000f4c4:	681b      	ldr	r3, [r3, #0]
2000f4c6:	4618      	mov	r0, r3
2000f4c8:	f7ff f93e 	bl	2000e748 <HAL_InitTick>

  return HAL_OK;
2000f4cc:	2300      	movs	r3, #0
}
2000f4ce:	4618      	mov	r0, r3
2000f4d0:	3710      	adds	r7, #16
2000f4d2:	46bd      	mov	sp, r7
2000f4d4:	bd80      	pop	{r7, pc}
2000f4d6:	bf00      	nop
2000f4d8:	40023c00 	.word	0x40023c00
2000f4dc:	40023800 	.word	0x40023800
2000f4e0:	2000fff4 	.word	0x2000fff4
2000f4e4:	200100b4 	.word	0x200100b4
2000f4e8:	200100cc 	.word	0x200100cc

2000f4ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
2000f4ec:	b5b0      	push	{r4, r5, r7, lr}
2000f4ee:	b084      	sub	sp, #16
2000f4f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
2000f4f2:	2100      	movs	r1, #0
2000f4f4:	6079      	str	r1, [r7, #4]
2000f4f6:	2100      	movs	r1, #0
2000f4f8:	60f9      	str	r1, [r7, #12]
2000f4fa:	2100      	movs	r1, #0
2000f4fc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
2000f4fe:	2100      	movs	r1, #0
2000f500:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
2000f502:	4952      	ldr	r1, [pc, #328]	; (2000f64c <HAL_RCC_GetSysClockFreq+0x160>)
2000f504:	6889      	ldr	r1, [r1, #8]
2000f506:	f001 010c 	and.w	r1, r1, #12
2000f50a:	2908      	cmp	r1, #8
2000f50c:	d00d      	beq.n	2000f52a <HAL_RCC_GetSysClockFreq+0x3e>
2000f50e:	2908      	cmp	r1, #8
2000f510:	f200 8094 	bhi.w	2000f63c <HAL_RCC_GetSysClockFreq+0x150>
2000f514:	2900      	cmp	r1, #0
2000f516:	d002      	beq.n	2000f51e <HAL_RCC_GetSysClockFreq+0x32>
2000f518:	2904      	cmp	r1, #4
2000f51a:	d003      	beq.n	2000f524 <HAL_RCC_GetSysClockFreq+0x38>
2000f51c:	e08e      	b.n	2000f63c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
2000f51e:	4b4c      	ldr	r3, [pc, #304]	; (2000f650 <HAL_RCC_GetSysClockFreq+0x164>)
2000f520:	60bb      	str	r3, [r7, #8]
       break;
2000f522:	e08e      	b.n	2000f642 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
2000f524:	4b4b      	ldr	r3, [pc, #300]	; (2000f654 <HAL_RCC_GetSysClockFreq+0x168>)
2000f526:	60bb      	str	r3, [r7, #8]
      break;
2000f528:	e08b      	b.n	2000f642 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000f52a:	4948      	ldr	r1, [pc, #288]	; (2000f64c <HAL_RCC_GetSysClockFreq+0x160>)
2000f52c:	6849      	ldr	r1, [r1, #4]
2000f52e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
2000f532:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
2000f534:	4945      	ldr	r1, [pc, #276]	; (2000f64c <HAL_RCC_GetSysClockFreq+0x160>)
2000f536:	6849      	ldr	r1, [r1, #4]
2000f538:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
2000f53c:	2900      	cmp	r1, #0
2000f53e:	d024      	beq.n	2000f58a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000f540:	4942      	ldr	r1, [pc, #264]	; (2000f64c <HAL_RCC_GetSysClockFreq+0x160>)
2000f542:	6849      	ldr	r1, [r1, #4]
2000f544:	0989      	lsrs	r1, r1, #6
2000f546:	4608      	mov	r0, r1
2000f548:	f04f 0100 	mov.w	r1, #0
2000f54c:	f240 14ff 	movw	r4, #511	; 0x1ff
2000f550:	f04f 0500 	mov.w	r5, #0
2000f554:	ea00 0204 	and.w	r2, r0, r4
2000f558:	ea01 0305 	and.w	r3, r1, r5
2000f55c:	493d      	ldr	r1, [pc, #244]	; (2000f654 <HAL_RCC_GetSysClockFreq+0x168>)
2000f55e:	fb01 f003 	mul.w	r0, r1, r3
2000f562:	2100      	movs	r1, #0
2000f564:	fb01 f102 	mul.w	r1, r1, r2
2000f568:	1844      	adds	r4, r0, r1
2000f56a:	493a      	ldr	r1, [pc, #232]	; (2000f654 <HAL_RCC_GetSysClockFreq+0x168>)
2000f56c:	fba2 0101 	umull	r0, r1, r2, r1
2000f570:	1863      	adds	r3, r4, r1
2000f572:	4619      	mov	r1, r3
2000f574:	687b      	ldr	r3, [r7, #4]
2000f576:	461a      	mov	r2, r3
2000f578:	f04f 0300 	mov.w	r3, #0
2000f57c:	f000 f90d 	bl	2000f79a <__aeabi_uldivmod>
2000f580:	4602      	mov	r2, r0
2000f582:	460b      	mov	r3, r1
2000f584:	4613      	mov	r3, r2
2000f586:	60fb      	str	r3, [r7, #12]
2000f588:	e04a      	b.n	2000f620 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000f58a:	4b30      	ldr	r3, [pc, #192]	; (2000f64c <HAL_RCC_GetSysClockFreq+0x160>)
2000f58c:	685b      	ldr	r3, [r3, #4]
2000f58e:	099b      	lsrs	r3, r3, #6
2000f590:	461a      	mov	r2, r3
2000f592:	f04f 0300 	mov.w	r3, #0
2000f596:	f240 10ff 	movw	r0, #511	; 0x1ff
2000f59a:	f04f 0100 	mov.w	r1, #0
2000f59e:	ea02 0400 	and.w	r4, r2, r0
2000f5a2:	ea03 0501 	and.w	r5, r3, r1
2000f5a6:	4620      	mov	r0, r4
2000f5a8:	4629      	mov	r1, r5
2000f5aa:	f04f 0200 	mov.w	r2, #0
2000f5ae:	f04f 0300 	mov.w	r3, #0
2000f5b2:	014b      	lsls	r3, r1, #5
2000f5b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
2000f5b8:	0142      	lsls	r2, r0, #5
2000f5ba:	4610      	mov	r0, r2
2000f5bc:	4619      	mov	r1, r3
2000f5be:	1b00      	subs	r0, r0, r4
2000f5c0:	eb61 0105 	sbc.w	r1, r1, r5
2000f5c4:	f04f 0200 	mov.w	r2, #0
2000f5c8:	f04f 0300 	mov.w	r3, #0
2000f5cc:	018b      	lsls	r3, r1, #6
2000f5ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
2000f5d2:	0182      	lsls	r2, r0, #6
2000f5d4:	1a12      	subs	r2, r2, r0
2000f5d6:	eb63 0301 	sbc.w	r3, r3, r1
2000f5da:	f04f 0000 	mov.w	r0, #0
2000f5de:	f04f 0100 	mov.w	r1, #0
2000f5e2:	00d9      	lsls	r1, r3, #3
2000f5e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
2000f5e8:	00d0      	lsls	r0, r2, #3
2000f5ea:	4602      	mov	r2, r0
2000f5ec:	460b      	mov	r3, r1
2000f5ee:	1912      	adds	r2, r2, r4
2000f5f0:	eb45 0303 	adc.w	r3, r5, r3
2000f5f4:	f04f 0000 	mov.w	r0, #0
2000f5f8:	f04f 0100 	mov.w	r1, #0
2000f5fc:	0299      	lsls	r1, r3, #10
2000f5fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
2000f602:	0290      	lsls	r0, r2, #10
2000f604:	4602      	mov	r2, r0
2000f606:	460b      	mov	r3, r1
2000f608:	4610      	mov	r0, r2
2000f60a:	4619      	mov	r1, r3
2000f60c:	687b      	ldr	r3, [r7, #4]
2000f60e:	461a      	mov	r2, r3
2000f610:	f04f 0300 	mov.w	r3, #0
2000f614:	f000 f8c1 	bl	2000f79a <__aeabi_uldivmod>
2000f618:	4602      	mov	r2, r0
2000f61a:	460b      	mov	r3, r1
2000f61c:	4613      	mov	r3, r2
2000f61e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
2000f620:	4b0a      	ldr	r3, [pc, #40]	; (2000f64c <HAL_RCC_GetSysClockFreq+0x160>)
2000f622:	685b      	ldr	r3, [r3, #4]
2000f624:	0c1b      	lsrs	r3, r3, #16
2000f626:	f003 0303 	and.w	r3, r3, #3
2000f62a:	3301      	adds	r3, #1
2000f62c:	005b      	lsls	r3, r3, #1
2000f62e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
2000f630:	68fa      	ldr	r2, [r7, #12]
2000f632:	683b      	ldr	r3, [r7, #0]
2000f634:	fbb2 f3f3 	udiv	r3, r2, r3
2000f638:	60bb      	str	r3, [r7, #8]
      break;
2000f63a:	e002      	b.n	2000f642 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
2000f63c:	4b04      	ldr	r3, [pc, #16]	; (2000f650 <HAL_RCC_GetSysClockFreq+0x164>)
2000f63e:	60bb      	str	r3, [r7, #8]
      break;
2000f640:	bf00      	nop
    }
  }
  return sysclockfreq;
2000f642:	68bb      	ldr	r3, [r7, #8]
}
2000f644:	4618      	mov	r0, r3
2000f646:	3710      	adds	r7, #16
2000f648:	46bd      	mov	sp, r7
2000f64a:	bdb0      	pop	{r4, r5, r7, pc}
2000f64c:	40023800 	.word	0x40023800
2000f650:	00f42400 	.word	0x00f42400
2000f654:	017d7840 	.word	0x017d7840

2000f658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2000f658:	b480      	push	{r7}
2000f65a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
2000f65c:	4b03      	ldr	r3, [pc, #12]	; (2000f66c <HAL_RCC_GetHCLKFreq+0x14>)
2000f65e:	681b      	ldr	r3, [r3, #0]
}
2000f660:	4618      	mov	r0, r3
2000f662:	46bd      	mov	sp, r7
2000f664:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f668:	4770      	bx	lr
2000f66a:	bf00      	nop
2000f66c:	200100b4 	.word	0x200100b4

2000f670 <_ZN9rust_main12toggle_pin1317h3e58643117beb90bE>:
    fn trace_pin13_c();
    fn trace_pin15_c();
    fn delay_c();
}

fn toggle_pin13() {unsafe {toggle_pin13_c();}}
2000f670:	b580      	push	{r7, lr}
2000f672:	466f      	mov	r7, sp
2000f674:	f000 f89c 	bl	2000f7b0 <toggle_pin13_c>
2000f678:	bd80      	pop	{r7, pc}

2000f67a <_ZN9rust_main12toggle_pin1517he7df832cc2f8a4b4E>:
fn toggle_pin15() {unsafe {toggle_pin15_c();}}
2000f67a:	b580      	push	{r7, lr}
2000f67c:	466f      	mov	r7, sp
2000f67e:	f000 f8a3 	bl	2000f7c8 <toggle_pin15_c>
2000f682:	bd80      	pop	{r7, pc}

2000f684 <_ZN9rust_main11trace_pin1317h60207217fbc4d903E>:
fn trace_pin13() {unsafe {trace_pin13_c();}}
2000f684:	b580      	push	{r7, lr}
2000f686:	466f      	mov	r7, sp
2000f688:	f000 f8aa 	bl	2000f7e0 <trace_pin13_c>
2000f68c:	bd80      	pop	{r7, pc}

2000f68e <_ZN9rust_main11trace_pin1517h8b50953a0ba7a47aE>:
fn trace_pin15() {unsafe {trace_pin15_c();}}
2000f68e:	b580      	push	{r7, lr}
2000f690:	466f      	mov	r7, sp
2000f692:	f000 f8b5 	bl	2000f800 <trace_pin15_c>
2000f696:	bd80      	pop	{r7, pc}

2000f698 <_ZN9rust_main5delay17hb55c58dd86ca961fE>:
fn delay() {unsafe {delay_c();}}
2000f698:	b580      	push	{r7, lr}
2000f69a:	466f      	mov	r7, sp
2000f69c:	f000 f8c0 	bl	2000f820 <delay_c>
2000f6a0:	bd80      	pop	{r7, pc}

2000f6a2 <rust_main>:


#[no_mangle]
pub extern fn rust_main() {
2000f6a2:	b580      	push	{r7, lr}
2000f6a4:	466f      	mov	r7, sp
    toggle_pin13();
2000f6a6:	f7ff ffe3 	bl	2000f670 <_ZN9rust_main12toggle_pin1317h3e58643117beb90bE>
    toggle_pin15();
2000f6aa:	f7ff ffe6 	bl	2000f67a <_ZN9rust_main12toggle_pin1517he7df832cc2f8a4b4E>
    trace_pin13();
2000f6ae:	f7ff ffe9 	bl	2000f684 <_ZN9rust_main11trace_pin1317h60207217fbc4d903E>
    trace_pin15();
2000f6b2:	f7ff ffec 	bl	2000f68e <_ZN9rust_main11trace_pin1517h8b50953a0ba7a47aE>
    delay();
2000f6b6:	f7ff ffef 	bl	2000f698 <_ZN9rust_main5delay17hb55c58dd86ca961fE>
}
2000f6ba:	bd80      	pop	{r7, pc}

2000f6bc <memset>:
2000f6bc:	f000 b800 	b.w	2000f6c0 <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE>

2000f6c0 <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE>:
2000f6c0:	b5d0      	push	{r4, r6, r7, lr}
2000f6c2:	af02      	add	r7, sp, #8
2000f6c4:	2a0f      	cmp	r2, #15
2000f6c6:	d935      	bls.n	2000f734 <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x74>
2000f6c8:	4243      	negs	r3, r0
2000f6ca:	f013 0e03 	ands.w	lr, r3, #3
2000f6ce:	eb00 0c0e 	add.w	ip, r0, lr
2000f6d2:	d00f      	beq.n	2000f6f4 <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x34>
2000f6d4:	4603      	mov	r3, r0
2000f6d6:	f803 1b01 	strb.w	r1, [r3], #1
2000f6da:	4563      	cmp	r3, ip
2000f6dc:	bf3f      	itttt	cc
2000f6de:	f803 1b01 	strbcc.w	r1, [r3], #1
2000f6e2:	4563      	cmpcc	r3, ip
2000f6e4:	f803 1b01 	strbcc.w	r1, [r3], #1
2000f6e8:	4563      	cmpcc	r3, ip
2000f6ea:	d203      	bcs.n	2000f6f4 <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x34>
2000f6ec:	f803 1b01 	strb.w	r1, [r3], #1
2000f6f0:	4563      	cmp	r3, ip
2000f6f2:	d3f0      	bcc.n	2000f6d6 <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x16>
2000f6f4:	eba2 0e0e 	sub.w	lr, r2, lr
2000f6f8:	f02e 0203 	bic.w	r2, lr, #3
2000f6fc:	eb0c 0302 	add.w	r3, ip, r2
2000f700:	2a01      	cmp	r2, #1
2000f702:	db13      	blt.n	2000f72c <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x6c>
2000f704:	b2ca      	uxtb	r2, r1
2000f706:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
2000f70a:	4362      	muls	r2, r4
2000f70c:	f84c 2b04 	str.w	r2, [ip], #4
2000f710:	459c      	cmp	ip, r3
2000f712:	d20b      	bcs.n	2000f72c <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x6c>
2000f714:	f84c 2b04 	str.w	r2, [ip], #4
2000f718:	459c      	cmp	ip, r3
2000f71a:	bf3c      	itt	cc
2000f71c:	f84c 2b04 	strcc.w	r2, [ip], #4
2000f720:	459c      	cmpcc	ip, r3
2000f722:	d203      	bcs.n	2000f72c <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x6c>
2000f724:	f84c 2b04 	str.w	r2, [ip], #4
2000f728:	459c      	cmp	ip, r3
2000f72a:	d3ef      	bcc.n	2000f70c <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x4c>
2000f72c:	f00e 0203 	and.w	r2, lr, #3
2000f730:	b912      	cbnz	r2, 2000f738 <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x78>
2000f732:	e012      	b.n	2000f75a <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x9a>
2000f734:	4603      	mov	r3, r0
2000f736:	b182      	cbz	r2, 2000f75a <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x9a>
2000f738:	441a      	add	r2, r3
2000f73a:	f803 1b01 	strb.w	r1, [r3], #1
2000f73e:	4293      	cmp	r3, r2
2000f740:	d20b      	bcs.n	2000f75a <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x9a>
2000f742:	f803 1b01 	strb.w	r1, [r3], #1
2000f746:	4293      	cmp	r3, r2
2000f748:	bf3c      	itt	cc
2000f74a:	f803 1b01 	strbcc.w	r1, [r3], #1
2000f74e:	4293      	cmpcc	r3, r2
2000f750:	d203      	bcs.n	2000f75a <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x9a>
2000f752:	f803 1b01 	strb.w	r1, [r3], #1
2000f756:	4293      	cmp	r3, r2
2000f758:	d3ef      	bcc.n	2000f73a <_ZN17compiler_builtins3mem6memset17h1a389949a90f1f8bE+0x7a>
2000f75a:	bdd0      	pop	{r4, r6, r7, pc}

2000f75c <_ZN17compiler_builtins3mem6strlen17h1851632f923ccacfE>:
2000f75c:	4601      	mov	r1, r0
2000f75e:	7800      	ldrb	r0, [r0, #0]
2000f760:	2800      	cmp	r0, #0
2000f762:	bf04      	itt	eq
2000f764:	2000      	moveq	r0, #0
2000f766:	4770      	bxeq	lr
2000f768:	2002      	movs	r0, #2
2000f76a:	180a      	adds	r2, r1, r0
2000f76c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
2000f770:	2b00      	cmp	r3, #0
2000f772:	bf04      	itt	eq
2000f774:	3801      	subeq	r0, #1
2000f776:	4770      	bxeq	lr
2000f778:	5c0b      	ldrb	r3, [r1, r0]
2000f77a:	2b00      	cmp	r3, #0
2000f77c:	bf08      	it	eq
2000f77e:	4770      	bxeq	lr
2000f780:	7853      	ldrb	r3, [r2, #1]
2000f782:	2b00      	cmp	r3, #0
2000f784:	bf04      	itt	eq
2000f786:	3001      	addeq	r0, #1
2000f788:	4770      	bxeq	lr
2000f78a:	7892      	ldrb	r2, [r2, #2]
2000f78c:	3004      	adds	r0, #4
2000f78e:	2a00      	cmp	r2, #0
2000f790:	d1eb      	bne.n	2000f76a <_ZN17compiler_builtins3mem6strlen17h1851632f923ccacfE+0xe>
2000f792:	3802      	subs	r0, #2
2000f794:	4770      	bx	lr

2000f796 <strlen>:
2000f796:	f7ff bfe1 	b.w	2000f75c <_ZN17compiler_builtins3mem6strlen17h1851632f923ccacfE>

2000f79a <__aeabi_uldivmod>:
2000f79a:	b510      	push	{r4, lr}
2000f79c:	b084      	sub	sp, #16
2000f79e:	ac02      	add	r4, sp, #8
2000f7a0:	9400      	str	r4, [sp, #0]
2000f7a2:	f000 f844 	bl	2000f82e <__udivmoddi4>
2000f7a6:	9a02      	ldr	r2, [sp, #8]
2000f7a8:	9b03      	ldr	r3, [sp, #12]
2000f7aa:	b004      	add	sp, #16
2000f7ac:	bd10      	pop	{r4, pc}
2000f7ae:	defe      	udf	#254	; 0xfe

2000f7b0 <toggle_pin13_c>:
#include "gpio.h"
#include "stm32f4xx_hal.h"
#include "trace.h"
#define STM32F423xx 

void toggle_pin13_c() {
2000f7b0:	b580      	push	{r7, lr}
2000f7b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
2000f7b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000f7b8:	4802      	ldr	r0, [pc, #8]	; (2000f7c4 <toggle_pin13_c+0x14>)
2000f7ba:	f7ff faec 	bl	2000ed96 <HAL_GPIO_TogglePin>
}
2000f7be:	bf00      	nop
2000f7c0:	bd80      	pop	{r7, pc}
2000f7c2:	bf00      	nop
2000f7c4:	40020c00 	.word	0x40020c00

2000f7c8 <toggle_pin15_c>:

void toggle_pin15_c() {
2000f7c8:	b580      	push	{r7, lr}
2000f7ca:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
2000f7cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000f7d0:	4802      	ldr	r0, [pc, #8]	; (2000f7dc <toggle_pin15_c+0x14>)
2000f7d2:	f7ff fae0 	bl	2000ed96 <HAL_GPIO_TogglePin>
}
2000f7d6:	bf00      	nop
2000f7d8:	bd80      	pop	{r7, pc}
2000f7da:	bf00      	nop
2000f7dc:	40020c00 	.word	0x40020c00

2000f7e0 <trace_pin13_c>:

void trace_pin13_c() {
2000f7e0:	b580      	push	{r7, lr}
2000f7e2:	af00      	add	r7, sp, #0
	SDK_TRACE_Timestamp(LED1, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13));
2000f7e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000f7e8:	4804      	ldr	r0, [pc, #16]	; (2000f7fc <trace_pin13_c+0x1c>)
2000f7ea:	f7ff faa3 	bl	2000ed34 <HAL_GPIO_ReadPin>
2000f7ee:	4603      	mov	r3, r0
2000f7f0:	4619      	mov	r1, r3
2000f7f2:	2001      	movs	r0, #1
2000f7f4:	f7fe fe4c 	bl	2000e490 <SDK_TRACE_Timestamp>
}
2000f7f8:	bf00      	nop
2000f7fa:	bd80      	pop	{r7, pc}
2000f7fc:	40020c00 	.word	0x40020c00

2000f800 <trace_pin15_c>:

void trace_pin15_c() {
2000f800:	b580      	push	{r7, lr}
2000f802:	af00      	add	r7, sp, #0
	SDK_TRACE_Timestamp(LED3, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15));
2000f804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000f808:	4804      	ldr	r0, [pc, #16]	; (2000f81c <trace_pin15_c+0x1c>)
2000f80a:	f7ff fa93 	bl	2000ed34 <HAL_GPIO_ReadPin>
2000f80e:	4603      	mov	r3, r0
2000f810:	4619      	mov	r1, r3
2000f812:	2003      	movs	r0, #3
2000f814:	f7fe fe3c 	bl	2000e490 <SDK_TRACE_Timestamp>
}
2000f818:	bf00      	nop
2000f81a:	bd80      	pop	{r7, pc}
2000f81c:	40020c00 	.word	0x40020c00

2000f820 <delay_c>:

void delay_c() {
2000f820:	b580      	push	{r7, lr}
2000f822:	af00      	add	r7, sp, #0
	HAL_Delay(250);
2000f824:	20fa      	movs	r0, #250	; 0xfa
2000f826:	f7fe ffdf 	bl	2000e7e8 <HAL_Delay>
}
2000f82a:	bf00      	nop
2000f82c:	bd80      	pop	{r7, pc}

2000f82e <__udivmoddi4>:
2000f82e:	b580      	push	{r7, lr}
2000f830:	466f      	mov	r7, sp
2000f832:	f000 f808 	bl	2000f846 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E>
2000f836:	f8d7 c008 	ldr.w	ip, [r7, #8]
2000f83a:	f1bc 0f00 	cmp.w	ip, #0
2000f83e:	bf18      	it	ne
2000f840:	e9cc 2300 	strdne	r2, r3, [ip]
2000f844:	bd80      	pop	{r7, pc}

2000f846 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E>:
2000f846:	b5f0      	push	{r4, r5, r6, r7, lr}
2000f848:	af03      	add	r7, sp, #12
2000f84a:	e92d 0700 	stmdb	sp!, {r8, r9, sl}
2000f84e:	468e      	mov	lr, r1
2000f850:	4684      	mov	ip, r0
2000f852:	b112      	cbz	r2, 2000f85a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x14>
2000f854:	2b00      	cmp	r3, #0
2000f856:	f000 8084 	beq.w	2000f962 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x11c>
2000f85a:	ebbc 0102 	subs.w	r1, ip, r2
2000f85e:	f04f 0000 	mov.w	r0, #0
2000f862:	eb7e 0103 	sbcs.w	r1, lr, r3
2000f866:	f0c0 80f8 	bcc.w	2000fa5a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x214>
2000f86a:	f1be 0f00 	cmp.w	lr, #0
2000f86e:	f000 80f4 	beq.w	2000fa5a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x214>
2000f872:	fabe f08e 	clz	r0, lr
2000f876:	fab3 f183 	clz	r1, r3
2000f87a:	1a08      	subs	r0, r1, r0
2000f87c:	f000 043f 	and.w	r4, r0, #63	; 0x3f
2000f880:	f000 001f 	and.w	r0, r0, #31
2000f884:	f1c4 0520 	rsb	r5, r4, #32
2000f888:	fa03 f104 	lsl.w	r1, r3, r4
2000f88c:	fa02 f904 	lsl.w	r9, r2, r4
2000f890:	fa22 f505 	lsr.w	r5, r2, r5
2000f894:	ea45 0a01 	orr.w	sl, r5, r1
2000f898:	f1b4 0520 	subs.w	r5, r4, #32
2000f89c:	bf58      	it	pl
2000f89e:	fa02 fa05 	lslpl.w	sl, r2, r5
2000f8a2:	f04f 0501 	mov.w	r5, #1
2000f8a6:	bf58      	it	pl
2000f8a8:	f04f 0900 	movpl.w	r9, #0
2000f8ac:	fa05 f800 	lsl.w	r8, r5, r0
2000f8b0:	2000      	movs	r0, #0
2000f8b2:	e009      	b.n	2000f8c8 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x82>
2000f8b4:	46b4      	mov	ip, r6
2000f8b6:	46ae      	mov	lr, r5
2000f8b8:	ea4f 1119 	mov.w	r1, r9, lsr #4
2000f8bc:	ea41 790a 	orr.w	r9, r1, sl, lsl #28
2000f8c0:	ea4f 1818 	mov.w	r8, r8, lsr #4
2000f8c4:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
2000f8c8:	ebbc 0509 	subs.w	r5, ip, r9
2000f8cc:	eb6e 060a 	sbc.w	r6, lr, sl
2000f8d0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
2000f8d4:	dd08      	ble.n	2000f8e8 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0xa2>
2000f8d6:	1aa9      	subs	r1, r5, r2
2000f8d8:	ea40 0008 	orr.w	r0, r0, r8
2000f8dc:	eb76 0103 	sbcs.w	r1, r6, r3
2000f8e0:	46ac      	mov	ip, r5
2000f8e2:	46b6      	mov	lr, r6
2000f8e4:	d202      	bcs.n	2000f8ec <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0xa6>
2000f8e6:	e0b8      	b.n	2000fa5a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x214>
2000f8e8:	4665      	mov	r5, ip
2000f8ea:	4676      	mov	r6, lr
2000f8ec:	ea5f 045a 	movs.w	r4, sl, lsr #1
2000f8f0:	ea4f 0139 	mov.w	r1, r9, rrx
2000f8f4:	ebb5 0c01 	subs.w	ip, r5, r1
2000f8f8:	eb76 0e04 	sbcs.w	lr, r6, r4
2000f8fc:	d407      	bmi.n	2000f90e <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0xc8>
2000f8fe:	ebbc 0102 	subs.w	r1, ip, r2
2000f902:	ea40 0058 	orr.w	r0, r0, r8, lsr #1
2000f906:	eb7e 0103 	sbcs.w	r1, lr, r3
2000f90a:	d202      	bcs.n	2000f912 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0xcc>
2000f90c:	e0a5      	b.n	2000fa5a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x214>
2000f90e:	46ac      	mov	ip, r5
2000f910:	46b6      	mov	lr, r6
2000f912:	ea4f 0199 	mov.w	r1, r9, lsr #2
2000f916:	ea41 718a 	orr.w	r1, r1, sl, lsl #30
2000f91a:	ebbc 0601 	subs.w	r6, ip, r1
2000f91e:	eb6e 059a 	sbc.w	r5, lr, sl, lsr #2
2000f922:	2d00      	cmp	r5, #0
2000f924:	d408      	bmi.n	2000f938 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0xf2>
2000f926:	1ab1      	subs	r1, r6, r2
2000f928:	ea40 0098 	orr.w	r0, r0, r8, lsr #2
2000f92c:	eb75 0103 	sbcs.w	r1, r5, r3
2000f930:	46b4      	mov	ip, r6
2000f932:	46ae      	mov	lr, r5
2000f934:	d202      	bcs.n	2000f93c <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0xf6>
2000f936:	e090      	b.n	2000fa5a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x214>
2000f938:	4666      	mov	r6, ip
2000f93a:	4675      	mov	r5, lr
2000f93c:	ea4f 01d9 	mov.w	r1, r9, lsr #3
2000f940:	ea41 714a 	orr.w	r1, r1, sl, lsl #29
2000f944:	ebb6 0c01 	subs.w	ip, r6, r1
2000f948:	eb65 0eda 	sbc.w	lr, r5, sl, lsr #3
2000f94c:	f1be 0f00 	cmp.w	lr, #0
2000f950:	d4b0      	bmi.n	2000f8b4 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x6e>
2000f952:	ebbc 0102 	subs.w	r1, ip, r2
2000f956:	ea40 00d8 	orr.w	r0, r0, r8, lsr #3
2000f95a:	eb7e 0103 	sbcs.w	r1, lr, r3
2000f95e:	d2ab      	bcs.n	2000f8b8 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x72>
2000f960:	e07b      	b.n	2000fa5a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x214>
2000f962:	f1be 0f00 	cmp.w	lr, #0
2000f966:	d072      	beq.n	2000fa4e <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x208>
2000f968:	4596      	cmp	lr, r2
2000f96a:	d27c      	bcs.n	2000fa66 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x220>
2000f96c:	fabe f08e 	clz	r0, lr
2000f970:	fab2 f182 	clz	r1, r2
2000f974:	1a08      	subs	r0, r1, r0
2000f976:	f100 0120 	add.w	r1, r0, #32
2000f97a:	bf08      	it	eq
2000f97c:	211f      	moveq	r1, #31
2000f97e:	f001 043f 	and.w	r4, r1, #63	; 0x3f
2000f982:	f001 011f 	and.w	r1, r1, #31
2000f986:	fa03 f004 	lsl.w	r0, r3, r4
2000f98a:	f1c4 0320 	rsb	r3, r4, #32
2000f98e:	fa02 f904 	lsl.w	r9, r2, r4
2000f992:	fa22 f303 	lsr.w	r3, r2, r3
2000f996:	4318      	orrs	r0, r3
2000f998:	f1b4 0320 	subs.w	r3, r4, #32
2000f99c:	f04f 0401 	mov.w	r4, #1
2000f9a0:	fa04 f801 	lsl.w	r8, r4, r1
2000f9a4:	f04f 0100 	mov.w	r1, #0
2000f9a8:	bf58      	it	pl
2000f9aa:	fa02 f003 	lslpl.w	r0, r2, r3
2000f9ae:	bf58      	it	pl
2000f9b0:	f04f 0900 	movpl.w	r9, #0
2000f9b4:	e008      	b.n	2000f9c8 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x182>
2000f9b6:	46ac      	mov	ip, r5
2000f9b8:	46b6      	mov	lr, r6
2000f9ba:	ea4f 1319 	mov.w	r3, r9, lsr #4
2000f9be:	ea43 7900 	orr.w	r9, r3, r0, lsl #28
2000f9c2:	ea4f 1818 	mov.w	r8, r8, lsr #4
2000f9c6:	0900      	lsrs	r0, r0, #4
2000f9c8:	ebbc 0509 	subs.w	r5, ip, r9
2000f9cc:	eb6e 0600 	sbc.w	r6, lr, r0
2000f9d0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
2000f9d4:	dd04      	ble.n	2000f9e0 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x19a>
2000f9d6:	ea41 0108 	orr.w	r1, r1, r8
2000f9da:	46ac      	mov	ip, r5
2000f9dc:	b916      	cbnz	r6, 2000f9e4 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x19e>
2000f9de:	e030      	b.n	2000fa42 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x1fc>
2000f9e0:	4665      	mov	r5, ip
2000f9e2:	4676      	mov	r6, lr
2000f9e4:	ea5f 0450 	movs.w	r4, r0, lsr #1
2000f9e8:	ea4f 0339 	mov.w	r3, r9, rrx
2000f9ec:	ebb5 0c03 	subs.w	ip, r5, r3
2000f9f0:	eb66 0404 	sbc.w	r4, r6, r4
2000f9f4:	2c00      	cmp	r4, #0
2000f9f6:	d403      	bmi.n	2000fa00 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x1ba>
2000f9f8:	ea41 0158 	orr.w	r1, r1, r8, lsr #1
2000f9fc:	d102      	bne.n	2000fa04 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x1be>
2000f9fe:	e020      	b.n	2000fa42 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x1fc>
2000fa00:	46ac      	mov	ip, r5
2000fa02:	4634      	mov	r4, r6
2000fa04:	ea4f 0399 	mov.w	r3, r9, lsr #2
2000fa08:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
2000fa0c:	ebbc 0503 	subs.w	r5, ip, r3
2000fa10:	eb64 0690 	sbc.w	r6, r4, r0, lsr #2
2000fa14:	2e00      	cmp	r6, #0
2000fa16:	d404      	bmi.n	2000fa22 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x1dc>
2000fa18:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
2000fa1c:	46ac      	mov	ip, r5
2000fa1e:	d102      	bne.n	2000fa26 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x1e0>
2000fa20:	e00f      	b.n	2000fa42 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x1fc>
2000fa22:	4665      	mov	r5, ip
2000fa24:	4626      	mov	r6, r4
2000fa26:	ea4f 03d9 	mov.w	r3, r9, lsr #3
2000fa2a:	ea43 7340 	orr.w	r3, r3, r0, lsl #29
2000fa2e:	ebb5 0c03 	subs.w	ip, r5, r3
2000fa32:	eb66 0ed0 	sbc.w	lr, r6, r0, lsr #3
2000fa36:	f1be 0f00 	cmp.w	lr, #0
2000fa3a:	d4bc      	bmi.n	2000f9b6 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x170>
2000fa3c:	ea41 01d8 	orr.w	r1, r1, r8, lsr #3
2000fa40:	d1bb      	bne.n	2000f9ba <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x174>
2000fa42:	fbbc f0f2 	udiv	r0, ip, r2
2000fa46:	fb00 cc12 	mls	ip, r0, r2, ip
2000fa4a:	4308      	orrs	r0, r1
2000fa4c:	e003      	b.n	2000fa56 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x210>
2000fa4e:	fbbc f0f2 	udiv	r0, ip, r2
2000fa52:	fb00 cc12 	mls	ip, r0, r2, ip
2000fa56:	f04f 0e00 	mov.w	lr, #0
2000fa5a:	2100      	movs	r1, #0
2000fa5c:	4662      	mov	r2, ip
2000fa5e:	4673      	mov	r3, lr
2000fa60:	e8bd 0700 	ldmia.w	sp!, {r8, r9, sl}
2000fa64:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000fa66:	d10b      	bne.n	2000fa80 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x23a>
2000fa68:	fbbc f0fe 	udiv	r0, ip, lr
2000fa6c:	2101      	movs	r1, #1
2000fa6e:	fb00 cc1e 	mls	ip, r0, lr, ip
2000fa72:	f04f 0e00 	mov.w	lr, #0
2000fa76:	4662      	mov	r2, ip
2000fa78:	4673      	mov	r3, lr
2000fa7a:	e8bd 0700 	ldmia.w	sp!, {r8, r9, sl}
2000fa7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000fa80:	fbbe f1f2 	udiv	r1, lr, r2
2000fa84:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
2000fa88:	fb01 ee12 	mls	lr, r1, r2, lr
2000fa8c:	d218      	bcs.n	2000fac0 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x27a>
2000fa8e:	ea4f 400e 	mov.w	r0, lr, lsl #16
2000fa92:	f04f 0e00 	mov.w	lr, #0
2000fa96:	ea40 401c 	orr.w	r0, r0, ip, lsr #16
2000fa9a:	fbb0 f3f2 	udiv	r3, r0, r2
2000fa9e:	fb03 0012 	mls	r0, r3, r2, r0
2000faa2:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
2000faa6:	eacc 4000 	pkhbt	r0, ip, r0, lsl #16
2000faaa:	fbb0 f6f2 	udiv	r6, r0, r2
2000faae:	fb06 0c12 	mls	ip, r6, r2, r0
2000fab2:	ea46 4003 	orr.w	r0, r6, r3, lsl #16
2000fab6:	4662      	mov	r2, ip
2000fab8:	4673      	mov	r3, lr
2000faba:	e8bd 0700 	ldmia.w	sp!, {r8, r9, sl}
2000fabe:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000fac0:	ebbc 0002 	subs.w	r0, ip, r2
2000fac4:	eb7e 0003 	sbcs.w	r0, lr, r3
2000fac8:	d205      	bcs.n	2000fad6 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x290>
2000faca:	2000      	movs	r0, #0
2000facc:	4662      	mov	r2, ip
2000face:	4673      	mov	r3, lr
2000fad0:	e8bd 0700 	ldmia.w	sp!, {r8, r9, sl}
2000fad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000fad6:	07d8      	lsls	r0, r3, #31
2000fad8:	ea40 0a52 	orr.w	sl, r0, r2, lsr #1
2000fadc:	ea4f 79c2 	mov.w	r9, r2, lsl #31
2000fae0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
2000fae4:	2000      	movs	r0, #0
2000fae6:	e009      	b.n	2000fafc <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x2b6>
2000fae8:	46b4      	mov	ip, r6
2000faea:	46a6      	mov	lr, r4
2000faec:	ea4f 1319 	mov.w	r3, r9, lsr #4
2000faf0:	ea43 790a 	orr.w	r9, r3, sl, lsl #28
2000faf4:	ea4f 1818 	mov.w	r8, r8, lsr #4
2000faf8:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
2000fafc:	ebbc 0609 	subs.w	r6, ip, r9
2000fb00:	eb6e 040a 	sbc.w	r4, lr, sl
2000fb04:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
2000fb08:	dd04      	ble.n	2000fb14 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x2ce>
2000fb0a:	ea40 0008 	orr.w	r0, r0, r8
2000fb0e:	46b4      	mov	ip, r6
2000fb10:	b914      	cbnz	r4, 2000fb18 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x2d2>
2000fb12:	e030      	b.n	2000fb76 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x330>
2000fb14:	4666      	mov	r6, ip
2000fb16:	4674      	mov	r4, lr
2000fb18:	ea5f 055a 	movs.w	r5, sl, lsr #1
2000fb1c:	ea4f 0339 	mov.w	r3, r9, rrx
2000fb20:	ebb6 0c03 	subs.w	ip, r6, r3
2000fb24:	eb64 0505 	sbc.w	r5, r4, r5
2000fb28:	2d00      	cmp	r5, #0
2000fb2a:	d403      	bmi.n	2000fb34 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x2ee>
2000fb2c:	ea40 0058 	orr.w	r0, r0, r8, lsr #1
2000fb30:	d102      	bne.n	2000fb38 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x2f2>
2000fb32:	e020      	b.n	2000fb76 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x330>
2000fb34:	46b4      	mov	ip, r6
2000fb36:	4625      	mov	r5, r4
2000fb38:	ea4f 0399 	mov.w	r3, r9, lsr #2
2000fb3c:	ea43 738a 	orr.w	r3, r3, sl, lsl #30
2000fb40:	ebbc 0603 	subs.w	r6, ip, r3
2000fb44:	eb65 049a 	sbc.w	r4, r5, sl, lsr #2
2000fb48:	2c00      	cmp	r4, #0
2000fb4a:	d404      	bmi.n	2000fb56 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x310>
2000fb4c:	ea40 0098 	orr.w	r0, r0, r8, lsr #2
2000fb50:	46b4      	mov	ip, r6
2000fb52:	d102      	bne.n	2000fb5a <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x314>
2000fb54:	e00f      	b.n	2000fb76 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x330>
2000fb56:	4666      	mov	r6, ip
2000fb58:	462c      	mov	r4, r5
2000fb5a:	ea4f 03d9 	mov.w	r3, r9, lsr #3
2000fb5e:	ea43 734a 	orr.w	r3, r3, sl, lsl #29
2000fb62:	ebb6 0c03 	subs.w	ip, r6, r3
2000fb66:	eb64 0eda 	sbc.w	lr, r4, sl, lsr #3
2000fb6a:	f1be 0f00 	cmp.w	lr, #0
2000fb6e:	d4bb      	bmi.n	2000fae8 <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x2a2>
2000fb70:	ea40 00d8 	orr.w	r0, r0, r8, lsr #3
2000fb74:	d1ba      	bne.n	2000faec <_ZN17compiler_builtins3int19specialized_div_rem11u64_div_rem17hec78d501f5b2d139E+0x2a6>
2000fb76:	fbbc f3f2 	udiv	r3, ip, r2
2000fb7a:	f04f 0e00 	mov.w	lr, #0
2000fb7e:	fb03 cc12 	mls	ip, r3, r2, ip
2000fb82:	4318      	orrs	r0, r3
2000fb84:	4662      	mov	r2, ip
2000fb86:	4673      	mov	r3, lr
2000fb88:	e8bd 0700 	ldmia.w	sp!, {r8, r9, sl}
2000fb8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

2000fb90 <_init>:
2000fb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000fb92:	bf00      	nop
2000fb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000fb96:	bc08      	pop	{r3}
2000fb98:	469e      	mov	lr, r3
2000fb9a:	4770      	bx	lr

2000fb9c <_fini>:
2000fb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000fb9e:	bf00      	nop
2000fba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000fba2:	bc08      	pop	{r3}
2000fba4:	469e      	mov	lr, r3
2000fba6:	4770      	bx	lr
