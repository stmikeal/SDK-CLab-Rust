
SDK_cLAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  2000d000  2000d000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d4  2000d190  2000d190  0000d190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  2000f664  2000f664  0000f664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2000faf4  2000faf4  0000fb88  2**0
                  CONTENTS
  4 .ARM          00000008  2000faf4  2000faf4  0000faf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  2000fafc  2000fb88  0000fb88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  2000fafc  2000fafc  0000fafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  2000fb00  2000fb00  0000fb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  2000fb04  2000fb04  0000fb04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000fb88  2000fb88  0000fb88  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000fccc  2000fccc  0000fb88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000fb88  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004870  00000000  00000000  0000fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014df  00000000  00000000  00014428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004e0  00000000  00000000  00015908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  00015de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002027f  00000000  00000000  000161e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e67  00000000  00000000  0003645f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c01d9  00000000  00000000  0003d2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd49f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001438  00000000  00000000  000fd4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

2000d190 <__do_global_dtors_aux>:
2000d190:	b510      	push	{r4, lr}
2000d192:	4c05      	ldr	r4, [pc, #20]	; (2000d1a8 <__do_global_dtors_aux+0x18>)
2000d194:	7823      	ldrb	r3, [r4, #0]
2000d196:	b933      	cbnz	r3, 2000d1a6 <__do_global_dtors_aux+0x16>
2000d198:	4b04      	ldr	r3, [pc, #16]	; (2000d1ac <__do_global_dtors_aux+0x1c>)
2000d19a:	b113      	cbz	r3, 2000d1a2 <__do_global_dtors_aux+0x12>
2000d19c:	4804      	ldr	r0, [pc, #16]	; (2000d1b0 <__do_global_dtors_aux+0x20>)
2000d19e:	f3af 8000 	nop.w
2000d1a2:	2301      	movs	r3, #1
2000d1a4:	7023      	strb	r3, [r4, #0]
2000d1a6:	bd10      	pop	{r4, pc}
2000d1a8:	2000fb88 	.word	0x2000fb88
2000d1ac:	00000000 	.word	0x00000000
2000d1b0:	2000f64c 	.word	0x2000f64c

2000d1b4 <frame_dummy>:
2000d1b4:	b508      	push	{r3, lr}
2000d1b6:	4b03      	ldr	r3, [pc, #12]	; (2000d1c4 <frame_dummy+0x10>)
2000d1b8:	b11b      	cbz	r3, 2000d1c2 <frame_dummy+0xe>
2000d1ba:	4903      	ldr	r1, [pc, #12]	; (2000d1c8 <frame_dummy+0x14>)
2000d1bc:	4803      	ldr	r0, [pc, #12]	; (2000d1cc <frame_dummy+0x18>)
2000d1be:	f3af 8000 	nop.w
2000d1c2:	bd08      	pop	{r3, pc}
2000d1c4:	00000000 	.word	0x00000000
2000d1c8:	2000fb8c 	.word	0x2000fb8c
2000d1cc:	2000f64c 	.word	0x2000f64c

2000d1d0 <strlen>:
2000d1d0:	4603      	mov	r3, r0
2000d1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
2000d1d6:	2a00      	cmp	r2, #0
2000d1d8:	d1fb      	bne.n	2000d1d2 <strlen+0x2>
2000d1da:	1a18      	subs	r0, r3, r0
2000d1dc:	3801      	subs	r0, #1
2000d1de:	4770      	bx	lr

2000d1e0 <memchr>:
2000d1e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000d1e4:	2a10      	cmp	r2, #16
2000d1e6:	db2b      	blt.n	2000d240 <memchr+0x60>
2000d1e8:	f010 0f07 	tst.w	r0, #7
2000d1ec:	d008      	beq.n	2000d200 <memchr+0x20>
2000d1ee:	f810 3b01 	ldrb.w	r3, [r0], #1
2000d1f2:	3a01      	subs	r2, #1
2000d1f4:	428b      	cmp	r3, r1
2000d1f6:	d02d      	beq.n	2000d254 <memchr+0x74>
2000d1f8:	f010 0f07 	tst.w	r0, #7
2000d1fc:	b342      	cbz	r2, 2000d250 <memchr+0x70>
2000d1fe:	d1f6      	bne.n	2000d1ee <memchr+0xe>
2000d200:	b4f0      	push	{r4, r5, r6, r7}
2000d202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
2000d206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2000d20a:	f022 0407 	bic.w	r4, r2, #7
2000d20e:	f07f 0700 	mvns.w	r7, #0
2000d212:	2300      	movs	r3, #0
2000d214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
2000d218:	3c08      	subs	r4, #8
2000d21a:	ea85 0501 	eor.w	r5, r5, r1
2000d21e:	ea86 0601 	eor.w	r6, r6, r1
2000d222:	fa85 f547 	uadd8	r5, r5, r7
2000d226:	faa3 f587 	sel	r5, r3, r7
2000d22a:	fa86 f647 	uadd8	r6, r6, r7
2000d22e:	faa5 f687 	sel	r6, r5, r7
2000d232:	b98e      	cbnz	r6, 2000d258 <memchr+0x78>
2000d234:	d1ee      	bne.n	2000d214 <memchr+0x34>
2000d236:	bcf0      	pop	{r4, r5, r6, r7}
2000d238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000d23c:	f002 0207 	and.w	r2, r2, #7
2000d240:	b132      	cbz	r2, 2000d250 <memchr+0x70>
2000d242:	f810 3b01 	ldrb.w	r3, [r0], #1
2000d246:	3a01      	subs	r2, #1
2000d248:	ea83 0301 	eor.w	r3, r3, r1
2000d24c:	b113      	cbz	r3, 2000d254 <memchr+0x74>
2000d24e:	d1f8      	bne.n	2000d242 <memchr+0x62>
2000d250:	2000      	movs	r0, #0
2000d252:	4770      	bx	lr
2000d254:	3801      	subs	r0, #1
2000d256:	4770      	bx	lr
2000d258:	2d00      	cmp	r5, #0
2000d25a:	bf06      	itte	eq
2000d25c:	4635      	moveq	r5, r6
2000d25e:	3803      	subeq	r0, #3
2000d260:	3807      	subne	r0, #7
2000d262:	f015 0f01 	tst.w	r5, #1
2000d266:	d107      	bne.n	2000d278 <memchr+0x98>
2000d268:	3001      	adds	r0, #1
2000d26a:	f415 7f80 	tst.w	r5, #256	; 0x100
2000d26e:	bf02      	ittt	eq
2000d270:	3001      	addeq	r0, #1
2000d272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
2000d276:	3001      	addeq	r0, #1
2000d278:	bcf0      	pop	{r4, r5, r6, r7}
2000d27a:	3801      	subs	r0, #1
2000d27c:	4770      	bx	lr
2000d27e:	bf00      	nop

2000d280 <__aeabi_uldivmod>:
2000d280:	b953      	cbnz	r3, 2000d298 <__aeabi_uldivmod+0x18>
2000d282:	b94a      	cbnz	r2, 2000d298 <__aeabi_uldivmod+0x18>
2000d284:	2900      	cmp	r1, #0
2000d286:	bf08      	it	eq
2000d288:	2800      	cmpeq	r0, #0
2000d28a:	bf1c      	itt	ne
2000d28c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
2000d290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
2000d294:	f000 b974 	b.w	2000d580 <__aeabi_idiv0>
2000d298:	f1ad 0c08 	sub.w	ip, sp, #8
2000d29c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
2000d2a0:	f000 f806 	bl	2000d2b0 <__udivmoddi4>
2000d2a4:	f8dd e004 	ldr.w	lr, [sp, #4]
2000d2a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
2000d2ac:	b004      	add	sp, #16
2000d2ae:	4770      	bx	lr

2000d2b0 <__udivmoddi4>:
2000d2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000d2b4:	9d08      	ldr	r5, [sp, #32]
2000d2b6:	4604      	mov	r4, r0
2000d2b8:	468e      	mov	lr, r1
2000d2ba:	2b00      	cmp	r3, #0
2000d2bc:	d14d      	bne.n	2000d35a <__udivmoddi4+0xaa>
2000d2be:	428a      	cmp	r2, r1
2000d2c0:	4694      	mov	ip, r2
2000d2c2:	d969      	bls.n	2000d398 <__udivmoddi4+0xe8>
2000d2c4:	fab2 f282 	clz	r2, r2
2000d2c8:	b152      	cbz	r2, 2000d2e0 <__udivmoddi4+0x30>
2000d2ca:	fa01 f302 	lsl.w	r3, r1, r2
2000d2ce:	f1c2 0120 	rsb	r1, r2, #32
2000d2d2:	fa20 f101 	lsr.w	r1, r0, r1
2000d2d6:	fa0c fc02 	lsl.w	ip, ip, r2
2000d2da:	ea41 0e03 	orr.w	lr, r1, r3
2000d2de:	4094      	lsls	r4, r2
2000d2e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
2000d2e4:	0c21      	lsrs	r1, r4, #16
2000d2e6:	fbbe f6f8 	udiv	r6, lr, r8
2000d2ea:	fa1f f78c 	uxth.w	r7, ip
2000d2ee:	fb08 e316 	mls	r3, r8, r6, lr
2000d2f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
2000d2f6:	fb06 f107 	mul.w	r1, r6, r7
2000d2fa:	4299      	cmp	r1, r3
2000d2fc:	d90a      	bls.n	2000d314 <__udivmoddi4+0x64>
2000d2fe:	eb1c 0303 	adds.w	r3, ip, r3
2000d302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
2000d306:	f080 811f 	bcs.w	2000d548 <__udivmoddi4+0x298>
2000d30a:	4299      	cmp	r1, r3
2000d30c:	f240 811c 	bls.w	2000d548 <__udivmoddi4+0x298>
2000d310:	3e02      	subs	r6, #2
2000d312:	4463      	add	r3, ip
2000d314:	1a5b      	subs	r3, r3, r1
2000d316:	b2a4      	uxth	r4, r4
2000d318:	fbb3 f0f8 	udiv	r0, r3, r8
2000d31c:	fb08 3310 	mls	r3, r8, r0, r3
2000d320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
2000d324:	fb00 f707 	mul.w	r7, r0, r7
2000d328:	42a7      	cmp	r7, r4
2000d32a:	d90a      	bls.n	2000d342 <__udivmoddi4+0x92>
2000d32c:	eb1c 0404 	adds.w	r4, ip, r4
2000d330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
2000d334:	f080 810a 	bcs.w	2000d54c <__udivmoddi4+0x29c>
2000d338:	42a7      	cmp	r7, r4
2000d33a:	f240 8107 	bls.w	2000d54c <__udivmoddi4+0x29c>
2000d33e:	4464      	add	r4, ip
2000d340:	3802      	subs	r0, #2
2000d342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
2000d346:	1be4      	subs	r4, r4, r7
2000d348:	2600      	movs	r6, #0
2000d34a:	b11d      	cbz	r5, 2000d354 <__udivmoddi4+0xa4>
2000d34c:	40d4      	lsrs	r4, r2
2000d34e:	2300      	movs	r3, #0
2000d350:	e9c5 4300 	strd	r4, r3, [r5]
2000d354:	4631      	mov	r1, r6
2000d356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d35a:	428b      	cmp	r3, r1
2000d35c:	d909      	bls.n	2000d372 <__udivmoddi4+0xc2>
2000d35e:	2d00      	cmp	r5, #0
2000d360:	f000 80ef 	beq.w	2000d542 <__udivmoddi4+0x292>
2000d364:	2600      	movs	r6, #0
2000d366:	e9c5 0100 	strd	r0, r1, [r5]
2000d36a:	4630      	mov	r0, r6
2000d36c:	4631      	mov	r1, r6
2000d36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d372:	fab3 f683 	clz	r6, r3
2000d376:	2e00      	cmp	r6, #0
2000d378:	d14a      	bne.n	2000d410 <__udivmoddi4+0x160>
2000d37a:	428b      	cmp	r3, r1
2000d37c:	d302      	bcc.n	2000d384 <__udivmoddi4+0xd4>
2000d37e:	4282      	cmp	r2, r0
2000d380:	f200 80f9 	bhi.w	2000d576 <__udivmoddi4+0x2c6>
2000d384:	1a84      	subs	r4, r0, r2
2000d386:	eb61 0303 	sbc.w	r3, r1, r3
2000d38a:	2001      	movs	r0, #1
2000d38c:	469e      	mov	lr, r3
2000d38e:	2d00      	cmp	r5, #0
2000d390:	d0e0      	beq.n	2000d354 <__udivmoddi4+0xa4>
2000d392:	e9c5 4e00 	strd	r4, lr, [r5]
2000d396:	e7dd      	b.n	2000d354 <__udivmoddi4+0xa4>
2000d398:	b902      	cbnz	r2, 2000d39c <__udivmoddi4+0xec>
2000d39a:	deff      	udf	#255	; 0xff
2000d39c:	fab2 f282 	clz	r2, r2
2000d3a0:	2a00      	cmp	r2, #0
2000d3a2:	f040 8092 	bne.w	2000d4ca <__udivmoddi4+0x21a>
2000d3a6:	eba1 010c 	sub.w	r1, r1, ip
2000d3aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000d3ae:	fa1f fe8c 	uxth.w	lr, ip
2000d3b2:	2601      	movs	r6, #1
2000d3b4:	0c20      	lsrs	r0, r4, #16
2000d3b6:	fbb1 f3f7 	udiv	r3, r1, r7
2000d3ba:	fb07 1113 	mls	r1, r7, r3, r1
2000d3be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
2000d3c2:	fb0e f003 	mul.w	r0, lr, r3
2000d3c6:	4288      	cmp	r0, r1
2000d3c8:	d908      	bls.n	2000d3dc <__udivmoddi4+0x12c>
2000d3ca:	eb1c 0101 	adds.w	r1, ip, r1
2000d3ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
2000d3d2:	d202      	bcs.n	2000d3da <__udivmoddi4+0x12a>
2000d3d4:	4288      	cmp	r0, r1
2000d3d6:	f200 80cb 	bhi.w	2000d570 <__udivmoddi4+0x2c0>
2000d3da:	4643      	mov	r3, r8
2000d3dc:	1a09      	subs	r1, r1, r0
2000d3de:	b2a4      	uxth	r4, r4
2000d3e0:	fbb1 f0f7 	udiv	r0, r1, r7
2000d3e4:	fb07 1110 	mls	r1, r7, r0, r1
2000d3e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
2000d3ec:	fb0e fe00 	mul.w	lr, lr, r0
2000d3f0:	45a6      	cmp	lr, r4
2000d3f2:	d908      	bls.n	2000d406 <__udivmoddi4+0x156>
2000d3f4:	eb1c 0404 	adds.w	r4, ip, r4
2000d3f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
2000d3fc:	d202      	bcs.n	2000d404 <__udivmoddi4+0x154>
2000d3fe:	45a6      	cmp	lr, r4
2000d400:	f200 80bb 	bhi.w	2000d57a <__udivmoddi4+0x2ca>
2000d404:	4608      	mov	r0, r1
2000d406:	eba4 040e 	sub.w	r4, r4, lr
2000d40a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
2000d40e:	e79c      	b.n	2000d34a <__udivmoddi4+0x9a>
2000d410:	f1c6 0720 	rsb	r7, r6, #32
2000d414:	40b3      	lsls	r3, r6
2000d416:	fa22 fc07 	lsr.w	ip, r2, r7
2000d41a:	ea4c 0c03 	orr.w	ip, ip, r3
2000d41e:	fa20 f407 	lsr.w	r4, r0, r7
2000d422:	fa01 f306 	lsl.w	r3, r1, r6
2000d426:	431c      	orrs	r4, r3
2000d428:	40f9      	lsrs	r1, r7
2000d42a:	ea4f 491c 	mov.w	r9, ip, lsr #16
2000d42e:	fa00 f306 	lsl.w	r3, r0, r6
2000d432:	fbb1 f8f9 	udiv	r8, r1, r9
2000d436:	0c20      	lsrs	r0, r4, #16
2000d438:	fa1f fe8c 	uxth.w	lr, ip
2000d43c:	fb09 1118 	mls	r1, r9, r8, r1
2000d440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
2000d444:	fb08 f00e 	mul.w	r0, r8, lr
2000d448:	4288      	cmp	r0, r1
2000d44a:	fa02 f206 	lsl.w	r2, r2, r6
2000d44e:	d90b      	bls.n	2000d468 <__udivmoddi4+0x1b8>
2000d450:	eb1c 0101 	adds.w	r1, ip, r1
2000d454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
2000d458:	f080 8088 	bcs.w	2000d56c <__udivmoddi4+0x2bc>
2000d45c:	4288      	cmp	r0, r1
2000d45e:	f240 8085 	bls.w	2000d56c <__udivmoddi4+0x2bc>
2000d462:	f1a8 0802 	sub.w	r8, r8, #2
2000d466:	4461      	add	r1, ip
2000d468:	1a09      	subs	r1, r1, r0
2000d46a:	b2a4      	uxth	r4, r4
2000d46c:	fbb1 f0f9 	udiv	r0, r1, r9
2000d470:	fb09 1110 	mls	r1, r9, r0, r1
2000d474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
2000d478:	fb00 fe0e 	mul.w	lr, r0, lr
2000d47c:	458e      	cmp	lr, r1
2000d47e:	d908      	bls.n	2000d492 <__udivmoddi4+0x1e2>
2000d480:	eb1c 0101 	adds.w	r1, ip, r1
2000d484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
2000d488:	d26c      	bcs.n	2000d564 <__udivmoddi4+0x2b4>
2000d48a:	458e      	cmp	lr, r1
2000d48c:	d96a      	bls.n	2000d564 <__udivmoddi4+0x2b4>
2000d48e:	3802      	subs	r0, #2
2000d490:	4461      	add	r1, ip
2000d492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
2000d496:	fba0 9402 	umull	r9, r4, r0, r2
2000d49a:	eba1 010e 	sub.w	r1, r1, lr
2000d49e:	42a1      	cmp	r1, r4
2000d4a0:	46c8      	mov	r8, r9
2000d4a2:	46a6      	mov	lr, r4
2000d4a4:	d356      	bcc.n	2000d554 <__udivmoddi4+0x2a4>
2000d4a6:	d053      	beq.n	2000d550 <__udivmoddi4+0x2a0>
2000d4a8:	b15d      	cbz	r5, 2000d4c2 <__udivmoddi4+0x212>
2000d4aa:	ebb3 0208 	subs.w	r2, r3, r8
2000d4ae:	eb61 010e 	sbc.w	r1, r1, lr
2000d4b2:	fa01 f707 	lsl.w	r7, r1, r7
2000d4b6:	fa22 f306 	lsr.w	r3, r2, r6
2000d4ba:	40f1      	lsrs	r1, r6
2000d4bc:	431f      	orrs	r7, r3
2000d4be:	e9c5 7100 	strd	r7, r1, [r5]
2000d4c2:	2600      	movs	r6, #0
2000d4c4:	4631      	mov	r1, r6
2000d4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d4ca:	f1c2 0320 	rsb	r3, r2, #32
2000d4ce:	40d8      	lsrs	r0, r3
2000d4d0:	fa0c fc02 	lsl.w	ip, ip, r2
2000d4d4:	fa21 f303 	lsr.w	r3, r1, r3
2000d4d8:	4091      	lsls	r1, r2
2000d4da:	4301      	orrs	r1, r0
2000d4dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000d4e0:	fa1f fe8c 	uxth.w	lr, ip
2000d4e4:	fbb3 f0f7 	udiv	r0, r3, r7
2000d4e8:	fb07 3610 	mls	r6, r7, r0, r3
2000d4ec:	0c0b      	lsrs	r3, r1, #16
2000d4ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
2000d4f2:	fb00 f60e 	mul.w	r6, r0, lr
2000d4f6:	429e      	cmp	r6, r3
2000d4f8:	fa04 f402 	lsl.w	r4, r4, r2
2000d4fc:	d908      	bls.n	2000d510 <__udivmoddi4+0x260>
2000d4fe:	eb1c 0303 	adds.w	r3, ip, r3
2000d502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
2000d506:	d22f      	bcs.n	2000d568 <__udivmoddi4+0x2b8>
2000d508:	429e      	cmp	r6, r3
2000d50a:	d92d      	bls.n	2000d568 <__udivmoddi4+0x2b8>
2000d50c:	3802      	subs	r0, #2
2000d50e:	4463      	add	r3, ip
2000d510:	1b9b      	subs	r3, r3, r6
2000d512:	b289      	uxth	r1, r1
2000d514:	fbb3 f6f7 	udiv	r6, r3, r7
2000d518:	fb07 3316 	mls	r3, r7, r6, r3
2000d51c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000d520:	fb06 f30e 	mul.w	r3, r6, lr
2000d524:	428b      	cmp	r3, r1
2000d526:	d908      	bls.n	2000d53a <__udivmoddi4+0x28a>
2000d528:	eb1c 0101 	adds.w	r1, ip, r1
2000d52c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
2000d530:	d216      	bcs.n	2000d560 <__udivmoddi4+0x2b0>
2000d532:	428b      	cmp	r3, r1
2000d534:	d914      	bls.n	2000d560 <__udivmoddi4+0x2b0>
2000d536:	3e02      	subs	r6, #2
2000d538:	4461      	add	r1, ip
2000d53a:	1ac9      	subs	r1, r1, r3
2000d53c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
2000d540:	e738      	b.n	2000d3b4 <__udivmoddi4+0x104>
2000d542:	462e      	mov	r6, r5
2000d544:	4628      	mov	r0, r5
2000d546:	e705      	b.n	2000d354 <__udivmoddi4+0xa4>
2000d548:	4606      	mov	r6, r0
2000d54a:	e6e3      	b.n	2000d314 <__udivmoddi4+0x64>
2000d54c:	4618      	mov	r0, r3
2000d54e:	e6f8      	b.n	2000d342 <__udivmoddi4+0x92>
2000d550:	454b      	cmp	r3, r9
2000d552:	d2a9      	bcs.n	2000d4a8 <__udivmoddi4+0x1f8>
2000d554:	ebb9 0802 	subs.w	r8, r9, r2
2000d558:	eb64 0e0c 	sbc.w	lr, r4, ip
2000d55c:	3801      	subs	r0, #1
2000d55e:	e7a3      	b.n	2000d4a8 <__udivmoddi4+0x1f8>
2000d560:	4646      	mov	r6, r8
2000d562:	e7ea      	b.n	2000d53a <__udivmoddi4+0x28a>
2000d564:	4620      	mov	r0, r4
2000d566:	e794      	b.n	2000d492 <__udivmoddi4+0x1e2>
2000d568:	4640      	mov	r0, r8
2000d56a:	e7d1      	b.n	2000d510 <__udivmoddi4+0x260>
2000d56c:	46d0      	mov	r8, sl
2000d56e:	e77b      	b.n	2000d468 <__udivmoddi4+0x1b8>
2000d570:	3b02      	subs	r3, #2
2000d572:	4461      	add	r1, ip
2000d574:	e732      	b.n	2000d3dc <__udivmoddi4+0x12c>
2000d576:	4630      	mov	r0, r6
2000d578:	e709      	b.n	2000d38e <__udivmoddi4+0xde>
2000d57a:	4464      	add	r4, ip
2000d57c:	3802      	subs	r0, #2
2000d57e:	e742      	b.n	2000d406 <__udivmoddi4+0x156>

2000d580 <__aeabi_idiv0>:
2000d580:	4770      	bx	lr
2000d582:	bf00      	nop

2000d584 <crc32stream>:
    0xBAD03605UL, 0xCDD70693UL, 0x54DE5729UL, 0x23D967BFUL, 
    0xB3667A2EUL, 0xC4614AB8UL, 0x5D681B02UL, 0x2A6F2B94UL, 
    0xB40BBE37UL, 0xC30C8EA1UL, 0x5A05DF1BUL, 0x2D02EF8DUL };

unsigned long crc32stream( unsigned char c, unsigned long crc )    
{
2000d584:	b480      	push	{r7}
2000d586:	b083      	sub	sp, #12
2000d588:	af00      	add	r7, sp, #0
2000d58a:	4603      	mov	r3, r0
2000d58c:	6039      	str	r1, [r7, #0]
2000d58e:	71fb      	strb	r3, [r7, #7]
    crc = ((crc>>8) & 0x00FFFFFF) ^ crc32_table[ (crc^c) & 0xFF ];
2000d590:	683b      	ldr	r3, [r7, #0]
2000d592:	0a1a      	lsrs	r2, r3, #8
2000d594:	79f9      	ldrb	r1, [r7, #7]
2000d596:	683b      	ldr	r3, [r7, #0]
2000d598:	404b      	eors	r3, r1
2000d59a:	b2db      	uxtb	r3, r3
2000d59c:	4906      	ldr	r1, [pc, #24]	; (2000d5b8 <crc32stream+0x34>)
2000d59e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
2000d5a2:	4053      	eors	r3, r2
2000d5a4:	603b      	str	r3, [r7, #0]
    return( crc^0xFFFFFFFF );
2000d5a6:	683b      	ldr	r3, [r7, #0]
2000d5a8:	43db      	mvns	r3, r3
}
2000d5aa:	4618      	mov	r0, r3
2000d5ac:	370c      	adds	r7, #12
2000d5ae:	46bd      	mov	sp, r7
2000d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d5b4:	4770      	bx	lr
2000d5b6:	bf00      	nop
2000d5b8:	2000f6b0 	.word	0x2000f6b0

2000d5bc <crc32>:


unsigned long crc32( unsigned char * buf, unsigned long len, unsigned long crc )    
{
2000d5bc:	b580      	push	{r7, lr}
2000d5be:	b086      	sub	sp, #24
2000d5c0:	af00      	add	r7, sp, #0
2000d5c2:	60f8      	str	r0, [r7, #12]
2000d5c4:	60b9      	str	r1, [r7, #8]
2000d5c6:	607a      	str	r2, [r7, #4]
unsigned long i;

    for( i = 0; i < len; i++ )
2000d5c8:	2300      	movs	r3, #0
2000d5ca:	617b      	str	r3, [r7, #20]
2000d5cc:	e00b      	b.n	2000d5e6 <crc32+0x2a>
	{
        crc = crc32stream( buf[ i ], crc );
2000d5ce:	68fa      	ldr	r2, [r7, #12]
2000d5d0:	697b      	ldr	r3, [r7, #20]
2000d5d2:	4413      	add	r3, r2
2000d5d4:	781b      	ldrb	r3, [r3, #0]
2000d5d6:	6879      	ldr	r1, [r7, #4]
2000d5d8:	4618      	mov	r0, r3
2000d5da:	f7ff ffd3 	bl	2000d584 <crc32stream>
2000d5de:	6078      	str	r0, [r7, #4]
    for( i = 0; i < len; i++ )
2000d5e0:	697b      	ldr	r3, [r7, #20]
2000d5e2:	3301      	adds	r3, #1
2000d5e4:	617b      	str	r3, [r7, #20]
2000d5e6:	697a      	ldr	r2, [r7, #20]
2000d5e8:	68bb      	ldr	r3, [r7, #8]
2000d5ea:	429a      	cmp	r2, r3
2000d5ec:	d3ef      	bcc.n	2000d5ce <crc32+0x12>
	}

    return crc;
2000d5ee:	687b      	ldr	r3, [r7, #4]
}
2000d5f0:	4618      	mov	r0, r3
2000d5f2:	3718      	adds	r7, #24
2000d5f4:	46bd      	mov	sp, r7
2000d5f6:	bd80      	pop	{r7, pc}

2000d5f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
2000d5f8:	b580      	push	{r7, lr}
2000d5fa:	b08a      	sub	sp, #40	; 0x28
2000d5fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000d5fe:	f107 0314 	add.w	r3, r7, #20
2000d602:	2200      	movs	r2, #0
2000d604:	601a      	str	r2, [r3, #0]
2000d606:	605a      	str	r2, [r3, #4]
2000d608:	609a      	str	r2, [r3, #8]
2000d60a:	60da      	str	r2, [r3, #12]
2000d60c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
2000d60e:	2300      	movs	r3, #0
2000d610:	613b      	str	r3, [r7, #16]
2000d612:	4b27      	ldr	r3, [pc, #156]	; (2000d6b0 <MX_GPIO_Init+0xb8>)
2000d614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d616:	4a26      	ldr	r2, [pc, #152]	; (2000d6b0 <MX_GPIO_Init+0xb8>)
2000d618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000d61c:	6313      	str	r3, [r2, #48]	; 0x30
2000d61e:	4b24      	ldr	r3, [pc, #144]	; (2000d6b0 <MX_GPIO_Init+0xb8>)
2000d620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d622:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000d626:	613b      	str	r3, [r7, #16]
2000d628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
2000d62a:	2300      	movs	r3, #0
2000d62c:	60fb      	str	r3, [r7, #12]
2000d62e:	4b20      	ldr	r3, [pc, #128]	; (2000d6b0 <MX_GPIO_Init+0xb8>)
2000d630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d632:	4a1f      	ldr	r2, [pc, #124]	; (2000d6b0 <MX_GPIO_Init+0xb8>)
2000d634:	f043 0308 	orr.w	r3, r3, #8
2000d638:	6313      	str	r3, [r2, #48]	; 0x30
2000d63a:	4b1d      	ldr	r3, [pc, #116]	; (2000d6b0 <MX_GPIO_Init+0xb8>)
2000d63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d63e:	f003 0308 	and.w	r3, r3, #8
2000d642:	60fb      	str	r3, [r7, #12]
2000d644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
2000d646:	2300      	movs	r3, #0
2000d648:	60bb      	str	r3, [r7, #8]
2000d64a:	4b19      	ldr	r3, [pc, #100]	; (2000d6b0 <MX_GPIO_Init+0xb8>)
2000d64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d64e:	4a18      	ldr	r2, [pc, #96]	; (2000d6b0 <MX_GPIO_Init+0xb8>)
2000d650:	f043 0301 	orr.w	r3, r3, #1
2000d654:	6313      	str	r3, [r2, #48]	; 0x30
2000d656:	4b16      	ldr	r3, [pc, #88]	; (2000d6b0 <MX_GPIO_Init+0xb8>)
2000d658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d65a:	f003 0301 	and.w	r3, r3, #1
2000d65e:	60bb      	str	r3, [r7, #8]
2000d660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
2000d662:	2300      	movs	r3, #0
2000d664:	607b      	str	r3, [r7, #4]
2000d666:	4b12      	ldr	r3, [pc, #72]	; (2000d6b0 <MX_GPIO_Init+0xb8>)
2000d668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d66a:	4a11      	ldr	r2, [pc, #68]	; (2000d6b0 <MX_GPIO_Init+0xb8>)
2000d66c:	f043 0302 	orr.w	r3, r3, #2
2000d670:	6313      	str	r3, [r2, #48]	; 0x30
2000d672:	4b0f      	ldr	r3, [pc, #60]	; (2000d6b0 <MX_GPIO_Init+0xb8>)
2000d674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d676:	f003 0302 	and.w	r3, r3, #2
2000d67a:	607b      	str	r3, [r7, #4]
2000d67c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
2000d67e:	2200      	movs	r2, #0
2000d680:	f44f 4160 	mov.w	r1, #57344	; 0xe000
2000d684:	480b      	ldr	r0, [pc, #44]	; (2000d6b4 <MX_GPIO_Init+0xbc>)
2000d686:	f000 fead 	bl	2000e3e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
2000d68a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
2000d68e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000d690:	2301      	movs	r3, #1
2000d692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000d694:	2300      	movs	r3, #0
2000d696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
2000d698:	2302      	movs	r3, #2
2000d69a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2000d69c:	f107 0314 	add.w	r3, r7, #20
2000d6a0:	4619      	mov	r1, r3
2000d6a2:	4804      	ldr	r0, [pc, #16]	; (2000d6b4 <MX_GPIO_Init+0xbc>)
2000d6a4:	f000 fcea 	bl	2000e07c <HAL_GPIO_Init>

}
2000d6a8:	bf00      	nop
2000d6aa:	3728      	adds	r7, #40	; 0x28
2000d6ac:	46bd      	mov	sp, r7
2000d6ae:	bd80      	pop	{r7, pc}
2000d6b0:	40023800 	.word	0x40023800
2000d6b4:	40020c00 	.word	0x40020c00

2000d6b8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
2000d6b8:	b580      	push	{r7, lr}
2000d6ba:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
2000d6bc:	4b09      	ldr	r3, [pc, #36]	; (2000d6e4 <MX_IWDG_Init+0x2c>)
2000d6be:	4a0a      	ldr	r2, [pc, #40]	; (2000d6e8 <MX_IWDG_Init+0x30>)
2000d6c0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
2000d6c2:	4b08      	ldr	r3, [pc, #32]	; (2000d6e4 <MX_IWDG_Init+0x2c>)
2000d6c4:	2204      	movs	r2, #4
2000d6c6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
2000d6c8:	4b06      	ldr	r3, [pc, #24]	; (2000d6e4 <MX_IWDG_Init+0x2c>)
2000d6ca:	f640 72ff 	movw	r2, #4095	; 0xfff
2000d6ce:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
2000d6d0:	4804      	ldr	r0, [pc, #16]	; (2000d6e4 <MX_IWDG_Init+0x2c>)
2000d6d2:	f000 febb 	bl	2000e44c <HAL_IWDG_Init>
2000d6d6:	4603      	mov	r3, r0
2000d6d8:	2b00      	cmp	r3, #0
2000d6da:	d001      	beq.n	2000d6e0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
2000d6dc:	f000 f914 	bl	2000d908 <Error_Handler>
  }

}
2000d6e0:	bf00      	nop
2000d6e2:	bd80      	pop	{r7, pc}
2000d6e4:	2000fba4 	.word	0x2000fba4
2000d6e8:	40003000 	.word	0x40003000

2000d6ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
2000d6ec:	b580      	push	{r7, lr}
2000d6ee:	b084      	sub	sp, #16
2000d6f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
2000d6f2:	f000 fb47 	bl	2000dd84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2000d6f6:	f000 f89b 	bl	2000d830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
2000d6fa:	f7ff ff7d 	bl	2000d5f8 <MX_GPIO_Init>
  MX_IWDG_Init();
2000d6fe:	f7ff ffdb 	bl	2000d6b8 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* Do not remove this code below */
  MX_TRACE_Init();
2000d702:	f000 f9ab 	bl	2000da5c <MX_TRACE_Init>
  SDK_TRACE_Start();
2000d706:	f000 f9cb 	bl	2000daa0 <SDK_TRACE_Start>
  /* Do not remove this code from above */

  SDK_TRACE_Timestamp(PRINT, 1);
2000d70a:	2101      	movs	r1, #1
2000d70c:	2004      	movs	r0, #4
2000d70e:	f000 f9ff 	bl	2000db10 <SDK_TRACE_Timestamp>
  SDK_TRACE_Print("%s","LEDs Blink test");
2000d712:	493f      	ldr	r1, [pc, #252]	; (2000d810 <main+0x124>)
2000d714:	483f      	ldr	r0, [pc, #252]	; (2000d814 <main+0x128>)
2000d716:	f000 fa4d 	bl	2000dbb4 <SDK_TRACE_Print>
  SDK_TRACE_Timestamp(PRINT, 0);
2000d71a:	2100      	movs	r1, #0
2000d71c:	2004      	movs	r0, #4
2000d71e:	f000 f9f7 	bl	2000db10 <SDK_TRACE_Timestamp>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
2000d722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000d726:	483c      	ldr	r0, [pc, #240]	; (2000d818 <main+0x12c>)
2000d728:	f000 fe75 	bl	2000e416 <HAL_GPIO_TogglePin>
  SDK_TRACE_Timestamp(LED3, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15));
2000d72c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000d730:	4839      	ldr	r0, [pc, #228]	; (2000d818 <main+0x12c>)
2000d732:	f000 fe3f 	bl	2000e3b4 <HAL_GPIO_ReadPin>
2000d736:	4603      	mov	r3, r0
2000d738:	4619      	mov	r1, r3
2000d73a:	2003      	movs	r0, #3
2000d73c:	f000 f9e8 	bl	2000db10 <SDK_TRACE_Timestamp>
  /* Place your code from here */
  /* Example of using LED tracing */

  for (int i = 0; i < 10; i++) {
2000d740:	2300      	movs	r3, #0
2000d742:	607b      	str	r3, [r7, #4]
2000d744:	e023      	b.n	2000d78e <main+0xa2>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
2000d746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000d74a:	4833      	ldr	r0, [pc, #204]	; (2000d818 <main+0x12c>)
2000d74c:	f000 fe63 	bl	2000e416 <HAL_GPIO_TogglePin>
  	  SDK_TRACE_Timestamp(LED1, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13));
2000d750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000d754:	4830      	ldr	r0, [pc, #192]	; (2000d818 <main+0x12c>)
2000d756:	f000 fe2d 	bl	2000e3b4 <HAL_GPIO_ReadPin>
2000d75a:	4603      	mov	r3, r0
2000d75c:	4619      	mov	r1, r3
2000d75e:	2001      	movs	r0, #1
2000d760:	f000 f9d6 	bl	2000db10 <SDK_TRACE_Timestamp>
  	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
2000d764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000d768:	482b      	ldr	r0, [pc, #172]	; (2000d818 <main+0x12c>)
2000d76a:	f000 fe54 	bl	2000e416 <HAL_GPIO_TogglePin>
  	  SDK_TRACE_Timestamp(LED3, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15));
2000d76e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000d772:	4829      	ldr	r0, [pc, #164]	; (2000d818 <main+0x12c>)
2000d774:	f000 fe1e 	bl	2000e3b4 <HAL_GPIO_ReadPin>
2000d778:	4603      	mov	r3, r0
2000d77a:	4619      	mov	r1, r3
2000d77c:	2003      	movs	r0, #3
2000d77e:	f000 f9c7 	bl	2000db10 <SDK_TRACE_Timestamp>
  	  HAL_Delay(250);
2000d782:	20fa      	movs	r0, #250	; 0xfa
2000d784:	f000 fb70 	bl	2000de68 <HAL_Delay>
  for (int i = 0; i < 10; i++) {
2000d788:	687b      	ldr	r3, [r7, #4]
2000d78a:	3301      	adds	r3, #1
2000d78c:	607b      	str	r3, [r7, #4]
2000d78e:	687b      	ldr	r3, [r7, #4]
2000d790:	2b09      	cmp	r3, #9
2000d792:	ddd8      	ble.n	2000d746 <main+0x5a>
  }

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
2000d794:	2200      	movs	r2, #0
2000d796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000d79a:	481f      	ldr	r0, [pc, #124]	; (2000d818 <main+0x12c>)
2000d79c:	f000 fe22 	bl	2000e3e4 <HAL_GPIO_WritePin>
  SDK_TRACE_Timestamp(LED1, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13));
2000d7a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000d7a4:	481c      	ldr	r0, [pc, #112]	; (2000d818 <main+0x12c>)
2000d7a6:	f000 fe05 	bl	2000e3b4 <HAL_GPIO_ReadPin>
2000d7aa:	4603      	mov	r3, r0
2000d7ac:	4619      	mov	r1, r3
2000d7ae:	2001      	movs	r0, #1
2000d7b0:	f000 f9ae 	bl	2000db10 <SDK_TRACE_Timestamp>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
2000d7b4:	2200      	movs	r2, #0
2000d7b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000d7ba:	4817      	ldr	r0, [pc, #92]	; (2000d818 <main+0x12c>)
2000d7bc:	f000 fe12 	bl	2000e3e4 <HAL_GPIO_WritePin>
  SDK_TRACE_Timestamp(LED3, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15));
2000d7c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000d7c4:	4814      	ldr	r0, [pc, #80]	; (2000d818 <main+0x12c>)
2000d7c6:	f000 fdf5 	bl	2000e3b4 <HAL_GPIO_ReadPin>
2000d7ca:	4603      	mov	r3, r0
2000d7cc:	4619      	mov	r1, r3
2000d7ce:	2003      	movs	r0, #3
2000d7d0:	f000 f99e 	bl	2000db10 <SDK_TRACE_Timestamp>

  SDK_TRACE_Timestamp(PRINT, 1);
2000d7d4:	2101      	movs	r1, #1
2000d7d6:	2004      	movs	r0, #4
2000d7d8:	f000 f99a 	bl	2000db10 <SDK_TRACE_Timestamp>
  SDK_TRACE_Print("%s","Test passed");
2000d7dc:	490f      	ldr	r1, [pc, #60]	; (2000d81c <main+0x130>)
2000d7de:	480d      	ldr	r0, [pc, #52]	; (2000d814 <main+0x128>)
2000d7e0:	f000 f9e8 	bl	2000dbb4 <SDK_TRACE_Print>
  SDK_TRACE_Timestamp(PRINT, 0);
2000d7e4:	2100      	movs	r1, #0
2000d7e6:	2004      	movs	r0, #4
2000d7e8:	f000 f992 	bl	2000db10 <SDK_TRACE_Timestamp>

  /* Example of sending debug messages */

  SDK_TRACE_Print("%s%d%s%X", "Decimal value: ", 255, " Hex value: ", 255);
2000d7ec:	23ff      	movs	r3, #255	; 0xff
2000d7ee:	9300      	str	r3, [sp, #0]
2000d7f0:	4b0b      	ldr	r3, [pc, #44]	; (2000d820 <main+0x134>)
2000d7f2:	22ff      	movs	r2, #255	; 0xff
2000d7f4:	490b      	ldr	r1, [pc, #44]	; (2000d824 <main+0x138>)
2000d7f6:	480c      	ldr	r0, [pc, #48]	; (2000d828 <main+0x13c>)
2000d7f8:	f000 f9dc 	bl	2000dbb4 <SDK_TRACE_Print>

  /* Example of writing dump */

  uint8_t data[4] = { 0xDE, 0xAD, 0xBE, 0xEF };
2000d7fc:	4b0b      	ldr	r3, [pc, #44]	; (2000d82c <main+0x140>)
2000d7fe:	603b      	str	r3, [r7, #0]
  SDK_TRACE_Dump(&data, 4);
2000d800:	463b      	mov	r3, r7
2000d802:	2104      	movs	r1, #4
2000d804:	4618      	mov	r0, r3
2000d806:	f000 fa3b 	bl	2000dc80 <SDK_TRACE_Dump>

  /* Place your code before here */
  /* Do not remove this code below */
  SDK_TRACE_Stop();
2000d80a:	f000 f959 	bl	2000dac0 <SDK_TRACE_Stop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
2000d80e:	e7fe      	b.n	2000d80e <main+0x122>
2000d810:	2000f664 	.word	0x2000f664
2000d814:	2000f674 	.word	0x2000f674
2000d818:	40020c00 	.word	0x40020c00
2000d81c:	2000f678 	.word	0x2000f678
2000d820:	2000f684 	.word	0x2000f684
2000d824:	2000f694 	.word	0x2000f694
2000d828:	2000f6a4 	.word	0x2000f6a4
2000d82c:	efbeadde 	.word	0xefbeadde

2000d830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
2000d830:	b580      	push	{r7, lr}
2000d832:	b094      	sub	sp, #80	; 0x50
2000d834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2000d836:	f107 0320 	add.w	r3, r7, #32
2000d83a:	2230      	movs	r2, #48	; 0x30
2000d83c:	2100      	movs	r1, #0
2000d83e:	4618      	mov	r0, r3
2000d840:	f001 fa8e 	bl	2000ed60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2000d844:	f107 030c 	add.w	r3, r7, #12
2000d848:	2200      	movs	r2, #0
2000d84a:	601a      	str	r2, [r3, #0]
2000d84c:	605a      	str	r2, [r3, #4]
2000d84e:	609a      	str	r2, [r3, #8]
2000d850:	60da      	str	r2, [r3, #12]
2000d852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
2000d854:	2300      	movs	r3, #0
2000d856:	60bb      	str	r3, [r7, #8]
2000d858:	4b29      	ldr	r3, [pc, #164]	; (2000d900 <SystemClock_Config+0xd0>)
2000d85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d85c:	4a28      	ldr	r2, [pc, #160]	; (2000d900 <SystemClock_Config+0xd0>)
2000d85e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000d862:	6413      	str	r3, [r2, #64]	; 0x40
2000d864:	4b26      	ldr	r3, [pc, #152]	; (2000d900 <SystemClock_Config+0xd0>)
2000d866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000d86c:	60bb      	str	r3, [r7, #8]
2000d86e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2000d870:	2300      	movs	r3, #0
2000d872:	607b      	str	r3, [r7, #4]
2000d874:	4b23      	ldr	r3, [pc, #140]	; (2000d904 <SystemClock_Config+0xd4>)
2000d876:	681b      	ldr	r3, [r3, #0]
2000d878:	4a22      	ldr	r2, [pc, #136]	; (2000d904 <SystemClock_Config+0xd4>)
2000d87a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000d87e:	6013      	str	r3, [r2, #0]
2000d880:	4b20      	ldr	r3, [pc, #128]	; (2000d904 <SystemClock_Config+0xd4>)
2000d882:	681b      	ldr	r3, [r3, #0]
2000d884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000d888:	607b      	str	r3, [r7, #4]
2000d88a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
2000d88c:	2309      	movs	r3, #9
2000d88e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
2000d890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000d894:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
2000d896:	2301      	movs	r3, #1
2000d898:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2000d89a:	2302      	movs	r3, #2
2000d89c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2000d89e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000d8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
2000d8a4:	2319      	movs	r3, #25
2000d8a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
2000d8a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
2000d8ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
2000d8ae:	2302      	movs	r3, #2
2000d8b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
2000d8b2:	2304      	movs	r3, #4
2000d8b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000d8b6:	f107 0320 	add.w	r3, r7, #32
2000d8ba:	4618      	mov	r0, r3
2000d8bc:	f000 fe00 	bl	2000e4c0 <HAL_RCC_OscConfig>
2000d8c0:	4603      	mov	r3, r0
2000d8c2:	2b00      	cmp	r3, #0
2000d8c4:	d001      	beq.n	2000d8ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
2000d8c6:	f000 f81f 	bl	2000d908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2000d8ca:	230f      	movs	r3, #15
2000d8cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2000d8ce:	2302      	movs	r3, #2
2000d8d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
2000d8d2:	2300      	movs	r3, #0
2000d8d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
2000d8d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
2000d8da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
2000d8dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2000d8e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
2000d8e2:	f107 030c 	add.w	r3, r7, #12
2000d8e6:	2105      	movs	r1, #5
2000d8e8:	4618      	mov	r0, r3
2000d8ea:	f001 f857 	bl	2000e99c <HAL_RCC_ClockConfig>
2000d8ee:	4603      	mov	r3, r0
2000d8f0:	2b00      	cmp	r3, #0
2000d8f2:	d001      	beq.n	2000d8f8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
2000d8f4:	f000 f808 	bl	2000d908 <Error_Handler>
  }
}
2000d8f8:	bf00      	nop
2000d8fa:	3750      	adds	r7, #80	; 0x50
2000d8fc:	46bd      	mov	sp, r7
2000d8fe:	bd80      	pop	{r7, pc}
2000d900:	40023800 	.word	0x40023800
2000d904:	40007000 	.word	0x40007000

2000d908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
2000d908:	b480      	push	{r7}
2000d90a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
2000d90c:	bf00      	nop
2000d90e:	46bd      	mov	sp, r7
2000d910:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d914:	4770      	bx	lr
	...

2000d918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
2000d918:	b480      	push	{r7}
2000d91a:	b083      	sub	sp, #12
2000d91c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000d91e:	2300      	movs	r3, #0
2000d920:	607b      	str	r3, [r7, #4]
2000d922:	4b10      	ldr	r3, [pc, #64]	; (2000d964 <HAL_MspInit+0x4c>)
2000d924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000d926:	4a0f      	ldr	r2, [pc, #60]	; (2000d964 <HAL_MspInit+0x4c>)
2000d928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000d92c:	6453      	str	r3, [r2, #68]	; 0x44
2000d92e:	4b0d      	ldr	r3, [pc, #52]	; (2000d964 <HAL_MspInit+0x4c>)
2000d930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000d932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000d936:	607b      	str	r3, [r7, #4]
2000d938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
2000d93a:	2300      	movs	r3, #0
2000d93c:	603b      	str	r3, [r7, #0]
2000d93e:	4b09      	ldr	r3, [pc, #36]	; (2000d964 <HAL_MspInit+0x4c>)
2000d940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d942:	4a08      	ldr	r2, [pc, #32]	; (2000d964 <HAL_MspInit+0x4c>)
2000d944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000d948:	6413      	str	r3, [r2, #64]	; 0x40
2000d94a:	4b06      	ldr	r3, [pc, #24]	; (2000d964 <HAL_MspInit+0x4c>)
2000d94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d94e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000d952:	603b      	str	r3, [r7, #0]
2000d954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2000d956:	bf00      	nop
2000d958:	370c      	adds	r7, #12
2000d95a:	46bd      	mov	sp, r7
2000d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d960:	4770      	bx	lr
2000d962:	bf00      	nop
2000d964:	40023800 	.word	0x40023800

2000d968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
2000d968:	b480      	push	{r7}
2000d96a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
2000d96c:	bf00      	nop
2000d96e:	46bd      	mov	sp, r7
2000d970:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d974:	4770      	bx	lr

2000d976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
2000d976:	b480      	push	{r7}
2000d978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2000d97a:	e7fe      	b.n	2000d97a <HardFault_Handler+0x4>

2000d97c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
2000d97c:	b480      	push	{r7}
2000d97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000d980:	e7fe      	b.n	2000d980 <MemManage_Handler+0x4>

2000d982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2000d982:	b480      	push	{r7}
2000d984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
2000d986:	e7fe      	b.n	2000d986 <BusFault_Handler+0x4>

2000d988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
2000d988:	b480      	push	{r7}
2000d98a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
2000d98c:	e7fe      	b.n	2000d98c <UsageFault_Handler+0x4>

2000d98e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2000d98e:	b480      	push	{r7}
2000d990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2000d992:	bf00      	nop
2000d994:	46bd      	mov	sp, r7
2000d996:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d99a:	4770      	bx	lr

2000d99c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
2000d99c:	b480      	push	{r7}
2000d99e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2000d9a0:	bf00      	nop
2000d9a2:	46bd      	mov	sp, r7
2000d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d9a8:	4770      	bx	lr

2000d9aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
2000d9aa:	b480      	push	{r7}
2000d9ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2000d9ae:	bf00      	nop
2000d9b0:	46bd      	mov	sp, r7
2000d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d9b6:	4770      	bx	lr

2000d9b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2000d9b8:	b580      	push	{r7, lr}
2000d9ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2000d9bc:	f000 fa34 	bl	2000de28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
2000d9c0:	bf00      	nop
2000d9c2:	bd80      	pop	{r7, pc}

2000d9c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
2000d9c4:	b580      	push	{r7, lr}
2000d9c6:	b086      	sub	sp, #24
2000d9c8:	af00      	add	r7, sp, #0
2000d9ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
2000d9cc:	4a14      	ldr	r2, [pc, #80]	; (2000da20 <_sbrk+0x5c>)
2000d9ce:	4b15      	ldr	r3, [pc, #84]	; (2000da24 <_sbrk+0x60>)
2000d9d0:	1ad3      	subs	r3, r2, r3
2000d9d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
2000d9d4:	697b      	ldr	r3, [r7, #20]
2000d9d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
2000d9d8:	4b13      	ldr	r3, [pc, #76]	; (2000da28 <_sbrk+0x64>)
2000d9da:	681b      	ldr	r3, [r3, #0]
2000d9dc:	2b00      	cmp	r3, #0
2000d9de:	d102      	bne.n	2000d9e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
2000d9e0:	4b11      	ldr	r3, [pc, #68]	; (2000da28 <_sbrk+0x64>)
2000d9e2:	4a12      	ldr	r2, [pc, #72]	; (2000da2c <_sbrk+0x68>)
2000d9e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
2000d9e6:	4b10      	ldr	r3, [pc, #64]	; (2000da28 <_sbrk+0x64>)
2000d9e8:	681a      	ldr	r2, [r3, #0]
2000d9ea:	687b      	ldr	r3, [r7, #4]
2000d9ec:	4413      	add	r3, r2
2000d9ee:	693a      	ldr	r2, [r7, #16]
2000d9f0:	429a      	cmp	r2, r3
2000d9f2:	d207      	bcs.n	2000da04 <_sbrk+0x40>
  {
    errno = ENOMEM;
2000d9f4:	f001 f98a 	bl	2000ed0c <__errno>
2000d9f8:	4603      	mov	r3, r0
2000d9fa:	220c      	movs	r2, #12
2000d9fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
2000d9fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2000da02:	e009      	b.n	2000da18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
2000da04:	4b08      	ldr	r3, [pc, #32]	; (2000da28 <_sbrk+0x64>)
2000da06:	681b      	ldr	r3, [r3, #0]
2000da08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
2000da0a:	4b07      	ldr	r3, [pc, #28]	; (2000da28 <_sbrk+0x64>)
2000da0c:	681a      	ldr	r2, [r3, #0]
2000da0e:	687b      	ldr	r3, [r7, #4]
2000da10:	4413      	add	r3, r2
2000da12:	4a05      	ldr	r2, [pc, #20]	; (2000da28 <_sbrk+0x64>)
2000da14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
2000da16:	68fb      	ldr	r3, [r7, #12]
}
2000da18:	4618      	mov	r0, r3
2000da1a:	3718      	adds	r7, #24
2000da1c:	46bd      	mov	sp, r7
2000da1e:	bd80      	pop	{r7, pc}
2000da20:	20020000 	.word	0x20020000
2000da24:	00000400 	.word	0x00000400
2000da28:	2000fbb0 	.word	0x2000fbb0
2000da2c:	2000fcd0 	.word	0x2000fcd0

2000da30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
2000da30:	b480      	push	{r7}
2000da32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
2000da34:	4b07      	ldr	r3, [pc, #28]	; (2000da54 <SystemInit+0x24>)
2000da36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000da3a:	4a06      	ldr	r2, [pc, #24]	; (2000da54 <SystemInit+0x24>)
2000da3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
2000da40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
2000da44:	4b03      	ldr	r3, [pc, #12]	; (2000da54 <SystemInit+0x24>)
2000da46:	4a04      	ldr	r2, [pc, #16]	; (2000da58 <SystemInit+0x28>)
2000da48:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
2000da4a:	bf00      	nop
2000da4c:	46bd      	mov	sp, r7
2000da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000da52:	4770      	bx	lr
2000da54:	e000ed00 	.word	0xe000ed00
2000da58:	2000d000 	.word	0x2000d000

2000da5c <MX_TRACE_Init>:
 * ----------------------------------------------------------------------
 * Trace initialization function
 *-----------------------------------------------------------------------
 */
void MX_TRACE_Init(void)
{
2000da5c:	b480      	push	{r7}
2000da5e:	af00      	add	r7, sp, #0
	InitCC();
2000da60:	4b0c      	ldr	r3, [pc, #48]	; (2000da94 <MX_TRACE_Init+0x38>)
2000da62:	681b      	ldr	r3, [r3, #0]
2000da64:	4a0b      	ldr	r2, [pc, #44]	; (2000da94 <MX_TRACE_Init+0x38>)
2000da66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2000da6a:	6013      	str	r3, [r2, #0]
	ResetCC();
2000da6c:	4b0a      	ldr	r3, [pc, #40]	; (2000da98 <MX_TRACE_Init+0x3c>)
2000da6e:	2200      	movs	r2, #0
2000da70:	601a      	str	r2, [r3, #0]
	TI->printlog_size = 0x00;
2000da72:	4b0a      	ldr	r3, [pc, #40]	; (2000da9c <MX_TRACE_Init+0x40>)
2000da74:	681b      	ldr	r3, [r3, #0]
2000da76:	2200      	movs	r2, #0
2000da78:	605a      	str	r2, [r3, #4]
	TI->tracelog_size = 0x00;
2000da7a:	4b08      	ldr	r3, [pc, #32]	; (2000da9c <MX_TRACE_Init+0x40>)
2000da7c:	681b      	ldr	r3, [r3, #0]
2000da7e:	2200      	movs	r2, #0
2000da80:	601a      	str	r2, [r3, #0]
	TI->dumpbuf_size = 0x00;
2000da82:	4b06      	ldr	r3, [pc, #24]	; (2000da9c <MX_TRACE_Init+0x40>)
2000da84:	681b      	ldr	r3, [r3, #0]
2000da86:	2200      	movs	r2, #0
2000da88:	609a      	str	r2, [r3, #8]
}
2000da8a:	bf00      	nop
2000da8c:	46bd      	mov	sp, r7
2000da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000da92:	4770      	bx	lr
2000da94:	e000edfc 	.word	0xe000edfc
2000da98:	e0001004 	.word	0xe0001004
2000da9c:	2000fb08 	.word	0x2000fb08

2000daa0 <SDK_TRACE_Start>:
 * ----------------------------------------------------------------------
 * Start trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Start(void)
{
2000daa0:	b480      	push	{r7}
2000daa2:	af00      	add	r7, sp, #0
	EnableCC();
2000daa4:	4b05      	ldr	r3, [pc, #20]	; (2000dabc <SDK_TRACE_Start+0x1c>)
2000daa6:	681b      	ldr	r3, [r3, #0]
2000daa8:	4a04      	ldr	r2, [pc, #16]	; (2000dabc <SDK_TRACE_Start+0x1c>)
2000daaa:	f043 0301 	orr.w	r3, r3, #1
2000daae:	6013      	str	r3, [r2, #0]
}
2000dab0:	bf00      	nop
2000dab2:	46bd      	mov	sp, r7
2000dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dab8:	4770      	bx	lr
2000daba:	bf00      	nop
2000dabc:	e0001000 	.word	0xe0001000

2000dac0 <SDK_TRACE_Stop>:
 * ----------------------------------------------------------------------
 * Stop trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Stop(void)
{
2000dac0:	b598      	push	{r3, r4, r7, lr}
2000dac2:	af00      	add	r7, sp, #0
	DisableCC();
2000dac4:	4b0c      	ldr	r3, [pc, #48]	; (2000daf8 <SDK_TRACE_Stop+0x38>)
2000dac6:	681b      	ldr	r3, [r3, #0]
2000dac8:	4a0b      	ldr	r2, [pc, #44]	; (2000daf8 <SDK_TRACE_Stop+0x38>)
2000daca:	f023 0301 	bic.w	r3, r3, #1
2000dace:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
2000dad0:	b672      	cpsid	i
}
2000dad2:	bf00      	nop
	__disable_irq();
	*CRC32 = crc32((unsigned char *)TRACEINFO_ADDR, sizeof(traceinfo_t) + (TI->tracelog_size), 0);
2000dad4:	4b09      	ldr	r3, [pc, #36]	; (2000dafc <SDK_TRACE_Stop+0x3c>)
2000dad6:	681b      	ldr	r3, [r3, #0]
2000dad8:	681b      	ldr	r3, [r3, #0]
2000dada:	3310      	adds	r3, #16
2000dadc:	4a08      	ldr	r2, [pc, #32]	; (2000db00 <SDK_TRACE_Stop+0x40>)
2000dade:	6814      	ldr	r4, [r2, #0]
2000dae0:	2200      	movs	r2, #0
2000dae2:	4619      	mov	r1, r3
2000dae4:	4807      	ldr	r0, [pc, #28]	; (2000db04 <SDK_TRACE_Stop+0x44>)
2000dae6:	f7ff fd69 	bl	2000d5bc <crc32>
2000daea:	4603      	mov	r3, r0
2000daec:	6023      	str	r3, [r4, #0]
	SCB->AIRCR = 0x05FA0004;
2000daee:	4b06      	ldr	r3, [pc, #24]	; (2000db08 <SDK_TRACE_Stop+0x48>)
2000daf0:	4a06      	ldr	r2, [pc, #24]	; (2000db0c <SDK_TRACE_Stop+0x4c>)
2000daf2:	60da      	str	r2, [r3, #12]
}
2000daf4:	bf00      	nop
2000daf6:	bd98      	pop	{r3, r4, r7, pc}
2000daf8:	e0001000 	.word	0xe0001000
2000dafc:	2000fb08 	.word	0x2000fb08
2000db00:	2000fb10 	.word	0x2000fb10
2000db04:	10000004 	.word	0x10000004
2000db08:	e000ed00 	.word	0xe000ed00
2000db0c:	05fa0004 	.word	0x05fa0004

2000db10 <SDK_TRACE_Timestamp>:
 * @param id Event ID (For example: LED1)
 * @param value LED port state (0 or 1)
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Timestamp(uint8_t id, uint8_t value)
{
2000db10:	b590      	push	{r4, r7, lr}
2000db12:	b085      	sub	sp, #20
2000db14:	af00      	add	r7, sp, #0
2000db16:	4603      	mov	r3, r0
2000db18:	460a      	mov	r2, r1
2000db1a:	71fb      	strb	r3, [r7, #7]
2000db1c:	4613      	mov	r3, r2
2000db1e:	71bb      	strb	r3, [r7, #6]
	uint32_t eCode = 0x00;
2000db20:	2300      	movs	r3, #0
2000db22:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + 0x01;
2000db24:	68fb      	ldr	r3, [r7, #12]
2000db26:	021b      	lsls	r3, r3, #8
2000db28:	3301      	adds	r3, #1
2000db2a:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + value;
2000db2c:	68fb      	ldr	r3, [r7, #12]
2000db2e:	021a      	lsls	r2, r3, #8
2000db30:	79bb      	ldrb	r3, [r7, #6]
2000db32:	4413      	add	r3, r2
2000db34:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + id;
2000db36:	68fb      	ldr	r3, [r7, #12]
2000db38:	021a      	lsls	r2, r3, #8
2000db3a:	79fb      	ldrb	r3, [r7, #7]
2000db3c:	4413      	add	r3, r2
2000db3e:	60fb      	str	r3, [r7, #12]
	TL[TI->tracelog_size/8].timecode = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000db40:	4b17      	ldr	r3, [pc, #92]	; (2000dba0 <SDK_TRACE_Timestamp+0x90>)
2000db42:	681c      	ldr	r4, [r3, #0]
2000db44:	f001 f8d6 	bl	2000ecf4 <HAL_RCC_GetHCLKFreq>
2000db48:	4603      	mov	r3, r0
2000db4a:	4a16      	ldr	r2, [pc, #88]	; (2000dba4 <SDK_TRACE_Timestamp+0x94>)
2000db4c:	fba2 2303 	umull	r2, r3, r2, r3
2000db50:	0c9a      	lsrs	r2, r3, #18
2000db52:	4b15      	ldr	r3, [pc, #84]	; (2000dba8 <SDK_TRACE_Timestamp+0x98>)
2000db54:	6819      	ldr	r1, [r3, #0]
2000db56:	4b15      	ldr	r3, [pc, #84]	; (2000dbac <SDK_TRACE_Timestamp+0x9c>)
2000db58:	681b      	ldr	r3, [r3, #0]
2000db5a:	681b      	ldr	r3, [r3, #0]
2000db5c:	f023 0307 	bic.w	r3, r3, #7
2000db60:	440b      	add	r3, r1
2000db62:	fbb4 f2f2 	udiv	r2, r4, r2
2000db66:	601a      	str	r2, [r3, #0]
	TL[TI->tracelog_size/8].eventcode = eCode;
2000db68:	4b0f      	ldr	r3, [pc, #60]	; (2000dba8 <SDK_TRACE_Timestamp+0x98>)
2000db6a:	681a      	ldr	r2, [r3, #0]
2000db6c:	4b0f      	ldr	r3, [pc, #60]	; (2000dbac <SDK_TRACE_Timestamp+0x9c>)
2000db6e:	681b      	ldr	r3, [r3, #0]
2000db70:	681b      	ldr	r3, [r3, #0]
2000db72:	f023 0307 	bic.w	r3, r3, #7
2000db76:	4413      	add	r3, r2
2000db78:	68fa      	ldr	r2, [r7, #12]
2000db7a:	605a      	str	r2, [r3, #4]
	TI->tracelog_size+=8;
2000db7c:	4b0b      	ldr	r3, [pc, #44]	; (2000dbac <SDK_TRACE_Timestamp+0x9c>)
2000db7e:	681b      	ldr	r3, [r3, #0]
2000db80:	681a      	ldr	r2, [r3, #0]
2000db82:	4b0a      	ldr	r3, [pc, #40]	; (2000dbac <SDK_TRACE_Timestamp+0x9c>)
2000db84:	681b      	ldr	r3, [r3, #0]
2000db86:	3208      	adds	r2, #8
2000db88:	601a      	str	r2, [r3, #0]
	eventId++;
2000db8a:	4b09      	ldr	r3, [pc, #36]	; (2000dbb0 <SDK_TRACE_Timestamp+0xa0>)
2000db8c:	781b      	ldrb	r3, [r3, #0]
2000db8e:	3301      	adds	r3, #1
2000db90:	b2da      	uxtb	r2, r3
2000db92:	4b07      	ldr	r3, [pc, #28]	; (2000dbb0 <SDK_TRACE_Timestamp+0xa0>)
2000db94:	701a      	strb	r2, [r3, #0]
}
2000db96:	bf00      	nop
2000db98:	3714      	adds	r7, #20
2000db9a:	46bd      	mov	sp, r7
2000db9c:	bd90      	pop	{r4, r7, pc}
2000db9e:	bf00      	nop
2000dba0:	e0001004 	.word	0xe0001004
2000dba4:	431bde83 	.word	0x431bde83
2000dba8:	2000fb0c 	.word	0x2000fb0c
2000dbac:	2000fb08 	.word	0x2000fb08
2000dbb0:	2000fbb4 	.word	0x2000fbb4

2000dbb4 <SDK_TRACE_Print>:
 * ----------------------------------------------------------------------
 * Writes the C string pointed by format to the trace buffer
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Print(char * format, ...)
{
2000dbb4:	b40f      	push	{r0, r1, r2, r3}
2000dbb6:	b590      	push	{r4, r7, lr}
2000dbb8:	b085      	sub	sp, #20
2000dbba:	af00      	add	r7, sp, #0

	va_list args;
	va_start(args, format);
2000dbbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
2000dbc0:	607b      	str	r3, [r7, #4]

	vsprintf( __buf, format, args);
2000dbc2:	687a      	ldr	r2, [r7, #4]
2000dbc4:	6a39      	ldr	r1, [r7, #32]
2000dbc6:	4829      	ldr	r0, [pc, #164]	; (2000dc6c <SDK_TRACE_Print+0xb8>)
2000dbc8:	f001 f8e8 	bl	2000ed9c <vsiprintf>

	uint8_t len = strlen(__buf);
2000dbcc:	4827      	ldr	r0, [pc, #156]	; (2000dc6c <SDK_TRACE_Print+0xb8>)
2000dbce:	f7ff faff 	bl	2000d1d0 <strlen>
2000dbd2:	4603      	mov	r3, r0
2000dbd4:	72fb      	strb	r3, [r7, #11]

	*(__IO uint32_t *)(Print_Write_Address+TI->printlog_size) = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000dbd6:	4b26      	ldr	r3, [pc, #152]	; (2000dc70 <SDK_TRACE_Print+0xbc>)
2000dbd8:	681c      	ldr	r4, [r3, #0]
2000dbda:	f001 f88b 	bl	2000ecf4 <HAL_RCC_GetHCLKFreq>
2000dbde:	4603      	mov	r3, r0
2000dbe0:	4a24      	ldr	r2, [pc, #144]	; (2000dc74 <SDK_TRACE_Print+0xc0>)
2000dbe2:	fba2 2303 	umull	r2, r3, r2, r3
2000dbe6:	0c9b      	lsrs	r3, r3, #18
2000dbe8:	4a23      	ldr	r2, [pc, #140]	; (2000dc78 <SDK_TRACE_Print+0xc4>)
2000dbea:	6812      	ldr	r2, [r2, #0]
2000dbec:	6851      	ldr	r1, [r2, #4]
2000dbee:	4a23      	ldr	r2, [pc, #140]	; (2000dc7c <SDK_TRACE_Print+0xc8>)
2000dbf0:	6812      	ldr	r2, [r2, #0]
2000dbf2:	440a      	add	r2, r1
2000dbf4:	fbb4 f3f3 	udiv	r3, r4, r3
2000dbf8:	6013      	str	r3, [r2, #0]
	TI->printlog_size+=4;
2000dbfa:	4b1f      	ldr	r3, [pc, #124]	; (2000dc78 <SDK_TRACE_Print+0xc4>)
2000dbfc:	681b      	ldr	r3, [r3, #0]
2000dbfe:	685a      	ldr	r2, [r3, #4]
2000dc00:	4b1d      	ldr	r3, [pc, #116]	; (2000dc78 <SDK_TRACE_Print+0xc4>)
2000dc02:	681b      	ldr	r3, [r3, #0]
2000dc04:	3204      	adds	r2, #4
2000dc06:	605a      	str	r2, [r3, #4]

	*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = len;
2000dc08:	4b1b      	ldr	r3, [pc, #108]	; (2000dc78 <SDK_TRACE_Print+0xc4>)
2000dc0a:	681b      	ldr	r3, [r3, #0]
2000dc0c:	685a      	ldr	r2, [r3, #4]
2000dc0e:	4b1b      	ldr	r3, [pc, #108]	; (2000dc7c <SDK_TRACE_Print+0xc8>)
2000dc10:	681b      	ldr	r3, [r3, #0]
2000dc12:	4413      	add	r3, r2
2000dc14:	461a      	mov	r2, r3
2000dc16:	7afb      	ldrb	r3, [r7, #11]
2000dc18:	7013      	strb	r3, [r2, #0]
	TI->printlog_size++;
2000dc1a:	4b17      	ldr	r3, [pc, #92]	; (2000dc78 <SDK_TRACE_Print+0xc4>)
2000dc1c:	681b      	ldr	r3, [r3, #0]
2000dc1e:	685a      	ldr	r2, [r3, #4]
2000dc20:	3201      	adds	r2, #1
2000dc22:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < len; i++)
2000dc24:	2300      	movs	r3, #0
2000dc26:	60fb      	str	r3, [r7, #12]
2000dc28:	e013      	b.n	2000dc52 <SDK_TRACE_Print+0x9e>
	{
		*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = __buf[i];
2000dc2a:	4b13      	ldr	r3, [pc, #76]	; (2000dc78 <SDK_TRACE_Print+0xc4>)
2000dc2c:	681b      	ldr	r3, [r3, #0]
2000dc2e:	685a      	ldr	r2, [r3, #4]
2000dc30:	4b12      	ldr	r3, [pc, #72]	; (2000dc7c <SDK_TRACE_Print+0xc8>)
2000dc32:	681b      	ldr	r3, [r3, #0]
2000dc34:	4413      	add	r3, r2
2000dc36:	4619      	mov	r1, r3
2000dc38:	4a0c      	ldr	r2, [pc, #48]	; (2000dc6c <SDK_TRACE_Print+0xb8>)
2000dc3a:	68fb      	ldr	r3, [r7, #12]
2000dc3c:	4413      	add	r3, r2
2000dc3e:	781b      	ldrb	r3, [r3, #0]
2000dc40:	700b      	strb	r3, [r1, #0]
		TI->printlog_size++;
2000dc42:	4b0d      	ldr	r3, [pc, #52]	; (2000dc78 <SDK_TRACE_Print+0xc4>)
2000dc44:	681b      	ldr	r3, [r3, #0]
2000dc46:	685a      	ldr	r2, [r3, #4]
2000dc48:	3201      	adds	r2, #1
2000dc4a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < len; i++)
2000dc4c:	68fb      	ldr	r3, [r7, #12]
2000dc4e:	3301      	adds	r3, #1
2000dc50:	60fb      	str	r3, [r7, #12]
2000dc52:	7afb      	ldrb	r3, [r7, #11]
2000dc54:	68fa      	ldr	r2, [r7, #12]
2000dc56:	429a      	cmp	r2, r3
2000dc58:	dbe7      	blt.n	2000dc2a <SDK_TRACE_Print+0x76>
	}
}
2000dc5a:	bf00      	nop
2000dc5c:	bf00      	nop
2000dc5e:	3714      	adds	r7, #20
2000dc60:	46bd      	mov	sp, r7
2000dc62:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
2000dc66:	b004      	add	sp, #16
2000dc68:	4770      	bx	lr
2000dc6a:	bf00      	nop
2000dc6c:	2000fbb8 	.word	0x2000fbb8
2000dc70:	e0001004 	.word	0xe0001004
2000dc74:	431bde83 	.word	0x431bde83
2000dc78:	2000fb08 	.word	0x2000fb08
2000dc7c:	2000fb14 	.word	0x2000fb14

2000dc80 <SDK_TRACE_Dump>:
 * @param addr Address of data
 * @param size Size of data
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Dump(uint32_t addr, uint16_t size)
{
2000dc80:	b590      	push	{r4, r7, lr}
2000dc82:	b085      	sub	sp, #20
2000dc84:	af00      	add	r7, sp, #0
2000dc86:	6078      	str	r0, [r7, #4]
2000dc88:	460b      	mov	r3, r1
2000dc8a:	807b      	strh	r3, [r7, #2]

	*(__IO uint32_t *)(Dump_Write_Address+TI->dumpbuf_size) = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000dc8c:	4b24      	ldr	r3, [pc, #144]	; (2000dd20 <SDK_TRACE_Dump+0xa0>)
2000dc8e:	681c      	ldr	r4, [r3, #0]
2000dc90:	f001 f830 	bl	2000ecf4 <HAL_RCC_GetHCLKFreq>
2000dc94:	4603      	mov	r3, r0
2000dc96:	4a23      	ldr	r2, [pc, #140]	; (2000dd24 <SDK_TRACE_Dump+0xa4>)
2000dc98:	fba2 2303 	umull	r2, r3, r2, r3
2000dc9c:	0c9b      	lsrs	r3, r3, #18
2000dc9e:	4a22      	ldr	r2, [pc, #136]	; (2000dd28 <SDK_TRACE_Dump+0xa8>)
2000dca0:	6812      	ldr	r2, [r2, #0]
2000dca2:	6891      	ldr	r1, [r2, #8]
2000dca4:	4a21      	ldr	r2, [pc, #132]	; (2000dd2c <SDK_TRACE_Dump+0xac>)
2000dca6:	6812      	ldr	r2, [r2, #0]
2000dca8:	440a      	add	r2, r1
2000dcaa:	fbb4 f3f3 	udiv	r3, r4, r3
2000dcae:	6013      	str	r3, [r2, #0]
	TI->dumpbuf_size+=4;
2000dcb0:	4b1d      	ldr	r3, [pc, #116]	; (2000dd28 <SDK_TRACE_Dump+0xa8>)
2000dcb2:	681b      	ldr	r3, [r3, #0]
2000dcb4:	689a      	ldr	r2, [r3, #8]
2000dcb6:	4b1c      	ldr	r3, [pc, #112]	; (2000dd28 <SDK_TRACE_Dump+0xa8>)
2000dcb8:	681b      	ldr	r3, [r3, #0]
2000dcba:	3204      	adds	r2, #4
2000dcbc:	609a      	str	r2, [r3, #8]

	*(__IO uint16_t *)(Dump_Write_Address+TI->dumpbuf_size) = size;
2000dcbe:	4b1a      	ldr	r3, [pc, #104]	; (2000dd28 <SDK_TRACE_Dump+0xa8>)
2000dcc0:	681b      	ldr	r3, [r3, #0]
2000dcc2:	689a      	ldr	r2, [r3, #8]
2000dcc4:	4b19      	ldr	r3, [pc, #100]	; (2000dd2c <SDK_TRACE_Dump+0xac>)
2000dcc6:	681b      	ldr	r3, [r3, #0]
2000dcc8:	4413      	add	r3, r2
2000dcca:	461a      	mov	r2, r3
2000dccc:	887b      	ldrh	r3, [r7, #2]
2000dcce:	8013      	strh	r3, [r2, #0]
	TI->dumpbuf_size+=2;
2000dcd0:	4b15      	ldr	r3, [pc, #84]	; (2000dd28 <SDK_TRACE_Dump+0xa8>)
2000dcd2:	681b      	ldr	r3, [r3, #0]
2000dcd4:	689a      	ldr	r2, [r3, #8]
2000dcd6:	4b14      	ldr	r3, [pc, #80]	; (2000dd28 <SDK_TRACE_Dump+0xa8>)
2000dcd8:	681b      	ldr	r3, [r3, #0]
2000dcda:	3202      	adds	r2, #2
2000dcdc:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < size; i++)
2000dcde:	2300      	movs	r3, #0
2000dce0:	60fb      	str	r3, [r7, #12]
2000dce2:	e014      	b.n	2000dd0e <SDK_TRACE_Dump+0x8e>
	{
		*(__IO uint8_t *)(Dump_Write_Address+TI->dumpbuf_size) = *(__IO uint8_t*)(addr + i);
2000dce4:	68fa      	ldr	r2, [r7, #12]
2000dce6:	687b      	ldr	r3, [r7, #4]
2000dce8:	4413      	add	r3, r2
2000dcea:	4619      	mov	r1, r3
2000dcec:	4b0e      	ldr	r3, [pc, #56]	; (2000dd28 <SDK_TRACE_Dump+0xa8>)
2000dcee:	681b      	ldr	r3, [r3, #0]
2000dcf0:	689a      	ldr	r2, [r3, #8]
2000dcf2:	4b0e      	ldr	r3, [pc, #56]	; (2000dd2c <SDK_TRACE_Dump+0xac>)
2000dcf4:	681b      	ldr	r3, [r3, #0]
2000dcf6:	4413      	add	r3, r2
2000dcf8:	780a      	ldrb	r2, [r1, #0]
2000dcfa:	b2d2      	uxtb	r2, r2
2000dcfc:	701a      	strb	r2, [r3, #0]
		TI->dumpbuf_size++;
2000dcfe:	4b0a      	ldr	r3, [pc, #40]	; (2000dd28 <SDK_TRACE_Dump+0xa8>)
2000dd00:	681b      	ldr	r3, [r3, #0]
2000dd02:	689a      	ldr	r2, [r3, #8]
2000dd04:	3201      	adds	r2, #1
2000dd06:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < size; i++)
2000dd08:	68fb      	ldr	r3, [r7, #12]
2000dd0a:	3301      	adds	r3, #1
2000dd0c:	60fb      	str	r3, [r7, #12]
2000dd0e:	887b      	ldrh	r3, [r7, #2]
2000dd10:	68fa      	ldr	r2, [r7, #12]
2000dd12:	429a      	cmp	r2, r3
2000dd14:	dbe6      	blt.n	2000dce4 <SDK_TRACE_Dump+0x64>
	}
}
2000dd16:	bf00      	nop
2000dd18:	bf00      	nop
2000dd1a:	3714      	adds	r7, #20
2000dd1c:	46bd      	mov	sp, r7
2000dd1e:	bd90      	pop	{r4, r7, pc}
2000dd20:	e0001004 	.word	0xe0001004
2000dd24:	431bde83 	.word	0x431bde83
2000dd28:	2000fb08 	.word	0x2000fb08
2000dd2c:	2000fb18 	.word	0x2000fb18

2000dd30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
2000dd30:	f8df d034 	ldr.w	sp, [pc, #52]	; 2000dd68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
2000dd34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
2000dd36:	e003      	b.n	2000dd40 <LoopCopyDataInit>

2000dd38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
2000dd38:	4b0c      	ldr	r3, [pc, #48]	; (2000dd6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
2000dd3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
2000dd3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
2000dd3e:	3104      	adds	r1, #4

2000dd40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
2000dd40:	480b      	ldr	r0, [pc, #44]	; (2000dd70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
2000dd42:	4b0c      	ldr	r3, [pc, #48]	; (2000dd74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
2000dd44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
2000dd46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
2000dd48:	d3f6      	bcc.n	2000dd38 <CopyDataInit>
  ldr  r2, =_sbss
2000dd4a:	4a0b      	ldr	r2, [pc, #44]	; (2000dd78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
2000dd4c:	e002      	b.n	2000dd54 <LoopFillZerobss>

2000dd4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
2000dd4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
2000dd50:	f842 3b04 	str.w	r3, [r2], #4

2000dd54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
2000dd54:	4b09      	ldr	r3, [pc, #36]	; (2000dd7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
2000dd56:	429a      	cmp	r2, r3
  bcc  FillZerobss
2000dd58:	d3f9      	bcc.n	2000dd4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
2000dd5a:	f7ff fe69 	bl	2000da30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
2000dd5e:	f000 ffdb 	bl	2000ed18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2000dd62:	f7ff fcc3 	bl	2000d6ec <main>
  bx  lr    
2000dd66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
2000dd68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
2000dd6c:	2000fb04 	.word	0x2000fb04
  ldr  r0, =_sdata
2000dd70:	2000fb04 	.word	0x2000fb04
  ldr  r3, =_edata
2000dd74:	2000fb88 	.word	0x2000fb88
  ldr  r2, =_sbss
2000dd78:	2000fb88 	.word	0x2000fb88
  ldr  r3, = _ebss
2000dd7c:	2000fccc 	.word	0x2000fccc

2000dd80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
2000dd80:	e7fe      	b.n	2000dd80 <ADC_IRQHandler>
	...

2000dd84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
2000dd84:	b580      	push	{r7, lr}
2000dd86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
2000dd88:	4b0e      	ldr	r3, [pc, #56]	; (2000ddc4 <HAL_Init+0x40>)
2000dd8a:	681b      	ldr	r3, [r3, #0]
2000dd8c:	4a0d      	ldr	r2, [pc, #52]	; (2000ddc4 <HAL_Init+0x40>)
2000dd8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000dd92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
2000dd94:	4b0b      	ldr	r3, [pc, #44]	; (2000ddc4 <HAL_Init+0x40>)
2000dd96:	681b      	ldr	r3, [r3, #0]
2000dd98:	4a0a      	ldr	r2, [pc, #40]	; (2000ddc4 <HAL_Init+0x40>)
2000dd9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2000dd9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
2000dda0:	4b08      	ldr	r3, [pc, #32]	; (2000ddc4 <HAL_Init+0x40>)
2000dda2:	681b      	ldr	r3, [r3, #0]
2000dda4:	4a07      	ldr	r2, [pc, #28]	; (2000ddc4 <HAL_Init+0x40>)
2000dda6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000ddaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2000ddac:	2003      	movs	r0, #3
2000ddae:	f000 f931 	bl	2000e014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
2000ddb2:	2000      	movs	r0, #0
2000ddb4:	f000 f808 	bl	2000ddc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
2000ddb8:	f7ff fdae 	bl	2000d918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
2000ddbc:	2300      	movs	r3, #0
}
2000ddbe:	4618      	mov	r0, r3
2000ddc0:	bd80      	pop	{r7, pc}
2000ddc2:	bf00      	nop
2000ddc4:	40023c00 	.word	0x40023c00

2000ddc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
2000ddc8:	b580      	push	{r7, lr}
2000ddca:	b082      	sub	sp, #8
2000ddcc:	af00      	add	r7, sp, #0
2000ddce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
2000ddd0:	4b12      	ldr	r3, [pc, #72]	; (2000de1c <HAL_InitTick+0x54>)
2000ddd2:	681a      	ldr	r2, [r3, #0]
2000ddd4:	4b12      	ldr	r3, [pc, #72]	; (2000de20 <HAL_InitTick+0x58>)
2000ddd6:	781b      	ldrb	r3, [r3, #0]
2000ddd8:	4619      	mov	r1, r3
2000ddda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
2000ddde:	fbb3 f3f1 	udiv	r3, r3, r1
2000dde2:	fbb2 f3f3 	udiv	r3, r2, r3
2000dde6:	4618      	mov	r0, r3
2000dde8:	f000 f93b 	bl	2000e062 <HAL_SYSTICK_Config>
2000ddec:	4603      	mov	r3, r0
2000ddee:	2b00      	cmp	r3, #0
2000ddf0:	d001      	beq.n	2000ddf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
2000ddf2:	2301      	movs	r3, #1
2000ddf4:	e00e      	b.n	2000de14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2000ddf6:	687b      	ldr	r3, [r7, #4]
2000ddf8:	2b0f      	cmp	r3, #15
2000ddfa:	d80a      	bhi.n	2000de12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2000ddfc:	2200      	movs	r2, #0
2000ddfe:	6879      	ldr	r1, [r7, #4]
2000de00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000de04:	f000 f911 	bl	2000e02a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
2000de08:	4a06      	ldr	r2, [pc, #24]	; (2000de24 <HAL_InitTick+0x5c>)
2000de0a:	687b      	ldr	r3, [r7, #4]
2000de0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2000de0e:	2300      	movs	r3, #0
2000de10:	e000      	b.n	2000de14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
2000de12:	2301      	movs	r3, #1
}
2000de14:	4618      	mov	r0, r3
2000de16:	3708      	adds	r7, #8
2000de18:	46bd      	mov	sp, r7
2000de1a:	bd80      	pop	{r7, pc}
2000de1c:	2000fb04 	.word	0x2000fb04
2000de20:	2000fb20 	.word	0x2000fb20
2000de24:	2000fb1c 	.word	0x2000fb1c

2000de28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
2000de28:	b480      	push	{r7}
2000de2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
2000de2c:	4b06      	ldr	r3, [pc, #24]	; (2000de48 <HAL_IncTick+0x20>)
2000de2e:	781b      	ldrb	r3, [r3, #0]
2000de30:	461a      	mov	r2, r3
2000de32:	4b06      	ldr	r3, [pc, #24]	; (2000de4c <HAL_IncTick+0x24>)
2000de34:	681b      	ldr	r3, [r3, #0]
2000de36:	4413      	add	r3, r2
2000de38:	4a04      	ldr	r2, [pc, #16]	; (2000de4c <HAL_IncTick+0x24>)
2000de3a:	6013      	str	r3, [r2, #0]
}
2000de3c:	bf00      	nop
2000de3e:	46bd      	mov	sp, r7
2000de40:	f85d 7b04 	ldr.w	r7, [sp], #4
2000de44:	4770      	bx	lr
2000de46:	bf00      	nop
2000de48:	2000fb20 	.word	0x2000fb20
2000de4c:	2000fcb8 	.word	0x2000fcb8

2000de50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
2000de50:	b480      	push	{r7}
2000de52:	af00      	add	r7, sp, #0
  return uwTick;
2000de54:	4b03      	ldr	r3, [pc, #12]	; (2000de64 <HAL_GetTick+0x14>)
2000de56:	681b      	ldr	r3, [r3, #0]
}
2000de58:	4618      	mov	r0, r3
2000de5a:	46bd      	mov	sp, r7
2000de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000de60:	4770      	bx	lr
2000de62:	bf00      	nop
2000de64:	2000fcb8 	.word	0x2000fcb8

2000de68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
2000de68:	b580      	push	{r7, lr}
2000de6a:	b084      	sub	sp, #16
2000de6c:	af00      	add	r7, sp, #0
2000de6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
2000de70:	f7ff ffee 	bl	2000de50 <HAL_GetTick>
2000de74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
2000de76:	687b      	ldr	r3, [r7, #4]
2000de78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
2000de7a:	68fb      	ldr	r3, [r7, #12]
2000de7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
2000de80:	d005      	beq.n	2000de8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
2000de82:	4b0a      	ldr	r3, [pc, #40]	; (2000deac <HAL_Delay+0x44>)
2000de84:	781b      	ldrb	r3, [r3, #0]
2000de86:	461a      	mov	r2, r3
2000de88:	68fb      	ldr	r3, [r7, #12]
2000de8a:	4413      	add	r3, r2
2000de8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
2000de8e:	bf00      	nop
2000de90:	f7ff ffde 	bl	2000de50 <HAL_GetTick>
2000de94:	4602      	mov	r2, r0
2000de96:	68bb      	ldr	r3, [r7, #8]
2000de98:	1ad3      	subs	r3, r2, r3
2000de9a:	68fa      	ldr	r2, [r7, #12]
2000de9c:	429a      	cmp	r2, r3
2000de9e:	d8f7      	bhi.n	2000de90 <HAL_Delay+0x28>
  {
  }
}
2000dea0:	bf00      	nop
2000dea2:	bf00      	nop
2000dea4:	3710      	adds	r7, #16
2000dea6:	46bd      	mov	sp, r7
2000dea8:	bd80      	pop	{r7, pc}
2000deaa:	bf00      	nop
2000deac:	2000fb20 	.word	0x2000fb20

2000deb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000deb0:	b480      	push	{r7}
2000deb2:	b085      	sub	sp, #20
2000deb4:	af00      	add	r7, sp, #0
2000deb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
2000deb8:	687b      	ldr	r3, [r7, #4]
2000deba:	f003 0307 	and.w	r3, r3, #7
2000debe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
2000dec0:	4b0c      	ldr	r3, [pc, #48]	; (2000def4 <__NVIC_SetPriorityGrouping+0x44>)
2000dec2:	68db      	ldr	r3, [r3, #12]
2000dec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000dec6:	68ba      	ldr	r2, [r7, #8]
2000dec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
2000decc:	4013      	ands	r3, r2
2000dece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
2000ded0:	68fb      	ldr	r3, [r7, #12]
2000ded2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2000ded4:	68bb      	ldr	r3, [r7, #8]
2000ded6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
2000ded8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
2000dedc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2000dee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000dee2:	4a04      	ldr	r2, [pc, #16]	; (2000def4 <__NVIC_SetPriorityGrouping+0x44>)
2000dee4:	68bb      	ldr	r3, [r7, #8]
2000dee6:	60d3      	str	r3, [r2, #12]
}
2000dee8:	bf00      	nop
2000deea:	3714      	adds	r7, #20
2000deec:	46bd      	mov	sp, r7
2000deee:	f85d 7b04 	ldr.w	r7, [sp], #4
2000def2:	4770      	bx	lr
2000def4:	e000ed00 	.word	0xe000ed00

2000def8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
2000def8:	b480      	push	{r7}
2000defa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
2000defc:	4b04      	ldr	r3, [pc, #16]	; (2000df10 <__NVIC_GetPriorityGrouping+0x18>)
2000defe:	68db      	ldr	r3, [r3, #12]
2000df00:	0a1b      	lsrs	r3, r3, #8
2000df02:	f003 0307 	and.w	r3, r3, #7
}
2000df06:	4618      	mov	r0, r3
2000df08:	46bd      	mov	sp, r7
2000df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000df0e:	4770      	bx	lr
2000df10:	e000ed00 	.word	0xe000ed00

2000df14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
2000df14:	b480      	push	{r7}
2000df16:	b083      	sub	sp, #12
2000df18:	af00      	add	r7, sp, #0
2000df1a:	4603      	mov	r3, r0
2000df1c:	6039      	str	r1, [r7, #0]
2000df1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000df20:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000df24:	2b00      	cmp	r3, #0
2000df26:	db0a      	blt.n	2000df3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000df28:	683b      	ldr	r3, [r7, #0]
2000df2a:	b2da      	uxtb	r2, r3
2000df2c:	490c      	ldr	r1, [pc, #48]	; (2000df60 <__NVIC_SetPriority+0x4c>)
2000df2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000df32:	0112      	lsls	r2, r2, #4
2000df34:	b2d2      	uxtb	r2, r2
2000df36:	440b      	add	r3, r1
2000df38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
2000df3c:	e00a      	b.n	2000df54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000df3e:	683b      	ldr	r3, [r7, #0]
2000df40:	b2da      	uxtb	r2, r3
2000df42:	4908      	ldr	r1, [pc, #32]	; (2000df64 <__NVIC_SetPriority+0x50>)
2000df44:	79fb      	ldrb	r3, [r7, #7]
2000df46:	f003 030f 	and.w	r3, r3, #15
2000df4a:	3b04      	subs	r3, #4
2000df4c:	0112      	lsls	r2, r2, #4
2000df4e:	b2d2      	uxtb	r2, r2
2000df50:	440b      	add	r3, r1
2000df52:	761a      	strb	r2, [r3, #24]
}
2000df54:	bf00      	nop
2000df56:	370c      	adds	r7, #12
2000df58:	46bd      	mov	sp, r7
2000df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000df5e:	4770      	bx	lr
2000df60:	e000e100 	.word	0xe000e100
2000df64:	e000ed00 	.word	0xe000ed00

2000df68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2000df68:	b480      	push	{r7}
2000df6a:	b089      	sub	sp, #36	; 0x24
2000df6c:	af00      	add	r7, sp, #0
2000df6e:	60f8      	str	r0, [r7, #12]
2000df70:	60b9      	str	r1, [r7, #8]
2000df72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
2000df74:	68fb      	ldr	r3, [r7, #12]
2000df76:	f003 0307 	and.w	r3, r3, #7
2000df7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2000df7c:	69fb      	ldr	r3, [r7, #28]
2000df7e:	f1c3 0307 	rsb	r3, r3, #7
2000df82:	2b04      	cmp	r3, #4
2000df84:	bf28      	it	cs
2000df86:	2304      	movcs	r3, #4
2000df88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000df8a:	69fb      	ldr	r3, [r7, #28]
2000df8c:	3304      	adds	r3, #4
2000df8e:	2b06      	cmp	r3, #6
2000df90:	d902      	bls.n	2000df98 <NVIC_EncodePriority+0x30>
2000df92:	69fb      	ldr	r3, [r7, #28]
2000df94:	3b03      	subs	r3, #3
2000df96:	e000      	b.n	2000df9a <NVIC_EncodePriority+0x32>
2000df98:	2300      	movs	r3, #0
2000df9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000df9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2000dfa0:	69bb      	ldr	r3, [r7, #24]
2000dfa2:	fa02 f303 	lsl.w	r3, r2, r3
2000dfa6:	43da      	mvns	r2, r3
2000dfa8:	68bb      	ldr	r3, [r7, #8]
2000dfaa:	401a      	ands	r2, r3
2000dfac:	697b      	ldr	r3, [r7, #20]
2000dfae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2000dfb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
2000dfb4:	697b      	ldr	r3, [r7, #20]
2000dfb6:	fa01 f303 	lsl.w	r3, r1, r3
2000dfba:	43d9      	mvns	r1, r3
2000dfbc:	687b      	ldr	r3, [r7, #4]
2000dfbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000dfc0:	4313      	orrs	r3, r2
         );
}
2000dfc2:	4618      	mov	r0, r3
2000dfc4:	3724      	adds	r7, #36	; 0x24
2000dfc6:	46bd      	mov	sp, r7
2000dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dfcc:	4770      	bx	lr
	...

2000dfd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
2000dfd0:	b580      	push	{r7, lr}
2000dfd2:	b082      	sub	sp, #8
2000dfd4:	af00      	add	r7, sp, #0
2000dfd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
2000dfd8:	687b      	ldr	r3, [r7, #4]
2000dfda:	3b01      	subs	r3, #1
2000dfdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2000dfe0:	d301      	bcc.n	2000dfe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
2000dfe2:	2301      	movs	r3, #1
2000dfe4:	e00f      	b.n	2000e006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000dfe6:	4a0a      	ldr	r2, [pc, #40]	; (2000e010 <SysTick_Config+0x40>)
2000dfe8:	687b      	ldr	r3, [r7, #4]
2000dfea:	3b01      	subs	r3, #1
2000dfec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000dfee:	210f      	movs	r1, #15
2000dff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000dff4:	f7ff ff8e 	bl	2000df14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000dff8:	4b05      	ldr	r3, [pc, #20]	; (2000e010 <SysTick_Config+0x40>)
2000dffa:	2200      	movs	r2, #0
2000dffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2000dffe:	4b04      	ldr	r3, [pc, #16]	; (2000e010 <SysTick_Config+0x40>)
2000e000:	2207      	movs	r2, #7
2000e002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
2000e004:	2300      	movs	r3, #0
}
2000e006:	4618      	mov	r0, r3
2000e008:	3708      	adds	r7, #8
2000e00a:	46bd      	mov	sp, r7
2000e00c:	bd80      	pop	{r7, pc}
2000e00e:	bf00      	nop
2000e010:	e000e010 	.word	0xe000e010

2000e014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000e014:	b580      	push	{r7, lr}
2000e016:	b082      	sub	sp, #8
2000e018:	af00      	add	r7, sp, #0
2000e01a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
2000e01c:	6878      	ldr	r0, [r7, #4]
2000e01e:	f7ff ff47 	bl	2000deb0 <__NVIC_SetPriorityGrouping>
}
2000e022:	bf00      	nop
2000e024:	3708      	adds	r7, #8
2000e026:	46bd      	mov	sp, r7
2000e028:	bd80      	pop	{r7, pc}

2000e02a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
2000e02a:	b580      	push	{r7, lr}
2000e02c:	b086      	sub	sp, #24
2000e02e:	af00      	add	r7, sp, #0
2000e030:	4603      	mov	r3, r0
2000e032:	60b9      	str	r1, [r7, #8]
2000e034:	607a      	str	r2, [r7, #4]
2000e036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
2000e038:	2300      	movs	r3, #0
2000e03a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
2000e03c:	f7ff ff5c 	bl	2000def8 <__NVIC_GetPriorityGrouping>
2000e040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2000e042:	687a      	ldr	r2, [r7, #4]
2000e044:	68b9      	ldr	r1, [r7, #8]
2000e046:	6978      	ldr	r0, [r7, #20]
2000e048:	f7ff ff8e 	bl	2000df68 <NVIC_EncodePriority>
2000e04c:	4602      	mov	r2, r0
2000e04e:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000e052:	4611      	mov	r1, r2
2000e054:	4618      	mov	r0, r3
2000e056:	f7ff ff5d 	bl	2000df14 <__NVIC_SetPriority>
}
2000e05a:	bf00      	nop
2000e05c:	3718      	adds	r7, #24
2000e05e:	46bd      	mov	sp, r7
2000e060:	bd80      	pop	{r7, pc}

2000e062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000e062:	b580      	push	{r7, lr}
2000e064:	b082      	sub	sp, #8
2000e066:	af00      	add	r7, sp, #0
2000e068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2000e06a:	6878      	ldr	r0, [r7, #4]
2000e06c:	f7ff ffb0 	bl	2000dfd0 <SysTick_Config>
2000e070:	4603      	mov	r3, r0
}
2000e072:	4618      	mov	r0, r3
2000e074:	3708      	adds	r7, #8
2000e076:	46bd      	mov	sp, r7
2000e078:	bd80      	pop	{r7, pc}
	...

2000e07c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2000e07c:	b480      	push	{r7}
2000e07e:	b089      	sub	sp, #36	; 0x24
2000e080:	af00      	add	r7, sp, #0
2000e082:	6078      	str	r0, [r7, #4]
2000e084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
2000e086:	2300      	movs	r3, #0
2000e088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
2000e08a:	2300      	movs	r3, #0
2000e08c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
2000e08e:	2300      	movs	r3, #0
2000e090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
2000e092:	2300      	movs	r3, #0
2000e094:	61fb      	str	r3, [r7, #28]
2000e096:	e16b      	b.n	2000e370 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
2000e098:	2201      	movs	r2, #1
2000e09a:	69fb      	ldr	r3, [r7, #28]
2000e09c:	fa02 f303 	lsl.w	r3, r2, r3
2000e0a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
2000e0a2:	683b      	ldr	r3, [r7, #0]
2000e0a4:	681b      	ldr	r3, [r3, #0]
2000e0a6:	697a      	ldr	r2, [r7, #20]
2000e0a8:	4013      	ands	r3, r2
2000e0aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
2000e0ac:	693a      	ldr	r2, [r7, #16]
2000e0ae:	697b      	ldr	r3, [r7, #20]
2000e0b0:	429a      	cmp	r2, r3
2000e0b2:	f040 815a 	bne.w	2000e36a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000e0b6:	683b      	ldr	r3, [r7, #0]
2000e0b8:	685b      	ldr	r3, [r3, #4]
2000e0ba:	2b01      	cmp	r3, #1
2000e0bc:	d00b      	beq.n	2000e0d6 <HAL_GPIO_Init+0x5a>
2000e0be:	683b      	ldr	r3, [r7, #0]
2000e0c0:	685b      	ldr	r3, [r3, #4]
2000e0c2:	2b02      	cmp	r3, #2
2000e0c4:	d007      	beq.n	2000e0d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000e0c6:	683b      	ldr	r3, [r7, #0]
2000e0c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000e0ca:	2b11      	cmp	r3, #17
2000e0cc:	d003      	beq.n	2000e0d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000e0ce:	683b      	ldr	r3, [r7, #0]
2000e0d0:	685b      	ldr	r3, [r3, #4]
2000e0d2:	2b12      	cmp	r3, #18
2000e0d4:	d130      	bne.n	2000e138 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
2000e0d6:	687b      	ldr	r3, [r7, #4]
2000e0d8:	689b      	ldr	r3, [r3, #8]
2000e0da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
2000e0dc:	69fb      	ldr	r3, [r7, #28]
2000e0de:	005b      	lsls	r3, r3, #1
2000e0e0:	2203      	movs	r2, #3
2000e0e2:	fa02 f303 	lsl.w	r3, r2, r3
2000e0e6:	43db      	mvns	r3, r3
2000e0e8:	69ba      	ldr	r2, [r7, #24]
2000e0ea:	4013      	ands	r3, r2
2000e0ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2000e0ee:	683b      	ldr	r3, [r7, #0]
2000e0f0:	68da      	ldr	r2, [r3, #12]
2000e0f2:	69fb      	ldr	r3, [r7, #28]
2000e0f4:	005b      	lsls	r3, r3, #1
2000e0f6:	fa02 f303 	lsl.w	r3, r2, r3
2000e0fa:	69ba      	ldr	r2, [r7, #24]
2000e0fc:	4313      	orrs	r3, r2
2000e0fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
2000e100:	687b      	ldr	r3, [r7, #4]
2000e102:	69ba      	ldr	r2, [r7, #24]
2000e104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2000e106:	687b      	ldr	r3, [r7, #4]
2000e108:	685b      	ldr	r3, [r3, #4]
2000e10a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
2000e10c:	2201      	movs	r2, #1
2000e10e:	69fb      	ldr	r3, [r7, #28]
2000e110:	fa02 f303 	lsl.w	r3, r2, r3
2000e114:	43db      	mvns	r3, r3
2000e116:	69ba      	ldr	r2, [r7, #24]
2000e118:	4013      	ands	r3, r2
2000e11a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
2000e11c:	683b      	ldr	r3, [r7, #0]
2000e11e:	685b      	ldr	r3, [r3, #4]
2000e120:	091b      	lsrs	r3, r3, #4
2000e122:	f003 0201 	and.w	r2, r3, #1
2000e126:	69fb      	ldr	r3, [r7, #28]
2000e128:	fa02 f303 	lsl.w	r3, r2, r3
2000e12c:	69ba      	ldr	r2, [r7, #24]
2000e12e:	4313      	orrs	r3, r2
2000e130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2000e132:	687b      	ldr	r3, [r7, #4]
2000e134:	69ba      	ldr	r2, [r7, #24]
2000e136:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
2000e138:	687b      	ldr	r3, [r7, #4]
2000e13a:	68db      	ldr	r3, [r3, #12]
2000e13c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2000e13e:	69fb      	ldr	r3, [r7, #28]
2000e140:	005b      	lsls	r3, r3, #1
2000e142:	2203      	movs	r2, #3
2000e144:	fa02 f303 	lsl.w	r3, r2, r3
2000e148:	43db      	mvns	r3, r3
2000e14a:	69ba      	ldr	r2, [r7, #24]
2000e14c:	4013      	ands	r3, r2
2000e14e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2000e150:	683b      	ldr	r3, [r7, #0]
2000e152:	689a      	ldr	r2, [r3, #8]
2000e154:	69fb      	ldr	r3, [r7, #28]
2000e156:	005b      	lsls	r3, r3, #1
2000e158:	fa02 f303 	lsl.w	r3, r2, r3
2000e15c:	69ba      	ldr	r2, [r7, #24]
2000e15e:	4313      	orrs	r3, r2
2000e160:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
2000e162:	687b      	ldr	r3, [r7, #4]
2000e164:	69ba      	ldr	r2, [r7, #24]
2000e166:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000e168:	683b      	ldr	r3, [r7, #0]
2000e16a:	685b      	ldr	r3, [r3, #4]
2000e16c:	2b02      	cmp	r3, #2
2000e16e:	d003      	beq.n	2000e178 <HAL_GPIO_Init+0xfc>
2000e170:	683b      	ldr	r3, [r7, #0]
2000e172:	685b      	ldr	r3, [r3, #4]
2000e174:	2b12      	cmp	r3, #18
2000e176:	d123      	bne.n	2000e1c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2000e178:	69fb      	ldr	r3, [r7, #28]
2000e17a:	08da      	lsrs	r2, r3, #3
2000e17c:	687b      	ldr	r3, [r7, #4]
2000e17e:	3208      	adds	r2, #8
2000e180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000e184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
2000e186:	69fb      	ldr	r3, [r7, #28]
2000e188:	f003 0307 	and.w	r3, r3, #7
2000e18c:	009b      	lsls	r3, r3, #2
2000e18e:	220f      	movs	r2, #15
2000e190:	fa02 f303 	lsl.w	r3, r2, r3
2000e194:	43db      	mvns	r3, r3
2000e196:	69ba      	ldr	r2, [r7, #24]
2000e198:	4013      	ands	r3, r2
2000e19a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
2000e19c:	683b      	ldr	r3, [r7, #0]
2000e19e:	691a      	ldr	r2, [r3, #16]
2000e1a0:	69fb      	ldr	r3, [r7, #28]
2000e1a2:	f003 0307 	and.w	r3, r3, #7
2000e1a6:	009b      	lsls	r3, r3, #2
2000e1a8:	fa02 f303 	lsl.w	r3, r2, r3
2000e1ac:	69ba      	ldr	r2, [r7, #24]
2000e1ae:	4313      	orrs	r3, r2
2000e1b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
2000e1b2:	69fb      	ldr	r3, [r7, #28]
2000e1b4:	08da      	lsrs	r2, r3, #3
2000e1b6:	687b      	ldr	r3, [r7, #4]
2000e1b8:	3208      	adds	r2, #8
2000e1ba:	69b9      	ldr	r1, [r7, #24]
2000e1bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2000e1c0:	687b      	ldr	r3, [r7, #4]
2000e1c2:	681b      	ldr	r3, [r3, #0]
2000e1c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
2000e1c6:	69fb      	ldr	r3, [r7, #28]
2000e1c8:	005b      	lsls	r3, r3, #1
2000e1ca:	2203      	movs	r2, #3
2000e1cc:	fa02 f303 	lsl.w	r3, r2, r3
2000e1d0:	43db      	mvns	r3, r3
2000e1d2:	69ba      	ldr	r2, [r7, #24]
2000e1d4:	4013      	ands	r3, r2
2000e1d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2000e1d8:	683b      	ldr	r3, [r7, #0]
2000e1da:	685b      	ldr	r3, [r3, #4]
2000e1dc:	f003 0203 	and.w	r2, r3, #3
2000e1e0:	69fb      	ldr	r3, [r7, #28]
2000e1e2:	005b      	lsls	r3, r3, #1
2000e1e4:	fa02 f303 	lsl.w	r3, r2, r3
2000e1e8:	69ba      	ldr	r2, [r7, #24]
2000e1ea:	4313      	orrs	r3, r2
2000e1ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2000e1ee:	687b      	ldr	r3, [r7, #4]
2000e1f0:	69ba      	ldr	r2, [r7, #24]
2000e1f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
2000e1f4:	683b      	ldr	r3, [r7, #0]
2000e1f6:	685b      	ldr	r3, [r3, #4]
2000e1f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e1fc:	2b00      	cmp	r3, #0
2000e1fe:	f000 80b4 	beq.w	2000e36a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2000e202:	2300      	movs	r3, #0
2000e204:	60fb      	str	r3, [r7, #12]
2000e206:	4b60      	ldr	r3, [pc, #384]	; (2000e388 <HAL_GPIO_Init+0x30c>)
2000e208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e20a:	4a5f      	ldr	r2, [pc, #380]	; (2000e388 <HAL_GPIO_Init+0x30c>)
2000e20c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000e210:	6453      	str	r3, [r2, #68]	; 0x44
2000e212:	4b5d      	ldr	r3, [pc, #372]	; (2000e388 <HAL_GPIO_Init+0x30c>)
2000e214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000e21a:	60fb      	str	r3, [r7, #12]
2000e21c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2000e21e:	4a5b      	ldr	r2, [pc, #364]	; (2000e38c <HAL_GPIO_Init+0x310>)
2000e220:	69fb      	ldr	r3, [r7, #28]
2000e222:	089b      	lsrs	r3, r3, #2
2000e224:	3302      	adds	r3, #2
2000e226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2000e22a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
2000e22c:	69fb      	ldr	r3, [r7, #28]
2000e22e:	f003 0303 	and.w	r3, r3, #3
2000e232:	009b      	lsls	r3, r3, #2
2000e234:	220f      	movs	r2, #15
2000e236:	fa02 f303 	lsl.w	r3, r2, r3
2000e23a:	43db      	mvns	r3, r3
2000e23c:	69ba      	ldr	r2, [r7, #24]
2000e23e:	4013      	ands	r3, r2
2000e240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
2000e242:	687b      	ldr	r3, [r7, #4]
2000e244:	4a52      	ldr	r2, [pc, #328]	; (2000e390 <HAL_GPIO_Init+0x314>)
2000e246:	4293      	cmp	r3, r2
2000e248:	d02b      	beq.n	2000e2a2 <HAL_GPIO_Init+0x226>
2000e24a:	687b      	ldr	r3, [r7, #4]
2000e24c:	4a51      	ldr	r2, [pc, #324]	; (2000e394 <HAL_GPIO_Init+0x318>)
2000e24e:	4293      	cmp	r3, r2
2000e250:	d025      	beq.n	2000e29e <HAL_GPIO_Init+0x222>
2000e252:	687b      	ldr	r3, [r7, #4]
2000e254:	4a50      	ldr	r2, [pc, #320]	; (2000e398 <HAL_GPIO_Init+0x31c>)
2000e256:	4293      	cmp	r3, r2
2000e258:	d01f      	beq.n	2000e29a <HAL_GPIO_Init+0x21e>
2000e25a:	687b      	ldr	r3, [r7, #4]
2000e25c:	4a4f      	ldr	r2, [pc, #316]	; (2000e39c <HAL_GPIO_Init+0x320>)
2000e25e:	4293      	cmp	r3, r2
2000e260:	d019      	beq.n	2000e296 <HAL_GPIO_Init+0x21a>
2000e262:	687b      	ldr	r3, [r7, #4]
2000e264:	4a4e      	ldr	r2, [pc, #312]	; (2000e3a0 <HAL_GPIO_Init+0x324>)
2000e266:	4293      	cmp	r3, r2
2000e268:	d013      	beq.n	2000e292 <HAL_GPIO_Init+0x216>
2000e26a:	687b      	ldr	r3, [r7, #4]
2000e26c:	4a4d      	ldr	r2, [pc, #308]	; (2000e3a4 <HAL_GPIO_Init+0x328>)
2000e26e:	4293      	cmp	r3, r2
2000e270:	d00d      	beq.n	2000e28e <HAL_GPIO_Init+0x212>
2000e272:	687b      	ldr	r3, [r7, #4]
2000e274:	4a4c      	ldr	r2, [pc, #304]	; (2000e3a8 <HAL_GPIO_Init+0x32c>)
2000e276:	4293      	cmp	r3, r2
2000e278:	d007      	beq.n	2000e28a <HAL_GPIO_Init+0x20e>
2000e27a:	687b      	ldr	r3, [r7, #4]
2000e27c:	4a4b      	ldr	r2, [pc, #300]	; (2000e3ac <HAL_GPIO_Init+0x330>)
2000e27e:	4293      	cmp	r3, r2
2000e280:	d101      	bne.n	2000e286 <HAL_GPIO_Init+0x20a>
2000e282:	2307      	movs	r3, #7
2000e284:	e00e      	b.n	2000e2a4 <HAL_GPIO_Init+0x228>
2000e286:	2308      	movs	r3, #8
2000e288:	e00c      	b.n	2000e2a4 <HAL_GPIO_Init+0x228>
2000e28a:	2306      	movs	r3, #6
2000e28c:	e00a      	b.n	2000e2a4 <HAL_GPIO_Init+0x228>
2000e28e:	2305      	movs	r3, #5
2000e290:	e008      	b.n	2000e2a4 <HAL_GPIO_Init+0x228>
2000e292:	2304      	movs	r3, #4
2000e294:	e006      	b.n	2000e2a4 <HAL_GPIO_Init+0x228>
2000e296:	2303      	movs	r3, #3
2000e298:	e004      	b.n	2000e2a4 <HAL_GPIO_Init+0x228>
2000e29a:	2302      	movs	r3, #2
2000e29c:	e002      	b.n	2000e2a4 <HAL_GPIO_Init+0x228>
2000e29e:	2301      	movs	r3, #1
2000e2a0:	e000      	b.n	2000e2a4 <HAL_GPIO_Init+0x228>
2000e2a2:	2300      	movs	r3, #0
2000e2a4:	69fa      	ldr	r2, [r7, #28]
2000e2a6:	f002 0203 	and.w	r2, r2, #3
2000e2aa:	0092      	lsls	r2, r2, #2
2000e2ac:	4093      	lsls	r3, r2
2000e2ae:	69ba      	ldr	r2, [r7, #24]
2000e2b0:	4313      	orrs	r3, r2
2000e2b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
2000e2b4:	4935      	ldr	r1, [pc, #212]	; (2000e38c <HAL_GPIO_Init+0x310>)
2000e2b6:	69fb      	ldr	r3, [r7, #28]
2000e2b8:	089b      	lsrs	r3, r3, #2
2000e2ba:	3302      	adds	r3, #2
2000e2bc:	69ba      	ldr	r2, [r7, #24]
2000e2be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
2000e2c2:	4b3b      	ldr	r3, [pc, #236]	; (2000e3b0 <HAL_GPIO_Init+0x334>)
2000e2c4:	681b      	ldr	r3, [r3, #0]
2000e2c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e2c8:	693b      	ldr	r3, [r7, #16]
2000e2ca:	43db      	mvns	r3, r3
2000e2cc:	69ba      	ldr	r2, [r7, #24]
2000e2ce:	4013      	ands	r3, r2
2000e2d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
2000e2d2:	683b      	ldr	r3, [r7, #0]
2000e2d4:	685b      	ldr	r3, [r3, #4]
2000e2d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000e2da:	2b00      	cmp	r3, #0
2000e2dc:	d003      	beq.n	2000e2e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
2000e2de:	69ba      	ldr	r2, [r7, #24]
2000e2e0:	693b      	ldr	r3, [r7, #16]
2000e2e2:	4313      	orrs	r3, r2
2000e2e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
2000e2e6:	4a32      	ldr	r2, [pc, #200]	; (2000e3b0 <HAL_GPIO_Init+0x334>)
2000e2e8:	69bb      	ldr	r3, [r7, #24]
2000e2ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
2000e2ec:	4b30      	ldr	r3, [pc, #192]	; (2000e3b0 <HAL_GPIO_Init+0x334>)
2000e2ee:	685b      	ldr	r3, [r3, #4]
2000e2f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e2f2:	693b      	ldr	r3, [r7, #16]
2000e2f4:	43db      	mvns	r3, r3
2000e2f6:	69ba      	ldr	r2, [r7, #24]
2000e2f8:	4013      	ands	r3, r2
2000e2fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
2000e2fc:	683b      	ldr	r3, [r7, #0]
2000e2fe:	685b      	ldr	r3, [r3, #4]
2000e300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e304:	2b00      	cmp	r3, #0
2000e306:	d003      	beq.n	2000e310 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
2000e308:	69ba      	ldr	r2, [r7, #24]
2000e30a:	693b      	ldr	r3, [r7, #16]
2000e30c:	4313      	orrs	r3, r2
2000e30e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
2000e310:	4a27      	ldr	r2, [pc, #156]	; (2000e3b0 <HAL_GPIO_Init+0x334>)
2000e312:	69bb      	ldr	r3, [r7, #24]
2000e314:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
2000e316:	4b26      	ldr	r3, [pc, #152]	; (2000e3b0 <HAL_GPIO_Init+0x334>)
2000e318:	689b      	ldr	r3, [r3, #8]
2000e31a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e31c:	693b      	ldr	r3, [r7, #16]
2000e31e:	43db      	mvns	r3, r3
2000e320:	69ba      	ldr	r2, [r7, #24]
2000e322:	4013      	ands	r3, r2
2000e324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
2000e326:	683b      	ldr	r3, [r7, #0]
2000e328:	685b      	ldr	r3, [r3, #4]
2000e32a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2000e32e:	2b00      	cmp	r3, #0
2000e330:	d003      	beq.n	2000e33a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
2000e332:	69ba      	ldr	r2, [r7, #24]
2000e334:	693b      	ldr	r3, [r7, #16]
2000e336:	4313      	orrs	r3, r2
2000e338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
2000e33a:	4a1d      	ldr	r2, [pc, #116]	; (2000e3b0 <HAL_GPIO_Init+0x334>)
2000e33c:	69bb      	ldr	r3, [r7, #24]
2000e33e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
2000e340:	4b1b      	ldr	r3, [pc, #108]	; (2000e3b0 <HAL_GPIO_Init+0x334>)
2000e342:	68db      	ldr	r3, [r3, #12]
2000e344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e346:	693b      	ldr	r3, [r7, #16]
2000e348:	43db      	mvns	r3, r3
2000e34a:	69ba      	ldr	r2, [r7, #24]
2000e34c:	4013      	ands	r3, r2
2000e34e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
2000e350:	683b      	ldr	r3, [r7, #0]
2000e352:	685b      	ldr	r3, [r3, #4]
2000e354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2000e358:	2b00      	cmp	r3, #0
2000e35a:	d003      	beq.n	2000e364 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
2000e35c:	69ba      	ldr	r2, [r7, #24]
2000e35e:	693b      	ldr	r3, [r7, #16]
2000e360:	4313      	orrs	r3, r2
2000e362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
2000e364:	4a12      	ldr	r2, [pc, #72]	; (2000e3b0 <HAL_GPIO_Init+0x334>)
2000e366:	69bb      	ldr	r3, [r7, #24]
2000e368:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
2000e36a:	69fb      	ldr	r3, [r7, #28]
2000e36c:	3301      	adds	r3, #1
2000e36e:	61fb      	str	r3, [r7, #28]
2000e370:	69fb      	ldr	r3, [r7, #28]
2000e372:	2b0f      	cmp	r3, #15
2000e374:	f67f ae90 	bls.w	2000e098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
2000e378:	bf00      	nop
2000e37a:	bf00      	nop
2000e37c:	3724      	adds	r7, #36	; 0x24
2000e37e:	46bd      	mov	sp, r7
2000e380:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e384:	4770      	bx	lr
2000e386:	bf00      	nop
2000e388:	40023800 	.word	0x40023800
2000e38c:	40013800 	.word	0x40013800
2000e390:	40020000 	.word	0x40020000
2000e394:	40020400 	.word	0x40020400
2000e398:	40020800 	.word	0x40020800
2000e39c:	40020c00 	.word	0x40020c00
2000e3a0:	40021000 	.word	0x40021000
2000e3a4:	40021400 	.word	0x40021400
2000e3a8:	40021800 	.word	0x40021800
2000e3ac:	40021c00 	.word	0x40021c00
2000e3b0:	40013c00 	.word	0x40013c00

2000e3b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000e3b4:	b480      	push	{r7}
2000e3b6:	b085      	sub	sp, #20
2000e3b8:	af00      	add	r7, sp, #0
2000e3ba:	6078      	str	r0, [r7, #4]
2000e3bc:	460b      	mov	r3, r1
2000e3be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
2000e3c0:	687b      	ldr	r3, [r7, #4]
2000e3c2:	691a      	ldr	r2, [r3, #16]
2000e3c4:	887b      	ldrh	r3, [r7, #2]
2000e3c6:	4013      	ands	r3, r2
2000e3c8:	2b00      	cmp	r3, #0
2000e3ca:	d002      	beq.n	2000e3d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
2000e3cc:	2301      	movs	r3, #1
2000e3ce:	73fb      	strb	r3, [r7, #15]
2000e3d0:	e001      	b.n	2000e3d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
2000e3d2:	2300      	movs	r3, #0
2000e3d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
2000e3d6:	7bfb      	ldrb	r3, [r7, #15]
}
2000e3d8:	4618      	mov	r0, r3
2000e3da:	3714      	adds	r7, #20
2000e3dc:	46bd      	mov	sp, r7
2000e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e3e2:	4770      	bx	lr

2000e3e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2000e3e4:	b480      	push	{r7}
2000e3e6:	b083      	sub	sp, #12
2000e3e8:	af00      	add	r7, sp, #0
2000e3ea:	6078      	str	r0, [r7, #4]
2000e3ec:	460b      	mov	r3, r1
2000e3ee:	807b      	strh	r3, [r7, #2]
2000e3f0:	4613      	mov	r3, r2
2000e3f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
2000e3f4:	787b      	ldrb	r3, [r7, #1]
2000e3f6:	2b00      	cmp	r3, #0
2000e3f8:	d003      	beq.n	2000e402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2000e3fa:	887a      	ldrh	r2, [r7, #2]
2000e3fc:	687b      	ldr	r3, [r7, #4]
2000e3fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
2000e400:	e003      	b.n	2000e40a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
2000e402:	887b      	ldrh	r3, [r7, #2]
2000e404:	041a      	lsls	r2, r3, #16
2000e406:	687b      	ldr	r3, [r7, #4]
2000e408:	619a      	str	r2, [r3, #24]
}
2000e40a:	bf00      	nop
2000e40c:	370c      	adds	r7, #12
2000e40e:	46bd      	mov	sp, r7
2000e410:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e414:	4770      	bx	lr

2000e416 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000e416:	b480      	push	{r7}
2000e418:	b083      	sub	sp, #12
2000e41a:	af00      	add	r7, sp, #0
2000e41c:	6078      	str	r0, [r7, #4]
2000e41e:	460b      	mov	r3, r1
2000e420:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
2000e422:	687b      	ldr	r3, [r7, #4]
2000e424:	695a      	ldr	r2, [r3, #20]
2000e426:	887b      	ldrh	r3, [r7, #2]
2000e428:	401a      	ands	r2, r3
2000e42a:	887b      	ldrh	r3, [r7, #2]
2000e42c:	429a      	cmp	r2, r3
2000e42e:	d104      	bne.n	2000e43a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
2000e430:	887b      	ldrh	r3, [r7, #2]
2000e432:	041a      	lsls	r2, r3, #16
2000e434:	687b      	ldr	r3, [r7, #4]
2000e436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
2000e438:	e002      	b.n	2000e440 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
2000e43a:	887a      	ldrh	r2, [r7, #2]
2000e43c:	687b      	ldr	r3, [r7, #4]
2000e43e:	619a      	str	r2, [r3, #24]
}
2000e440:	bf00      	nop
2000e442:	370c      	adds	r7, #12
2000e444:	46bd      	mov	sp, r7
2000e446:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e44a:	4770      	bx	lr

2000e44c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
2000e44c:	b580      	push	{r7, lr}
2000e44e:	b084      	sub	sp, #16
2000e450:	af00      	add	r7, sp, #0
2000e452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
2000e454:	687b      	ldr	r3, [r7, #4]
2000e456:	2b00      	cmp	r3, #0
2000e458:	d101      	bne.n	2000e45e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
2000e45a:	2301      	movs	r3, #1
2000e45c:	e02b      	b.n	2000e4b6 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
2000e45e:	687b      	ldr	r3, [r7, #4]
2000e460:	681b      	ldr	r3, [r3, #0]
2000e462:	f64c 42cc 	movw	r2, #52428	; 0xcccc
2000e466:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
2000e468:	687b      	ldr	r3, [r7, #4]
2000e46a:	681b      	ldr	r3, [r3, #0]
2000e46c:	f245 5255 	movw	r2, #21845	; 0x5555
2000e470:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
2000e472:	687b      	ldr	r3, [r7, #4]
2000e474:	681b      	ldr	r3, [r3, #0]
2000e476:	687a      	ldr	r2, [r7, #4]
2000e478:	6852      	ldr	r2, [r2, #4]
2000e47a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
2000e47c:	687b      	ldr	r3, [r7, #4]
2000e47e:	681b      	ldr	r3, [r3, #0]
2000e480:	687a      	ldr	r2, [r7, #4]
2000e482:	6892      	ldr	r2, [r2, #8]
2000e484:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
2000e486:	f7ff fce3 	bl	2000de50 <HAL_GetTick>
2000e48a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
2000e48c:	e008      	b.n	2000e4a0 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
2000e48e:	f7ff fcdf 	bl	2000de50 <HAL_GetTick>
2000e492:	4602      	mov	r2, r0
2000e494:	68fb      	ldr	r3, [r7, #12]
2000e496:	1ad3      	subs	r3, r2, r3
2000e498:	2b30      	cmp	r3, #48	; 0x30
2000e49a:	d901      	bls.n	2000e4a0 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
2000e49c:	2303      	movs	r3, #3
2000e49e:	e00a      	b.n	2000e4b6 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
2000e4a0:	687b      	ldr	r3, [r7, #4]
2000e4a2:	681b      	ldr	r3, [r3, #0]
2000e4a4:	68db      	ldr	r3, [r3, #12]
2000e4a6:	2b00      	cmp	r3, #0
2000e4a8:	d1f1      	bne.n	2000e48e <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
2000e4aa:	687b      	ldr	r3, [r7, #4]
2000e4ac:	681b      	ldr	r3, [r3, #0]
2000e4ae:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
2000e4b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
2000e4b4:	2300      	movs	r3, #0
}
2000e4b6:	4618      	mov	r0, r3
2000e4b8:	3710      	adds	r7, #16
2000e4ba:	46bd      	mov	sp, r7
2000e4bc:	bd80      	pop	{r7, pc}
	...

2000e4c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2000e4c0:	b580      	push	{r7, lr}
2000e4c2:	b086      	sub	sp, #24
2000e4c4:	af00      	add	r7, sp, #0
2000e4c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
2000e4c8:	687b      	ldr	r3, [r7, #4]
2000e4ca:	2b00      	cmp	r3, #0
2000e4cc:	d101      	bne.n	2000e4d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
2000e4ce:	2301      	movs	r3, #1
2000e4d0:	e25e      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2000e4d2:	687b      	ldr	r3, [r7, #4]
2000e4d4:	681b      	ldr	r3, [r3, #0]
2000e4d6:	f003 0301 	and.w	r3, r3, #1
2000e4da:	2b00      	cmp	r3, #0
2000e4dc:	d075      	beq.n	2000e5ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000e4de:	4b88      	ldr	r3, [pc, #544]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e4e0:	689b      	ldr	r3, [r3, #8]
2000e4e2:	f003 030c 	and.w	r3, r3, #12
2000e4e6:	2b04      	cmp	r3, #4
2000e4e8:	d00c      	beq.n	2000e504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000e4ea:	4b85      	ldr	r3, [pc, #532]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e4ec:	689b      	ldr	r3, [r3, #8]
2000e4ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000e4f2:	2b08      	cmp	r3, #8
2000e4f4:	d112      	bne.n	2000e51c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000e4f6:	4b82      	ldr	r3, [pc, #520]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e4f8:	685b      	ldr	r3, [r3, #4]
2000e4fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e4fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000e502:	d10b      	bne.n	2000e51c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000e504:	4b7e      	ldr	r3, [pc, #504]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e506:	681b      	ldr	r3, [r3, #0]
2000e508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e50c:	2b00      	cmp	r3, #0
2000e50e:	d05b      	beq.n	2000e5c8 <HAL_RCC_OscConfig+0x108>
2000e510:	687b      	ldr	r3, [r7, #4]
2000e512:	685b      	ldr	r3, [r3, #4]
2000e514:	2b00      	cmp	r3, #0
2000e516:	d157      	bne.n	2000e5c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
2000e518:	2301      	movs	r3, #1
2000e51a:	e239      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2000e51c:	687b      	ldr	r3, [r7, #4]
2000e51e:	685b      	ldr	r3, [r3, #4]
2000e520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000e524:	d106      	bne.n	2000e534 <HAL_RCC_OscConfig+0x74>
2000e526:	4b76      	ldr	r3, [pc, #472]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e528:	681b      	ldr	r3, [r3, #0]
2000e52a:	4a75      	ldr	r2, [pc, #468]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e52c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000e530:	6013      	str	r3, [r2, #0]
2000e532:	e01d      	b.n	2000e570 <HAL_RCC_OscConfig+0xb0>
2000e534:	687b      	ldr	r3, [r7, #4]
2000e536:	685b      	ldr	r3, [r3, #4]
2000e538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2000e53c:	d10c      	bne.n	2000e558 <HAL_RCC_OscConfig+0x98>
2000e53e:	4b70      	ldr	r3, [pc, #448]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e540:	681b      	ldr	r3, [r3, #0]
2000e542:	4a6f      	ldr	r2, [pc, #444]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2000e548:	6013      	str	r3, [r2, #0]
2000e54a:	4b6d      	ldr	r3, [pc, #436]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e54c:	681b      	ldr	r3, [r3, #0]
2000e54e:	4a6c      	ldr	r2, [pc, #432]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000e554:	6013      	str	r3, [r2, #0]
2000e556:	e00b      	b.n	2000e570 <HAL_RCC_OscConfig+0xb0>
2000e558:	4b69      	ldr	r3, [pc, #420]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e55a:	681b      	ldr	r3, [r3, #0]
2000e55c:	4a68      	ldr	r2, [pc, #416]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e55e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000e562:	6013      	str	r3, [r2, #0]
2000e564:	4b66      	ldr	r3, [pc, #408]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e566:	681b      	ldr	r3, [r3, #0]
2000e568:	4a65      	ldr	r2, [pc, #404]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e56a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000e56e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
2000e570:	687b      	ldr	r3, [r7, #4]
2000e572:	685b      	ldr	r3, [r3, #4]
2000e574:	2b00      	cmp	r3, #0
2000e576:	d013      	beq.n	2000e5a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e578:	f7ff fc6a 	bl	2000de50 <HAL_GetTick>
2000e57c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000e57e:	e008      	b.n	2000e592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000e580:	f7ff fc66 	bl	2000de50 <HAL_GetTick>
2000e584:	4602      	mov	r2, r0
2000e586:	693b      	ldr	r3, [r7, #16]
2000e588:	1ad3      	subs	r3, r2, r3
2000e58a:	2b64      	cmp	r3, #100	; 0x64
2000e58c:	d901      	bls.n	2000e592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
2000e58e:	2303      	movs	r3, #3
2000e590:	e1fe      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000e592:	4b5b      	ldr	r3, [pc, #364]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e594:	681b      	ldr	r3, [r3, #0]
2000e596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e59a:	2b00      	cmp	r3, #0
2000e59c:	d0f0      	beq.n	2000e580 <HAL_RCC_OscConfig+0xc0>
2000e59e:	e014      	b.n	2000e5ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e5a0:	f7ff fc56 	bl	2000de50 <HAL_GetTick>
2000e5a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000e5a6:	e008      	b.n	2000e5ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000e5a8:	f7ff fc52 	bl	2000de50 <HAL_GetTick>
2000e5ac:	4602      	mov	r2, r0
2000e5ae:	693b      	ldr	r3, [r7, #16]
2000e5b0:	1ad3      	subs	r3, r2, r3
2000e5b2:	2b64      	cmp	r3, #100	; 0x64
2000e5b4:	d901      	bls.n	2000e5ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
2000e5b6:	2303      	movs	r3, #3
2000e5b8:	e1ea      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000e5ba:	4b51      	ldr	r3, [pc, #324]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e5bc:	681b      	ldr	r3, [r3, #0]
2000e5be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e5c2:	2b00      	cmp	r3, #0
2000e5c4:	d1f0      	bne.n	2000e5a8 <HAL_RCC_OscConfig+0xe8>
2000e5c6:	e000      	b.n	2000e5ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000e5c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2000e5ca:	687b      	ldr	r3, [r7, #4]
2000e5cc:	681b      	ldr	r3, [r3, #0]
2000e5ce:	f003 0302 	and.w	r3, r3, #2
2000e5d2:	2b00      	cmp	r3, #0
2000e5d4:	d063      	beq.n	2000e69e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000e5d6:	4b4a      	ldr	r3, [pc, #296]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e5d8:	689b      	ldr	r3, [r3, #8]
2000e5da:	f003 030c 	and.w	r3, r3, #12
2000e5de:	2b00      	cmp	r3, #0
2000e5e0:	d00b      	beq.n	2000e5fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000e5e2:	4b47      	ldr	r3, [pc, #284]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e5e4:	689b      	ldr	r3, [r3, #8]
2000e5e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000e5ea:	2b08      	cmp	r3, #8
2000e5ec:	d11c      	bne.n	2000e628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000e5ee:	4b44      	ldr	r3, [pc, #272]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e5f0:	685b      	ldr	r3, [r3, #4]
2000e5f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e5f6:	2b00      	cmp	r3, #0
2000e5f8:	d116      	bne.n	2000e628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000e5fa:	4b41      	ldr	r3, [pc, #260]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e5fc:	681b      	ldr	r3, [r3, #0]
2000e5fe:	f003 0302 	and.w	r3, r3, #2
2000e602:	2b00      	cmp	r3, #0
2000e604:	d005      	beq.n	2000e612 <HAL_RCC_OscConfig+0x152>
2000e606:	687b      	ldr	r3, [r7, #4]
2000e608:	68db      	ldr	r3, [r3, #12]
2000e60a:	2b01      	cmp	r3, #1
2000e60c:	d001      	beq.n	2000e612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
2000e60e:	2301      	movs	r3, #1
2000e610:	e1be      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000e612:	4b3b      	ldr	r3, [pc, #236]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e614:	681b      	ldr	r3, [r3, #0]
2000e616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000e61a:	687b      	ldr	r3, [r7, #4]
2000e61c:	691b      	ldr	r3, [r3, #16]
2000e61e:	00db      	lsls	r3, r3, #3
2000e620:	4937      	ldr	r1, [pc, #220]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e622:	4313      	orrs	r3, r2
2000e624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000e626:	e03a      	b.n	2000e69e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
2000e628:	687b      	ldr	r3, [r7, #4]
2000e62a:	68db      	ldr	r3, [r3, #12]
2000e62c:	2b00      	cmp	r3, #0
2000e62e:	d020      	beq.n	2000e672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
2000e630:	4b34      	ldr	r3, [pc, #208]	; (2000e704 <HAL_RCC_OscConfig+0x244>)
2000e632:	2201      	movs	r2, #1
2000e634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000e636:	f7ff fc0b 	bl	2000de50 <HAL_GetTick>
2000e63a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000e63c:	e008      	b.n	2000e650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000e63e:	f7ff fc07 	bl	2000de50 <HAL_GetTick>
2000e642:	4602      	mov	r2, r0
2000e644:	693b      	ldr	r3, [r7, #16]
2000e646:	1ad3      	subs	r3, r2, r3
2000e648:	2b02      	cmp	r3, #2
2000e64a:	d901      	bls.n	2000e650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
2000e64c:	2303      	movs	r3, #3
2000e64e:	e19f      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000e650:	4b2b      	ldr	r3, [pc, #172]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e652:	681b      	ldr	r3, [r3, #0]
2000e654:	f003 0302 	and.w	r3, r3, #2
2000e658:	2b00      	cmp	r3, #0
2000e65a:	d0f0      	beq.n	2000e63e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000e65c:	4b28      	ldr	r3, [pc, #160]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e65e:	681b      	ldr	r3, [r3, #0]
2000e660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000e664:	687b      	ldr	r3, [r7, #4]
2000e666:	691b      	ldr	r3, [r3, #16]
2000e668:	00db      	lsls	r3, r3, #3
2000e66a:	4925      	ldr	r1, [pc, #148]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e66c:	4313      	orrs	r3, r2
2000e66e:	600b      	str	r3, [r1, #0]
2000e670:	e015      	b.n	2000e69e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2000e672:	4b24      	ldr	r3, [pc, #144]	; (2000e704 <HAL_RCC_OscConfig+0x244>)
2000e674:	2200      	movs	r2, #0
2000e676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000e678:	f7ff fbea 	bl	2000de50 <HAL_GetTick>
2000e67c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000e67e:	e008      	b.n	2000e692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000e680:	f7ff fbe6 	bl	2000de50 <HAL_GetTick>
2000e684:	4602      	mov	r2, r0
2000e686:	693b      	ldr	r3, [r7, #16]
2000e688:	1ad3      	subs	r3, r2, r3
2000e68a:	2b02      	cmp	r3, #2
2000e68c:	d901      	bls.n	2000e692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
2000e68e:	2303      	movs	r3, #3
2000e690:	e17e      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000e692:	4b1b      	ldr	r3, [pc, #108]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e694:	681b      	ldr	r3, [r3, #0]
2000e696:	f003 0302 	and.w	r3, r3, #2
2000e69a:	2b00      	cmp	r3, #0
2000e69c:	d1f0      	bne.n	2000e680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2000e69e:	687b      	ldr	r3, [r7, #4]
2000e6a0:	681b      	ldr	r3, [r3, #0]
2000e6a2:	f003 0308 	and.w	r3, r3, #8
2000e6a6:	2b00      	cmp	r3, #0
2000e6a8:	d036      	beq.n	2000e718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
2000e6aa:	687b      	ldr	r3, [r7, #4]
2000e6ac:	695b      	ldr	r3, [r3, #20]
2000e6ae:	2b00      	cmp	r3, #0
2000e6b0:	d016      	beq.n	2000e6e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000e6b2:	4b15      	ldr	r3, [pc, #84]	; (2000e708 <HAL_RCC_OscConfig+0x248>)
2000e6b4:	2201      	movs	r2, #1
2000e6b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000e6b8:	f7ff fbca 	bl	2000de50 <HAL_GetTick>
2000e6bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000e6be:	e008      	b.n	2000e6d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000e6c0:	f7ff fbc6 	bl	2000de50 <HAL_GetTick>
2000e6c4:	4602      	mov	r2, r0
2000e6c6:	693b      	ldr	r3, [r7, #16]
2000e6c8:	1ad3      	subs	r3, r2, r3
2000e6ca:	2b02      	cmp	r3, #2
2000e6cc:	d901      	bls.n	2000e6d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
2000e6ce:	2303      	movs	r3, #3
2000e6d0:	e15e      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000e6d2:	4b0b      	ldr	r3, [pc, #44]	; (2000e700 <HAL_RCC_OscConfig+0x240>)
2000e6d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000e6d6:	f003 0302 	and.w	r3, r3, #2
2000e6da:	2b00      	cmp	r3, #0
2000e6dc:	d0f0      	beq.n	2000e6c0 <HAL_RCC_OscConfig+0x200>
2000e6de:	e01b      	b.n	2000e718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2000e6e0:	4b09      	ldr	r3, [pc, #36]	; (2000e708 <HAL_RCC_OscConfig+0x248>)
2000e6e2:	2200      	movs	r2, #0
2000e6e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000e6e6:	f7ff fbb3 	bl	2000de50 <HAL_GetTick>
2000e6ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000e6ec:	e00e      	b.n	2000e70c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000e6ee:	f7ff fbaf 	bl	2000de50 <HAL_GetTick>
2000e6f2:	4602      	mov	r2, r0
2000e6f4:	693b      	ldr	r3, [r7, #16]
2000e6f6:	1ad3      	subs	r3, r2, r3
2000e6f8:	2b02      	cmp	r3, #2
2000e6fa:	d907      	bls.n	2000e70c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
2000e6fc:	2303      	movs	r3, #3
2000e6fe:	e147      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
2000e700:	40023800 	.word	0x40023800
2000e704:	42470000 	.word	0x42470000
2000e708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000e70c:	4b88      	ldr	r3, [pc, #544]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e70e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000e710:	f003 0302 	and.w	r3, r3, #2
2000e714:	2b00      	cmp	r3, #0
2000e716:	d1ea      	bne.n	2000e6ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2000e718:	687b      	ldr	r3, [r7, #4]
2000e71a:	681b      	ldr	r3, [r3, #0]
2000e71c:	f003 0304 	and.w	r3, r3, #4
2000e720:	2b00      	cmp	r3, #0
2000e722:	f000 8097 	beq.w	2000e854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
2000e726:	2300      	movs	r3, #0
2000e728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
2000e72a:	4b81      	ldr	r3, [pc, #516]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e72e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e732:	2b00      	cmp	r3, #0
2000e734:	d10f      	bne.n	2000e756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
2000e736:	2300      	movs	r3, #0
2000e738:	60bb      	str	r3, [r7, #8]
2000e73a:	4b7d      	ldr	r3, [pc, #500]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e73e:	4a7c      	ldr	r2, [pc, #496]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000e744:	6413      	str	r3, [r2, #64]	; 0x40
2000e746:	4b7a      	ldr	r3, [pc, #488]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e74a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e74e:	60bb      	str	r3, [r7, #8]
2000e750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
2000e752:	2301      	movs	r3, #1
2000e754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000e756:	4b77      	ldr	r3, [pc, #476]	; (2000e934 <HAL_RCC_OscConfig+0x474>)
2000e758:	681b      	ldr	r3, [r3, #0]
2000e75a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000e75e:	2b00      	cmp	r3, #0
2000e760:	d118      	bne.n	2000e794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
2000e762:	4b74      	ldr	r3, [pc, #464]	; (2000e934 <HAL_RCC_OscConfig+0x474>)
2000e764:	681b      	ldr	r3, [r3, #0]
2000e766:	4a73      	ldr	r2, [pc, #460]	; (2000e934 <HAL_RCC_OscConfig+0x474>)
2000e768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000e76c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000e76e:	f7ff fb6f 	bl	2000de50 <HAL_GetTick>
2000e772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000e774:	e008      	b.n	2000e788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000e776:	f7ff fb6b 	bl	2000de50 <HAL_GetTick>
2000e77a:	4602      	mov	r2, r0
2000e77c:	693b      	ldr	r3, [r7, #16]
2000e77e:	1ad3      	subs	r3, r2, r3
2000e780:	2b02      	cmp	r3, #2
2000e782:	d901      	bls.n	2000e788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
2000e784:	2303      	movs	r3, #3
2000e786:	e103      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000e788:	4b6a      	ldr	r3, [pc, #424]	; (2000e934 <HAL_RCC_OscConfig+0x474>)
2000e78a:	681b      	ldr	r3, [r3, #0]
2000e78c:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000e790:	2b00      	cmp	r3, #0
2000e792:	d0f0      	beq.n	2000e776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2000e794:	687b      	ldr	r3, [r7, #4]
2000e796:	689b      	ldr	r3, [r3, #8]
2000e798:	2b01      	cmp	r3, #1
2000e79a:	d106      	bne.n	2000e7aa <HAL_RCC_OscConfig+0x2ea>
2000e79c:	4b64      	ldr	r3, [pc, #400]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e7a0:	4a63      	ldr	r2, [pc, #396]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e7a2:	f043 0301 	orr.w	r3, r3, #1
2000e7a6:	6713      	str	r3, [r2, #112]	; 0x70
2000e7a8:	e01c      	b.n	2000e7e4 <HAL_RCC_OscConfig+0x324>
2000e7aa:	687b      	ldr	r3, [r7, #4]
2000e7ac:	689b      	ldr	r3, [r3, #8]
2000e7ae:	2b05      	cmp	r3, #5
2000e7b0:	d10c      	bne.n	2000e7cc <HAL_RCC_OscConfig+0x30c>
2000e7b2:	4b5f      	ldr	r3, [pc, #380]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e7b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e7b6:	4a5e      	ldr	r2, [pc, #376]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e7b8:	f043 0304 	orr.w	r3, r3, #4
2000e7bc:	6713      	str	r3, [r2, #112]	; 0x70
2000e7be:	4b5c      	ldr	r3, [pc, #368]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e7c2:	4a5b      	ldr	r2, [pc, #364]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e7c4:	f043 0301 	orr.w	r3, r3, #1
2000e7c8:	6713      	str	r3, [r2, #112]	; 0x70
2000e7ca:	e00b      	b.n	2000e7e4 <HAL_RCC_OscConfig+0x324>
2000e7cc:	4b58      	ldr	r3, [pc, #352]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e7ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e7d0:	4a57      	ldr	r2, [pc, #348]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e7d2:	f023 0301 	bic.w	r3, r3, #1
2000e7d6:	6713      	str	r3, [r2, #112]	; 0x70
2000e7d8:	4b55      	ldr	r3, [pc, #340]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e7da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e7dc:	4a54      	ldr	r2, [pc, #336]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e7de:	f023 0304 	bic.w	r3, r3, #4
2000e7e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2000e7e4:	687b      	ldr	r3, [r7, #4]
2000e7e6:	689b      	ldr	r3, [r3, #8]
2000e7e8:	2b00      	cmp	r3, #0
2000e7ea:	d015      	beq.n	2000e818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000e7ec:	f7ff fb30 	bl	2000de50 <HAL_GetTick>
2000e7f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000e7f2:	e00a      	b.n	2000e80a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000e7f4:	f7ff fb2c 	bl	2000de50 <HAL_GetTick>
2000e7f8:	4602      	mov	r2, r0
2000e7fa:	693b      	ldr	r3, [r7, #16]
2000e7fc:	1ad3      	subs	r3, r2, r3
2000e7fe:	f241 3288 	movw	r2, #5000	; 0x1388
2000e802:	4293      	cmp	r3, r2
2000e804:	d901      	bls.n	2000e80a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
2000e806:	2303      	movs	r3, #3
2000e808:	e0c2      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000e80a:	4b49      	ldr	r3, [pc, #292]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e80e:	f003 0302 	and.w	r3, r3, #2
2000e812:	2b00      	cmp	r3, #0
2000e814:	d0ee      	beq.n	2000e7f4 <HAL_RCC_OscConfig+0x334>
2000e816:	e014      	b.n	2000e842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000e818:	f7ff fb1a 	bl	2000de50 <HAL_GetTick>
2000e81c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000e81e:	e00a      	b.n	2000e836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000e820:	f7ff fb16 	bl	2000de50 <HAL_GetTick>
2000e824:	4602      	mov	r2, r0
2000e826:	693b      	ldr	r3, [r7, #16]
2000e828:	1ad3      	subs	r3, r2, r3
2000e82a:	f241 3288 	movw	r2, #5000	; 0x1388
2000e82e:	4293      	cmp	r3, r2
2000e830:	d901      	bls.n	2000e836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
2000e832:	2303      	movs	r3, #3
2000e834:	e0ac      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000e836:	4b3e      	ldr	r3, [pc, #248]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e83a:	f003 0302 	and.w	r3, r3, #2
2000e83e:	2b00      	cmp	r3, #0
2000e840:	d1ee      	bne.n	2000e820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
2000e842:	7dfb      	ldrb	r3, [r7, #23]
2000e844:	2b01      	cmp	r3, #1
2000e846:	d105      	bne.n	2000e854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
2000e848:	4b39      	ldr	r3, [pc, #228]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e84c:	4a38      	ldr	r2, [pc, #224]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e84e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000e852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2000e854:	687b      	ldr	r3, [r7, #4]
2000e856:	699b      	ldr	r3, [r3, #24]
2000e858:	2b00      	cmp	r3, #0
2000e85a:	f000 8098 	beq.w	2000e98e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2000e85e:	4b34      	ldr	r3, [pc, #208]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e860:	689b      	ldr	r3, [r3, #8]
2000e862:	f003 030c 	and.w	r3, r3, #12
2000e866:	2b08      	cmp	r3, #8
2000e868:	d05c      	beq.n	2000e924 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000e86a:	687b      	ldr	r3, [r7, #4]
2000e86c:	699b      	ldr	r3, [r3, #24]
2000e86e:	2b02      	cmp	r3, #2
2000e870:	d141      	bne.n	2000e8f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000e872:	4b31      	ldr	r3, [pc, #196]	; (2000e938 <HAL_RCC_OscConfig+0x478>)
2000e874:	2200      	movs	r2, #0
2000e876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e878:	f7ff faea 	bl	2000de50 <HAL_GetTick>
2000e87c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000e87e:	e008      	b.n	2000e892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000e880:	f7ff fae6 	bl	2000de50 <HAL_GetTick>
2000e884:	4602      	mov	r2, r0
2000e886:	693b      	ldr	r3, [r7, #16]
2000e888:	1ad3      	subs	r3, r2, r3
2000e88a:	2b02      	cmp	r3, #2
2000e88c:	d901      	bls.n	2000e892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
2000e88e:	2303      	movs	r3, #3
2000e890:	e07e      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000e892:	4b27      	ldr	r3, [pc, #156]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e894:	681b      	ldr	r3, [r3, #0]
2000e896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000e89a:	2b00      	cmp	r3, #0
2000e89c:	d1f0      	bne.n	2000e880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
2000e89e:	687b      	ldr	r3, [r7, #4]
2000e8a0:	69da      	ldr	r2, [r3, #28]
2000e8a2:	687b      	ldr	r3, [r7, #4]
2000e8a4:	6a1b      	ldr	r3, [r3, #32]
2000e8a6:	431a      	orrs	r2, r3
2000e8a8:	687b      	ldr	r3, [r7, #4]
2000e8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000e8ac:	019b      	lsls	r3, r3, #6
2000e8ae:	431a      	orrs	r2, r3
2000e8b0:	687b      	ldr	r3, [r7, #4]
2000e8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000e8b4:	085b      	lsrs	r3, r3, #1
2000e8b6:	3b01      	subs	r3, #1
2000e8b8:	041b      	lsls	r3, r3, #16
2000e8ba:	431a      	orrs	r2, r3
2000e8bc:	687b      	ldr	r3, [r7, #4]
2000e8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000e8c0:	061b      	lsls	r3, r3, #24
2000e8c2:	491b      	ldr	r1, [pc, #108]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e8c4:	4313      	orrs	r3, r2
2000e8c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2000e8c8:	4b1b      	ldr	r3, [pc, #108]	; (2000e938 <HAL_RCC_OscConfig+0x478>)
2000e8ca:	2201      	movs	r2, #1
2000e8cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e8ce:	f7ff fabf 	bl	2000de50 <HAL_GetTick>
2000e8d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000e8d4:	e008      	b.n	2000e8e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000e8d6:	f7ff fabb 	bl	2000de50 <HAL_GetTick>
2000e8da:	4602      	mov	r2, r0
2000e8dc:	693b      	ldr	r3, [r7, #16]
2000e8de:	1ad3      	subs	r3, r2, r3
2000e8e0:	2b02      	cmp	r3, #2
2000e8e2:	d901      	bls.n	2000e8e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
2000e8e4:	2303      	movs	r3, #3
2000e8e6:	e053      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000e8e8:	4b11      	ldr	r3, [pc, #68]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e8ea:	681b      	ldr	r3, [r3, #0]
2000e8ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000e8f0:	2b00      	cmp	r3, #0
2000e8f2:	d0f0      	beq.n	2000e8d6 <HAL_RCC_OscConfig+0x416>
2000e8f4:	e04b      	b.n	2000e98e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000e8f6:	4b10      	ldr	r3, [pc, #64]	; (2000e938 <HAL_RCC_OscConfig+0x478>)
2000e8f8:	2200      	movs	r2, #0
2000e8fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e8fc:	f7ff faa8 	bl	2000de50 <HAL_GetTick>
2000e900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000e902:	e008      	b.n	2000e916 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000e904:	f7ff faa4 	bl	2000de50 <HAL_GetTick>
2000e908:	4602      	mov	r2, r0
2000e90a:	693b      	ldr	r3, [r7, #16]
2000e90c:	1ad3      	subs	r3, r2, r3
2000e90e:	2b02      	cmp	r3, #2
2000e910:	d901      	bls.n	2000e916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
2000e912:	2303      	movs	r3, #3
2000e914:	e03c      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000e916:	4b06      	ldr	r3, [pc, #24]	; (2000e930 <HAL_RCC_OscConfig+0x470>)
2000e918:	681b      	ldr	r3, [r3, #0]
2000e91a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000e91e:	2b00      	cmp	r3, #0
2000e920:	d1f0      	bne.n	2000e904 <HAL_RCC_OscConfig+0x444>
2000e922:	e034      	b.n	2000e98e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
2000e924:	687b      	ldr	r3, [r7, #4]
2000e926:	699b      	ldr	r3, [r3, #24]
2000e928:	2b01      	cmp	r3, #1
2000e92a:	d107      	bne.n	2000e93c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
2000e92c:	2301      	movs	r3, #1
2000e92e:	e02f      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
2000e930:	40023800 	.word	0x40023800
2000e934:	40007000 	.word	0x40007000
2000e938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
2000e93c:	4b16      	ldr	r3, [pc, #88]	; (2000e998 <HAL_RCC_OscConfig+0x4d8>)
2000e93e:	685b      	ldr	r3, [r3, #4]
2000e940:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000e942:	68fb      	ldr	r3, [r7, #12]
2000e944:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
2000e948:	687b      	ldr	r3, [r7, #4]
2000e94a:	69db      	ldr	r3, [r3, #28]
2000e94c:	429a      	cmp	r2, r3
2000e94e:	d11c      	bne.n	2000e98a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000e950:	68fb      	ldr	r3, [r7, #12]
2000e952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000e956:	687b      	ldr	r3, [r7, #4]
2000e958:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000e95a:	429a      	cmp	r2, r3
2000e95c:	d115      	bne.n	2000e98a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000e95e:	68fa      	ldr	r2, [r7, #12]
2000e960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
2000e964:	4013      	ands	r3, r2
2000e966:	687a      	ldr	r2, [r7, #4]
2000e968:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000e96a:	4293      	cmp	r3, r2
2000e96c:	d10d      	bne.n	2000e98a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000e96e:	68fb      	ldr	r3, [r7, #12]
2000e970:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2000e974:	687b      	ldr	r3, [r7, #4]
2000e976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000e978:	429a      	cmp	r2, r3
2000e97a:	d106      	bne.n	2000e98a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
2000e97c:	68fb      	ldr	r3, [r7, #12]
2000e97e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
2000e982:	687b      	ldr	r3, [r7, #4]
2000e984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000e986:	429a      	cmp	r2, r3
2000e988:	d001      	beq.n	2000e98e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
2000e98a:	2301      	movs	r3, #1
2000e98c:	e000      	b.n	2000e990 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
2000e98e:	2300      	movs	r3, #0
}
2000e990:	4618      	mov	r0, r3
2000e992:	3718      	adds	r7, #24
2000e994:	46bd      	mov	sp, r7
2000e996:	bd80      	pop	{r7, pc}
2000e998:	40023800 	.word	0x40023800

2000e99c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2000e99c:	b580      	push	{r7, lr}
2000e99e:	b084      	sub	sp, #16
2000e9a0:	af00      	add	r7, sp, #0
2000e9a2:	6078      	str	r0, [r7, #4]
2000e9a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
2000e9a6:	687b      	ldr	r3, [r7, #4]
2000e9a8:	2b00      	cmp	r3, #0
2000e9aa:	d101      	bne.n	2000e9b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2000e9ac:	2301      	movs	r3, #1
2000e9ae:	e0cc      	b.n	2000eb4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
2000e9b0:	4b68      	ldr	r3, [pc, #416]	; (2000eb54 <HAL_RCC_ClockConfig+0x1b8>)
2000e9b2:	681b      	ldr	r3, [r3, #0]
2000e9b4:	f003 030f 	and.w	r3, r3, #15
2000e9b8:	683a      	ldr	r2, [r7, #0]
2000e9ba:	429a      	cmp	r2, r3
2000e9bc:	d90c      	bls.n	2000e9d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000e9be:	4b65      	ldr	r3, [pc, #404]	; (2000eb54 <HAL_RCC_ClockConfig+0x1b8>)
2000e9c0:	683a      	ldr	r2, [r7, #0]
2000e9c2:	b2d2      	uxtb	r2, r2
2000e9c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000e9c6:	4b63      	ldr	r3, [pc, #396]	; (2000eb54 <HAL_RCC_ClockConfig+0x1b8>)
2000e9c8:	681b      	ldr	r3, [r3, #0]
2000e9ca:	f003 030f 	and.w	r3, r3, #15
2000e9ce:	683a      	ldr	r2, [r7, #0]
2000e9d0:	429a      	cmp	r2, r3
2000e9d2:	d001      	beq.n	2000e9d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
2000e9d4:	2301      	movs	r3, #1
2000e9d6:	e0b8      	b.n	2000eb4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2000e9d8:	687b      	ldr	r3, [r7, #4]
2000e9da:	681b      	ldr	r3, [r3, #0]
2000e9dc:	f003 0302 	and.w	r3, r3, #2
2000e9e0:	2b00      	cmp	r3, #0
2000e9e2:	d020      	beq.n	2000ea26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000e9e4:	687b      	ldr	r3, [r7, #4]
2000e9e6:	681b      	ldr	r3, [r3, #0]
2000e9e8:	f003 0304 	and.w	r3, r3, #4
2000e9ec:	2b00      	cmp	r3, #0
2000e9ee:	d005      	beq.n	2000e9fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
2000e9f0:	4b59      	ldr	r3, [pc, #356]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000e9f2:	689b      	ldr	r3, [r3, #8]
2000e9f4:	4a58      	ldr	r2, [pc, #352]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000e9f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2000e9fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000e9fc:	687b      	ldr	r3, [r7, #4]
2000e9fe:	681b      	ldr	r3, [r3, #0]
2000ea00:	f003 0308 	and.w	r3, r3, #8
2000ea04:	2b00      	cmp	r3, #0
2000ea06:	d005      	beq.n	2000ea14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
2000ea08:	4b53      	ldr	r3, [pc, #332]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000ea0a:	689b      	ldr	r3, [r3, #8]
2000ea0c:	4a52      	ldr	r2, [pc, #328]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000ea0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
2000ea12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2000ea14:	4b50      	ldr	r3, [pc, #320]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000ea16:	689b      	ldr	r3, [r3, #8]
2000ea18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
2000ea1c:	687b      	ldr	r3, [r7, #4]
2000ea1e:	689b      	ldr	r3, [r3, #8]
2000ea20:	494d      	ldr	r1, [pc, #308]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000ea22:	4313      	orrs	r3, r2
2000ea24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2000ea26:	687b      	ldr	r3, [r7, #4]
2000ea28:	681b      	ldr	r3, [r3, #0]
2000ea2a:	f003 0301 	and.w	r3, r3, #1
2000ea2e:	2b00      	cmp	r3, #0
2000ea30:	d044      	beq.n	2000eabc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2000ea32:	687b      	ldr	r3, [r7, #4]
2000ea34:	685b      	ldr	r3, [r3, #4]
2000ea36:	2b01      	cmp	r3, #1
2000ea38:	d107      	bne.n	2000ea4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000ea3a:	4b47      	ldr	r3, [pc, #284]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000ea3c:	681b      	ldr	r3, [r3, #0]
2000ea3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ea42:	2b00      	cmp	r3, #0
2000ea44:	d119      	bne.n	2000ea7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000ea46:	2301      	movs	r3, #1
2000ea48:	e07f      	b.n	2000eb4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000ea4a:	687b      	ldr	r3, [r7, #4]
2000ea4c:	685b      	ldr	r3, [r3, #4]
2000ea4e:	2b02      	cmp	r3, #2
2000ea50:	d003      	beq.n	2000ea5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
2000ea52:	687b      	ldr	r3, [r7, #4]
2000ea54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000ea56:	2b03      	cmp	r3, #3
2000ea58:	d107      	bne.n	2000ea6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000ea5a:	4b3f      	ldr	r3, [pc, #252]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000ea5c:	681b      	ldr	r3, [r3, #0]
2000ea5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000ea62:	2b00      	cmp	r3, #0
2000ea64:	d109      	bne.n	2000ea7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000ea66:	2301      	movs	r3, #1
2000ea68:	e06f      	b.n	2000eb4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000ea6a:	4b3b      	ldr	r3, [pc, #236]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000ea6c:	681b      	ldr	r3, [r3, #0]
2000ea6e:	f003 0302 	and.w	r3, r3, #2
2000ea72:	2b00      	cmp	r3, #0
2000ea74:	d101      	bne.n	2000ea7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000ea76:	2301      	movs	r3, #1
2000ea78:	e067      	b.n	2000eb4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000ea7a:	4b37      	ldr	r3, [pc, #220]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000ea7c:	689b      	ldr	r3, [r3, #8]
2000ea7e:	f023 0203 	bic.w	r2, r3, #3
2000ea82:	687b      	ldr	r3, [r7, #4]
2000ea84:	685b      	ldr	r3, [r3, #4]
2000ea86:	4934      	ldr	r1, [pc, #208]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000ea88:	4313      	orrs	r3, r2
2000ea8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
2000ea8c:	f7ff f9e0 	bl	2000de50 <HAL_GetTick>
2000ea90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000ea92:	e00a      	b.n	2000eaaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2000ea94:	f7ff f9dc 	bl	2000de50 <HAL_GetTick>
2000ea98:	4602      	mov	r2, r0
2000ea9a:	68fb      	ldr	r3, [r7, #12]
2000ea9c:	1ad3      	subs	r3, r2, r3
2000ea9e:	f241 3288 	movw	r2, #5000	; 0x1388
2000eaa2:	4293      	cmp	r3, r2
2000eaa4:	d901      	bls.n	2000eaaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
2000eaa6:	2303      	movs	r3, #3
2000eaa8:	e04f      	b.n	2000eb4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000eaaa:	4b2b      	ldr	r3, [pc, #172]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000eaac:	689b      	ldr	r3, [r3, #8]
2000eaae:	f003 020c 	and.w	r2, r3, #12
2000eab2:	687b      	ldr	r3, [r7, #4]
2000eab4:	685b      	ldr	r3, [r3, #4]
2000eab6:	009b      	lsls	r3, r3, #2
2000eab8:	429a      	cmp	r2, r3
2000eaba:	d1eb      	bne.n	2000ea94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
2000eabc:	4b25      	ldr	r3, [pc, #148]	; (2000eb54 <HAL_RCC_ClockConfig+0x1b8>)
2000eabe:	681b      	ldr	r3, [r3, #0]
2000eac0:	f003 030f 	and.w	r3, r3, #15
2000eac4:	683a      	ldr	r2, [r7, #0]
2000eac6:	429a      	cmp	r2, r3
2000eac8:	d20c      	bcs.n	2000eae4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000eaca:	4b22      	ldr	r3, [pc, #136]	; (2000eb54 <HAL_RCC_ClockConfig+0x1b8>)
2000eacc:	683a      	ldr	r2, [r7, #0]
2000eace:	b2d2      	uxtb	r2, r2
2000ead0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000ead2:	4b20      	ldr	r3, [pc, #128]	; (2000eb54 <HAL_RCC_ClockConfig+0x1b8>)
2000ead4:	681b      	ldr	r3, [r3, #0]
2000ead6:	f003 030f 	and.w	r3, r3, #15
2000eada:	683a      	ldr	r2, [r7, #0]
2000eadc:	429a      	cmp	r2, r3
2000eade:	d001      	beq.n	2000eae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
2000eae0:	2301      	movs	r3, #1
2000eae2:	e032      	b.n	2000eb4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000eae4:	687b      	ldr	r3, [r7, #4]
2000eae6:	681b      	ldr	r3, [r3, #0]
2000eae8:	f003 0304 	and.w	r3, r3, #4
2000eaec:	2b00      	cmp	r3, #0
2000eaee:	d008      	beq.n	2000eb02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
2000eaf0:	4b19      	ldr	r3, [pc, #100]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000eaf2:	689b      	ldr	r3, [r3, #8]
2000eaf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
2000eaf8:	687b      	ldr	r3, [r7, #4]
2000eafa:	68db      	ldr	r3, [r3, #12]
2000eafc:	4916      	ldr	r1, [pc, #88]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000eafe:	4313      	orrs	r3, r2
2000eb00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000eb02:	687b      	ldr	r3, [r7, #4]
2000eb04:	681b      	ldr	r3, [r3, #0]
2000eb06:	f003 0308 	and.w	r3, r3, #8
2000eb0a:	2b00      	cmp	r3, #0
2000eb0c:	d009      	beq.n	2000eb22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
2000eb0e:	4b12      	ldr	r3, [pc, #72]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000eb10:	689b      	ldr	r3, [r3, #8]
2000eb12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
2000eb16:	687b      	ldr	r3, [r7, #4]
2000eb18:	691b      	ldr	r3, [r3, #16]
2000eb1a:	00db      	lsls	r3, r3, #3
2000eb1c:	490e      	ldr	r1, [pc, #56]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000eb1e:	4313      	orrs	r3, r2
2000eb20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
2000eb22:	f000 f821 	bl	2000eb68 <HAL_RCC_GetSysClockFreq>
2000eb26:	4602      	mov	r2, r0
2000eb28:	4b0b      	ldr	r3, [pc, #44]	; (2000eb58 <HAL_RCC_ClockConfig+0x1bc>)
2000eb2a:	689b      	ldr	r3, [r3, #8]
2000eb2c:	091b      	lsrs	r3, r3, #4
2000eb2e:	f003 030f 	and.w	r3, r3, #15
2000eb32:	490a      	ldr	r1, [pc, #40]	; (2000eb5c <HAL_RCC_ClockConfig+0x1c0>)
2000eb34:	5ccb      	ldrb	r3, [r1, r3]
2000eb36:	fa22 f303 	lsr.w	r3, r2, r3
2000eb3a:	4a09      	ldr	r2, [pc, #36]	; (2000eb60 <HAL_RCC_ClockConfig+0x1c4>)
2000eb3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
2000eb3e:	4b09      	ldr	r3, [pc, #36]	; (2000eb64 <HAL_RCC_ClockConfig+0x1c8>)
2000eb40:	681b      	ldr	r3, [r3, #0]
2000eb42:	4618      	mov	r0, r3
2000eb44:	f7ff f940 	bl	2000ddc8 <HAL_InitTick>

  return HAL_OK;
2000eb48:	2300      	movs	r3, #0
}
2000eb4a:	4618      	mov	r0, r3
2000eb4c:	3710      	adds	r7, #16
2000eb4e:	46bd      	mov	sp, r7
2000eb50:	bd80      	pop	{r7, pc}
2000eb52:	bf00      	nop
2000eb54:	40023c00 	.word	0x40023c00
2000eb58:	40023800 	.word	0x40023800
2000eb5c:	2000fab0 	.word	0x2000fab0
2000eb60:	2000fb04 	.word	0x2000fb04
2000eb64:	2000fb1c 	.word	0x2000fb1c

2000eb68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
2000eb68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
2000eb6c:	b090      	sub	sp, #64	; 0x40
2000eb6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
2000eb70:	2300      	movs	r3, #0
2000eb72:	637b      	str	r3, [r7, #52]	; 0x34
2000eb74:	2300      	movs	r3, #0
2000eb76:	63fb      	str	r3, [r7, #60]	; 0x3c
2000eb78:	2300      	movs	r3, #0
2000eb7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
2000eb7c:	2300      	movs	r3, #0
2000eb7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
2000eb80:	4b59      	ldr	r3, [pc, #356]	; (2000ece8 <HAL_RCC_GetSysClockFreq+0x180>)
2000eb82:	689b      	ldr	r3, [r3, #8]
2000eb84:	f003 030c 	and.w	r3, r3, #12
2000eb88:	2b08      	cmp	r3, #8
2000eb8a:	d00d      	beq.n	2000eba8 <HAL_RCC_GetSysClockFreq+0x40>
2000eb8c:	2b08      	cmp	r3, #8
2000eb8e:	f200 80a1 	bhi.w	2000ecd4 <HAL_RCC_GetSysClockFreq+0x16c>
2000eb92:	2b00      	cmp	r3, #0
2000eb94:	d002      	beq.n	2000eb9c <HAL_RCC_GetSysClockFreq+0x34>
2000eb96:	2b04      	cmp	r3, #4
2000eb98:	d003      	beq.n	2000eba2 <HAL_RCC_GetSysClockFreq+0x3a>
2000eb9a:	e09b      	b.n	2000ecd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
2000eb9c:	4b53      	ldr	r3, [pc, #332]	; (2000ecec <HAL_RCC_GetSysClockFreq+0x184>)
2000eb9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
2000eba0:	e09b      	b.n	2000ecda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
2000eba2:	4b53      	ldr	r3, [pc, #332]	; (2000ecf0 <HAL_RCC_GetSysClockFreq+0x188>)
2000eba4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
2000eba6:	e098      	b.n	2000ecda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000eba8:	4b4f      	ldr	r3, [pc, #316]	; (2000ece8 <HAL_RCC_GetSysClockFreq+0x180>)
2000ebaa:	685b      	ldr	r3, [r3, #4]
2000ebac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000ebb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
2000ebb2:	4b4d      	ldr	r3, [pc, #308]	; (2000ece8 <HAL_RCC_GetSysClockFreq+0x180>)
2000ebb4:	685b      	ldr	r3, [r3, #4]
2000ebb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000ebba:	2b00      	cmp	r3, #0
2000ebbc:	d028      	beq.n	2000ec10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000ebbe:	4b4a      	ldr	r3, [pc, #296]	; (2000ece8 <HAL_RCC_GetSysClockFreq+0x180>)
2000ebc0:	685b      	ldr	r3, [r3, #4]
2000ebc2:	099b      	lsrs	r3, r3, #6
2000ebc4:	2200      	movs	r2, #0
2000ebc6:	623b      	str	r3, [r7, #32]
2000ebc8:	627a      	str	r2, [r7, #36]	; 0x24
2000ebca:	6a3b      	ldr	r3, [r7, #32]
2000ebcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
2000ebd0:	2100      	movs	r1, #0
2000ebd2:	4b47      	ldr	r3, [pc, #284]	; (2000ecf0 <HAL_RCC_GetSysClockFreq+0x188>)
2000ebd4:	fb03 f201 	mul.w	r2, r3, r1
2000ebd8:	2300      	movs	r3, #0
2000ebda:	fb00 f303 	mul.w	r3, r0, r3
2000ebde:	4413      	add	r3, r2
2000ebe0:	4a43      	ldr	r2, [pc, #268]	; (2000ecf0 <HAL_RCC_GetSysClockFreq+0x188>)
2000ebe2:	fba0 1202 	umull	r1, r2, r0, r2
2000ebe6:	62fa      	str	r2, [r7, #44]	; 0x2c
2000ebe8:	460a      	mov	r2, r1
2000ebea:	62ba      	str	r2, [r7, #40]	; 0x28
2000ebec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000ebee:	4413      	add	r3, r2
2000ebf0:	62fb      	str	r3, [r7, #44]	; 0x2c
2000ebf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000ebf4:	2200      	movs	r2, #0
2000ebf6:	61bb      	str	r3, [r7, #24]
2000ebf8:	61fa      	str	r2, [r7, #28]
2000ebfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
2000ebfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
2000ec02:	f7fe fb3d 	bl	2000d280 <__aeabi_uldivmod>
2000ec06:	4602      	mov	r2, r0
2000ec08:	460b      	mov	r3, r1
2000ec0a:	4613      	mov	r3, r2
2000ec0c:	63fb      	str	r3, [r7, #60]	; 0x3c
2000ec0e:	e053      	b.n	2000ecb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000ec10:	4b35      	ldr	r3, [pc, #212]	; (2000ece8 <HAL_RCC_GetSysClockFreq+0x180>)
2000ec12:	685b      	ldr	r3, [r3, #4]
2000ec14:	099b      	lsrs	r3, r3, #6
2000ec16:	2200      	movs	r2, #0
2000ec18:	613b      	str	r3, [r7, #16]
2000ec1a:	617a      	str	r2, [r7, #20]
2000ec1c:	693b      	ldr	r3, [r7, #16]
2000ec1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
2000ec22:	f04f 0b00 	mov.w	fp, #0
2000ec26:	4652      	mov	r2, sl
2000ec28:	465b      	mov	r3, fp
2000ec2a:	f04f 0000 	mov.w	r0, #0
2000ec2e:	f04f 0100 	mov.w	r1, #0
2000ec32:	0159      	lsls	r1, r3, #5
2000ec34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
2000ec38:	0150      	lsls	r0, r2, #5
2000ec3a:	4602      	mov	r2, r0
2000ec3c:	460b      	mov	r3, r1
2000ec3e:	ebb2 080a 	subs.w	r8, r2, sl
2000ec42:	eb63 090b 	sbc.w	r9, r3, fp
2000ec46:	f04f 0200 	mov.w	r2, #0
2000ec4a:	f04f 0300 	mov.w	r3, #0
2000ec4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
2000ec52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
2000ec56:	ea4f 1288 	mov.w	r2, r8, lsl #6
2000ec5a:	ebb2 0408 	subs.w	r4, r2, r8
2000ec5e:	eb63 0509 	sbc.w	r5, r3, r9
2000ec62:	f04f 0200 	mov.w	r2, #0
2000ec66:	f04f 0300 	mov.w	r3, #0
2000ec6a:	00eb      	lsls	r3, r5, #3
2000ec6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
2000ec70:	00e2      	lsls	r2, r4, #3
2000ec72:	4614      	mov	r4, r2
2000ec74:	461d      	mov	r5, r3
2000ec76:	eb14 030a 	adds.w	r3, r4, sl
2000ec7a:	603b      	str	r3, [r7, #0]
2000ec7c:	eb45 030b 	adc.w	r3, r5, fp
2000ec80:	607b      	str	r3, [r7, #4]
2000ec82:	f04f 0200 	mov.w	r2, #0
2000ec86:	f04f 0300 	mov.w	r3, #0
2000ec8a:	e9d7 4500 	ldrd	r4, r5, [r7]
2000ec8e:	4629      	mov	r1, r5
2000ec90:	028b      	lsls	r3, r1, #10
2000ec92:	4621      	mov	r1, r4
2000ec94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
2000ec98:	4621      	mov	r1, r4
2000ec9a:	028a      	lsls	r2, r1, #10
2000ec9c:	4610      	mov	r0, r2
2000ec9e:	4619      	mov	r1, r3
2000eca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000eca2:	2200      	movs	r2, #0
2000eca4:	60bb      	str	r3, [r7, #8]
2000eca6:	60fa      	str	r2, [r7, #12]
2000eca8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
2000ecac:	f7fe fae8 	bl	2000d280 <__aeabi_uldivmod>
2000ecb0:	4602      	mov	r2, r0
2000ecb2:	460b      	mov	r3, r1
2000ecb4:	4613      	mov	r3, r2
2000ecb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
2000ecb8:	4b0b      	ldr	r3, [pc, #44]	; (2000ece8 <HAL_RCC_GetSysClockFreq+0x180>)
2000ecba:	685b      	ldr	r3, [r3, #4]
2000ecbc:	0c1b      	lsrs	r3, r3, #16
2000ecbe:	f003 0303 	and.w	r3, r3, #3
2000ecc2:	3301      	adds	r3, #1
2000ecc4:	005b      	lsls	r3, r3, #1
2000ecc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
2000ecc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
2000ecca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000eccc:	fbb2 f3f3 	udiv	r3, r2, r3
2000ecd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
2000ecd2:	e002      	b.n	2000ecda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
2000ecd4:	4b05      	ldr	r3, [pc, #20]	; (2000ecec <HAL_RCC_GetSysClockFreq+0x184>)
2000ecd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
2000ecd8:	bf00      	nop
    }
  }
  return sysclockfreq;
2000ecda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
2000ecdc:	4618      	mov	r0, r3
2000ecde:	3740      	adds	r7, #64	; 0x40
2000ece0:	46bd      	mov	sp, r7
2000ece2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
2000ece6:	bf00      	nop
2000ece8:	40023800 	.word	0x40023800
2000ecec:	00f42400 	.word	0x00f42400
2000ecf0:	017d7840 	.word	0x017d7840

2000ecf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2000ecf4:	b480      	push	{r7}
2000ecf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
2000ecf8:	4b03      	ldr	r3, [pc, #12]	; (2000ed08 <HAL_RCC_GetHCLKFreq+0x14>)
2000ecfa:	681b      	ldr	r3, [r3, #0]
}
2000ecfc:	4618      	mov	r0, r3
2000ecfe:	46bd      	mov	sp, r7
2000ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ed04:	4770      	bx	lr
2000ed06:	bf00      	nop
2000ed08:	2000fb04 	.word	0x2000fb04

2000ed0c <__errno>:
2000ed0c:	4b01      	ldr	r3, [pc, #4]	; (2000ed14 <__errno+0x8>)
2000ed0e:	6818      	ldr	r0, [r3, #0]
2000ed10:	4770      	bx	lr
2000ed12:	bf00      	nop
2000ed14:	2000fb24 	.word	0x2000fb24

2000ed18 <__libc_init_array>:
2000ed18:	b570      	push	{r4, r5, r6, lr}
2000ed1a:	4d0d      	ldr	r5, [pc, #52]	; (2000ed50 <__libc_init_array+0x38>)
2000ed1c:	4c0d      	ldr	r4, [pc, #52]	; (2000ed54 <__libc_init_array+0x3c>)
2000ed1e:	1b64      	subs	r4, r4, r5
2000ed20:	10a4      	asrs	r4, r4, #2
2000ed22:	2600      	movs	r6, #0
2000ed24:	42a6      	cmp	r6, r4
2000ed26:	d109      	bne.n	2000ed3c <__libc_init_array+0x24>
2000ed28:	4d0b      	ldr	r5, [pc, #44]	; (2000ed58 <__libc_init_array+0x40>)
2000ed2a:	4c0c      	ldr	r4, [pc, #48]	; (2000ed5c <__libc_init_array+0x44>)
2000ed2c:	f000 fc8e 	bl	2000f64c <_init>
2000ed30:	1b64      	subs	r4, r4, r5
2000ed32:	10a4      	asrs	r4, r4, #2
2000ed34:	2600      	movs	r6, #0
2000ed36:	42a6      	cmp	r6, r4
2000ed38:	d105      	bne.n	2000ed46 <__libc_init_array+0x2e>
2000ed3a:	bd70      	pop	{r4, r5, r6, pc}
2000ed3c:	f855 3b04 	ldr.w	r3, [r5], #4
2000ed40:	4798      	blx	r3
2000ed42:	3601      	adds	r6, #1
2000ed44:	e7ee      	b.n	2000ed24 <__libc_init_array+0xc>
2000ed46:	f855 3b04 	ldr.w	r3, [r5], #4
2000ed4a:	4798      	blx	r3
2000ed4c:	3601      	adds	r6, #1
2000ed4e:	e7f2      	b.n	2000ed36 <__libc_init_array+0x1e>
2000ed50:	2000fafc 	.word	0x2000fafc
2000ed54:	2000fafc 	.word	0x2000fafc
2000ed58:	2000fafc 	.word	0x2000fafc
2000ed5c:	2000fb00 	.word	0x2000fb00

2000ed60 <memset>:
2000ed60:	4402      	add	r2, r0
2000ed62:	4603      	mov	r3, r0
2000ed64:	4293      	cmp	r3, r2
2000ed66:	d100      	bne.n	2000ed6a <memset+0xa>
2000ed68:	4770      	bx	lr
2000ed6a:	f803 1b01 	strb.w	r1, [r3], #1
2000ed6e:	e7f9      	b.n	2000ed64 <memset+0x4>

2000ed70 <_vsiprintf_r>:
2000ed70:	b500      	push	{lr}
2000ed72:	b09b      	sub	sp, #108	; 0x6c
2000ed74:	9100      	str	r1, [sp, #0]
2000ed76:	9104      	str	r1, [sp, #16]
2000ed78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
2000ed7c:	9105      	str	r1, [sp, #20]
2000ed7e:	9102      	str	r1, [sp, #8]
2000ed80:	4905      	ldr	r1, [pc, #20]	; (2000ed98 <_vsiprintf_r+0x28>)
2000ed82:	9103      	str	r1, [sp, #12]
2000ed84:	4669      	mov	r1, sp
2000ed86:	f000 f86f 	bl	2000ee68 <_svfiprintf_r>
2000ed8a:	9b00      	ldr	r3, [sp, #0]
2000ed8c:	2200      	movs	r2, #0
2000ed8e:	701a      	strb	r2, [r3, #0]
2000ed90:	b01b      	add	sp, #108	; 0x6c
2000ed92:	f85d fb04 	ldr.w	pc, [sp], #4
2000ed96:	bf00      	nop
2000ed98:	ffff0208 	.word	0xffff0208

2000ed9c <vsiprintf>:
2000ed9c:	4613      	mov	r3, r2
2000ed9e:	460a      	mov	r2, r1
2000eda0:	4601      	mov	r1, r0
2000eda2:	4802      	ldr	r0, [pc, #8]	; (2000edac <vsiprintf+0x10>)
2000eda4:	6800      	ldr	r0, [r0, #0]
2000eda6:	f7ff bfe3 	b.w	2000ed70 <_vsiprintf_r>
2000edaa:	bf00      	nop
2000edac:	2000fb24 	.word	0x2000fb24

2000edb0 <__ssputs_r>:
2000edb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000edb4:	688e      	ldr	r6, [r1, #8]
2000edb6:	429e      	cmp	r6, r3
2000edb8:	4682      	mov	sl, r0
2000edba:	460c      	mov	r4, r1
2000edbc:	4690      	mov	r8, r2
2000edbe:	461f      	mov	r7, r3
2000edc0:	d838      	bhi.n	2000ee34 <__ssputs_r+0x84>
2000edc2:	898a      	ldrh	r2, [r1, #12]
2000edc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
2000edc8:	d032      	beq.n	2000ee30 <__ssputs_r+0x80>
2000edca:	6825      	ldr	r5, [r4, #0]
2000edcc:	6909      	ldr	r1, [r1, #16]
2000edce:	eba5 0901 	sub.w	r9, r5, r1
2000edd2:	6965      	ldr	r5, [r4, #20]
2000edd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
2000edd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
2000eddc:	3301      	adds	r3, #1
2000edde:	444b      	add	r3, r9
2000ede0:	106d      	asrs	r5, r5, #1
2000ede2:	429d      	cmp	r5, r3
2000ede4:	bf38      	it	cc
2000ede6:	461d      	movcc	r5, r3
2000ede8:	0553      	lsls	r3, r2, #21
2000edea:	d531      	bpl.n	2000ee50 <__ssputs_r+0xa0>
2000edec:	4629      	mov	r1, r5
2000edee:	f000 fb63 	bl	2000f4b8 <_malloc_r>
2000edf2:	4606      	mov	r6, r0
2000edf4:	b950      	cbnz	r0, 2000ee0c <__ssputs_r+0x5c>
2000edf6:	230c      	movs	r3, #12
2000edf8:	f8ca 3000 	str.w	r3, [sl]
2000edfc:	89a3      	ldrh	r3, [r4, #12]
2000edfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000ee02:	81a3      	strh	r3, [r4, #12]
2000ee04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000ee08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000ee0c:	6921      	ldr	r1, [r4, #16]
2000ee0e:	464a      	mov	r2, r9
2000ee10:	f000 fabe 	bl	2000f390 <memcpy>
2000ee14:	89a3      	ldrh	r3, [r4, #12]
2000ee16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
2000ee1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000ee1e:	81a3      	strh	r3, [r4, #12]
2000ee20:	6126      	str	r6, [r4, #16]
2000ee22:	6165      	str	r5, [r4, #20]
2000ee24:	444e      	add	r6, r9
2000ee26:	eba5 0509 	sub.w	r5, r5, r9
2000ee2a:	6026      	str	r6, [r4, #0]
2000ee2c:	60a5      	str	r5, [r4, #8]
2000ee2e:	463e      	mov	r6, r7
2000ee30:	42be      	cmp	r6, r7
2000ee32:	d900      	bls.n	2000ee36 <__ssputs_r+0x86>
2000ee34:	463e      	mov	r6, r7
2000ee36:	6820      	ldr	r0, [r4, #0]
2000ee38:	4632      	mov	r2, r6
2000ee3a:	4641      	mov	r1, r8
2000ee3c:	f000 fab6 	bl	2000f3ac <memmove>
2000ee40:	68a3      	ldr	r3, [r4, #8]
2000ee42:	1b9b      	subs	r3, r3, r6
2000ee44:	60a3      	str	r3, [r4, #8]
2000ee46:	6823      	ldr	r3, [r4, #0]
2000ee48:	4433      	add	r3, r6
2000ee4a:	6023      	str	r3, [r4, #0]
2000ee4c:	2000      	movs	r0, #0
2000ee4e:	e7db      	b.n	2000ee08 <__ssputs_r+0x58>
2000ee50:	462a      	mov	r2, r5
2000ee52:	f000 fba5 	bl	2000f5a0 <_realloc_r>
2000ee56:	4606      	mov	r6, r0
2000ee58:	2800      	cmp	r0, #0
2000ee5a:	d1e1      	bne.n	2000ee20 <__ssputs_r+0x70>
2000ee5c:	6921      	ldr	r1, [r4, #16]
2000ee5e:	4650      	mov	r0, sl
2000ee60:	f000 fabe 	bl	2000f3e0 <_free_r>
2000ee64:	e7c7      	b.n	2000edf6 <__ssputs_r+0x46>
	...

2000ee68 <_svfiprintf_r>:
2000ee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000ee6c:	4698      	mov	r8, r3
2000ee6e:	898b      	ldrh	r3, [r1, #12]
2000ee70:	061b      	lsls	r3, r3, #24
2000ee72:	b09d      	sub	sp, #116	; 0x74
2000ee74:	4607      	mov	r7, r0
2000ee76:	460d      	mov	r5, r1
2000ee78:	4614      	mov	r4, r2
2000ee7a:	d50e      	bpl.n	2000ee9a <_svfiprintf_r+0x32>
2000ee7c:	690b      	ldr	r3, [r1, #16]
2000ee7e:	b963      	cbnz	r3, 2000ee9a <_svfiprintf_r+0x32>
2000ee80:	2140      	movs	r1, #64	; 0x40
2000ee82:	f000 fb19 	bl	2000f4b8 <_malloc_r>
2000ee86:	6028      	str	r0, [r5, #0]
2000ee88:	6128      	str	r0, [r5, #16]
2000ee8a:	b920      	cbnz	r0, 2000ee96 <_svfiprintf_r+0x2e>
2000ee8c:	230c      	movs	r3, #12
2000ee8e:	603b      	str	r3, [r7, #0]
2000ee90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000ee94:	e0d1      	b.n	2000f03a <_svfiprintf_r+0x1d2>
2000ee96:	2340      	movs	r3, #64	; 0x40
2000ee98:	616b      	str	r3, [r5, #20]
2000ee9a:	2300      	movs	r3, #0
2000ee9c:	9309      	str	r3, [sp, #36]	; 0x24
2000ee9e:	2320      	movs	r3, #32
2000eea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
2000eea4:	f8cd 800c 	str.w	r8, [sp, #12]
2000eea8:	2330      	movs	r3, #48	; 0x30
2000eeaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 2000f054 <_svfiprintf_r+0x1ec>
2000eeae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
2000eeb2:	f04f 0901 	mov.w	r9, #1
2000eeb6:	4623      	mov	r3, r4
2000eeb8:	469a      	mov	sl, r3
2000eeba:	f813 2b01 	ldrb.w	r2, [r3], #1
2000eebe:	b10a      	cbz	r2, 2000eec4 <_svfiprintf_r+0x5c>
2000eec0:	2a25      	cmp	r2, #37	; 0x25
2000eec2:	d1f9      	bne.n	2000eeb8 <_svfiprintf_r+0x50>
2000eec4:	ebba 0b04 	subs.w	fp, sl, r4
2000eec8:	d00b      	beq.n	2000eee2 <_svfiprintf_r+0x7a>
2000eeca:	465b      	mov	r3, fp
2000eecc:	4622      	mov	r2, r4
2000eece:	4629      	mov	r1, r5
2000eed0:	4638      	mov	r0, r7
2000eed2:	f7ff ff6d 	bl	2000edb0 <__ssputs_r>
2000eed6:	3001      	adds	r0, #1
2000eed8:	f000 80aa 	beq.w	2000f030 <_svfiprintf_r+0x1c8>
2000eedc:	9a09      	ldr	r2, [sp, #36]	; 0x24
2000eede:	445a      	add	r2, fp
2000eee0:	9209      	str	r2, [sp, #36]	; 0x24
2000eee2:	f89a 3000 	ldrb.w	r3, [sl]
2000eee6:	2b00      	cmp	r3, #0
2000eee8:	f000 80a2 	beq.w	2000f030 <_svfiprintf_r+0x1c8>
2000eeec:	2300      	movs	r3, #0
2000eeee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2000eef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
2000eef6:	f10a 0a01 	add.w	sl, sl, #1
2000eefa:	9304      	str	r3, [sp, #16]
2000eefc:	9307      	str	r3, [sp, #28]
2000eefe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
2000ef02:	931a      	str	r3, [sp, #104]	; 0x68
2000ef04:	4654      	mov	r4, sl
2000ef06:	2205      	movs	r2, #5
2000ef08:	f814 1b01 	ldrb.w	r1, [r4], #1
2000ef0c:	4851      	ldr	r0, [pc, #324]	; (2000f054 <_svfiprintf_r+0x1ec>)
2000ef0e:	f7fe f967 	bl	2000d1e0 <memchr>
2000ef12:	9a04      	ldr	r2, [sp, #16]
2000ef14:	b9d8      	cbnz	r0, 2000ef4e <_svfiprintf_r+0xe6>
2000ef16:	06d0      	lsls	r0, r2, #27
2000ef18:	bf44      	itt	mi
2000ef1a:	2320      	movmi	r3, #32
2000ef1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2000ef20:	0711      	lsls	r1, r2, #28
2000ef22:	bf44      	itt	mi
2000ef24:	232b      	movmi	r3, #43	; 0x2b
2000ef26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2000ef2a:	f89a 3000 	ldrb.w	r3, [sl]
2000ef2e:	2b2a      	cmp	r3, #42	; 0x2a
2000ef30:	d015      	beq.n	2000ef5e <_svfiprintf_r+0xf6>
2000ef32:	9a07      	ldr	r2, [sp, #28]
2000ef34:	4654      	mov	r4, sl
2000ef36:	2000      	movs	r0, #0
2000ef38:	f04f 0c0a 	mov.w	ip, #10
2000ef3c:	4621      	mov	r1, r4
2000ef3e:	f811 3b01 	ldrb.w	r3, [r1], #1
2000ef42:	3b30      	subs	r3, #48	; 0x30
2000ef44:	2b09      	cmp	r3, #9
2000ef46:	d94e      	bls.n	2000efe6 <_svfiprintf_r+0x17e>
2000ef48:	b1b0      	cbz	r0, 2000ef78 <_svfiprintf_r+0x110>
2000ef4a:	9207      	str	r2, [sp, #28]
2000ef4c:	e014      	b.n	2000ef78 <_svfiprintf_r+0x110>
2000ef4e:	eba0 0308 	sub.w	r3, r0, r8
2000ef52:	fa09 f303 	lsl.w	r3, r9, r3
2000ef56:	4313      	orrs	r3, r2
2000ef58:	9304      	str	r3, [sp, #16]
2000ef5a:	46a2      	mov	sl, r4
2000ef5c:	e7d2      	b.n	2000ef04 <_svfiprintf_r+0x9c>
2000ef5e:	9b03      	ldr	r3, [sp, #12]
2000ef60:	1d19      	adds	r1, r3, #4
2000ef62:	681b      	ldr	r3, [r3, #0]
2000ef64:	9103      	str	r1, [sp, #12]
2000ef66:	2b00      	cmp	r3, #0
2000ef68:	bfbb      	ittet	lt
2000ef6a:	425b      	neglt	r3, r3
2000ef6c:	f042 0202 	orrlt.w	r2, r2, #2
2000ef70:	9307      	strge	r3, [sp, #28]
2000ef72:	9307      	strlt	r3, [sp, #28]
2000ef74:	bfb8      	it	lt
2000ef76:	9204      	strlt	r2, [sp, #16]
2000ef78:	7823      	ldrb	r3, [r4, #0]
2000ef7a:	2b2e      	cmp	r3, #46	; 0x2e
2000ef7c:	d10c      	bne.n	2000ef98 <_svfiprintf_r+0x130>
2000ef7e:	7863      	ldrb	r3, [r4, #1]
2000ef80:	2b2a      	cmp	r3, #42	; 0x2a
2000ef82:	d135      	bne.n	2000eff0 <_svfiprintf_r+0x188>
2000ef84:	9b03      	ldr	r3, [sp, #12]
2000ef86:	1d1a      	adds	r2, r3, #4
2000ef88:	681b      	ldr	r3, [r3, #0]
2000ef8a:	9203      	str	r2, [sp, #12]
2000ef8c:	2b00      	cmp	r3, #0
2000ef8e:	bfb8      	it	lt
2000ef90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
2000ef94:	3402      	adds	r4, #2
2000ef96:	9305      	str	r3, [sp, #20]
2000ef98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2000f064 <_svfiprintf_r+0x1fc>
2000ef9c:	7821      	ldrb	r1, [r4, #0]
2000ef9e:	2203      	movs	r2, #3
2000efa0:	4650      	mov	r0, sl
2000efa2:	f7fe f91d 	bl	2000d1e0 <memchr>
2000efa6:	b140      	cbz	r0, 2000efba <_svfiprintf_r+0x152>
2000efa8:	2340      	movs	r3, #64	; 0x40
2000efaa:	eba0 000a 	sub.w	r0, r0, sl
2000efae:	fa03 f000 	lsl.w	r0, r3, r0
2000efb2:	9b04      	ldr	r3, [sp, #16]
2000efb4:	4303      	orrs	r3, r0
2000efb6:	3401      	adds	r4, #1
2000efb8:	9304      	str	r3, [sp, #16]
2000efba:	f814 1b01 	ldrb.w	r1, [r4], #1
2000efbe:	4826      	ldr	r0, [pc, #152]	; (2000f058 <_svfiprintf_r+0x1f0>)
2000efc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
2000efc4:	2206      	movs	r2, #6
2000efc6:	f7fe f90b 	bl	2000d1e0 <memchr>
2000efca:	2800      	cmp	r0, #0
2000efcc:	d038      	beq.n	2000f040 <_svfiprintf_r+0x1d8>
2000efce:	4b23      	ldr	r3, [pc, #140]	; (2000f05c <_svfiprintf_r+0x1f4>)
2000efd0:	bb1b      	cbnz	r3, 2000f01a <_svfiprintf_r+0x1b2>
2000efd2:	9b03      	ldr	r3, [sp, #12]
2000efd4:	3307      	adds	r3, #7
2000efd6:	f023 0307 	bic.w	r3, r3, #7
2000efda:	3308      	adds	r3, #8
2000efdc:	9303      	str	r3, [sp, #12]
2000efde:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000efe0:	4433      	add	r3, r6
2000efe2:	9309      	str	r3, [sp, #36]	; 0x24
2000efe4:	e767      	b.n	2000eeb6 <_svfiprintf_r+0x4e>
2000efe6:	fb0c 3202 	mla	r2, ip, r2, r3
2000efea:	460c      	mov	r4, r1
2000efec:	2001      	movs	r0, #1
2000efee:	e7a5      	b.n	2000ef3c <_svfiprintf_r+0xd4>
2000eff0:	2300      	movs	r3, #0
2000eff2:	3401      	adds	r4, #1
2000eff4:	9305      	str	r3, [sp, #20]
2000eff6:	4619      	mov	r1, r3
2000eff8:	f04f 0c0a 	mov.w	ip, #10
2000effc:	4620      	mov	r0, r4
2000effe:	f810 2b01 	ldrb.w	r2, [r0], #1
2000f002:	3a30      	subs	r2, #48	; 0x30
2000f004:	2a09      	cmp	r2, #9
2000f006:	d903      	bls.n	2000f010 <_svfiprintf_r+0x1a8>
2000f008:	2b00      	cmp	r3, #0
2000f00a:	d0c5      	beq.n	2000ef98 <_svfiprintf_r+0x130>
2000f00c:	9105      	str	r1, [sp, #20]
2000f00e:	e7c3      	b.n	2000ef98 <_svfiprintf_r+0x130>
2000f010:	fb0c 2101 	mla	r1, ip, r1, r2
2000f014:	4604      	mov	r4, r0
2000f016:	2301      	movs	r3, #1
2000f018:	e7f0      	b.n	2000effc <_svfiprintf_r+0x194>
2000f01a:	ab03      	add	r3, sp, #12
2000f01c:	9300      	str	r3, [sp, #0]
2000f01e:	462a      	mov	r2, r5
2000f020:	4b0f      	ldr	r3, [pc, #60]	; (2000f060 <_svfiprintf_r+0x1f8>)
2000f022:	a904      	add	r1, sp, #16
2000f024:	4638      	mov	r0, r7
2000f026:	f3af 8000 	nop.w
2000f02a:	1c42      	adds	r2, r0, #1
2000f02c:	4606      	mov	r6, r0
2000f02e:	d1d6      	bne.n	2000efde <_svfiprintf_r+0x176>
2000f030:	89ab      	ldrh	r3, [r5, #12]
2000f032:	065b      	lsls	r3, r3, #25
2000f034:	f53f af2c 	bmi.w	2000ee90 <_svfiprintf_r+0x28>
2000f038:	9809      	ldr	r0, [sp, #36]	; 0x24
2000f03a:	b01d      	add	sp, #116	; 0x74
2000f03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000f040:	ab03      	add	r3, sp, #12
2000f042:	9300      	str	r3, [sp, #0]
2000f044:	462a      	mov	r2, r5
2000f046:	4b06      	ldr	r3, [pc, #24]	; (2000f060 <_svfiprintf_r+0x1f8>)
2000f048:	a904      	add	r1, sp, #16
2000f04a:	4638      	mov	r0, r7
2000f04c:	f000 f87a 	bl	2000f144 <_printf_i>
2000f050:	e7eb      	b.n	2000f02a <_svfiprintf_r+0x1c2>
2000f052:	bf00      	nop
2000f054:	2000fac0 	.word	0x2000fac0
2000f058:	2000faca 	.word	0x2000faca
2000f05c:	00000000 	.word	0x00000000
2000f060:	2000edb1 	.word	0x2000edb1
2000f064:	2000fac6 	.word	0x2000fac6

2000f068 <_printf_common>:
2000f068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000f06c:	4616      	mov	r6, r2
2000f06e:	4699      	mov	r9, r3
2000f070:	688a      	ldr	r2, [r1, #8]
2000f072:	690b      	ldr	r3, [r1, #16]
2000f074:	f8dd 8020 	ldr.w	r8, [sp, #32]
2000f078:	4293      	cmp	r3, r2
2000f07a:	bfb8      	it	lt
2000f07c:	4613      	movlt	r3, r2
2000f07e:	6033      	str	r3, [r6, #0]
2000f080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
2000f084:	4607      	mov	r7, r0
2000f086:	460c      	mov	r4, r1
2000f088:	b10a      	cbz	r2, 2000f08e <_printf_common+0x26>
2000f08a:	3301      	adds	r3, #1
2000f08c:	6033      	str	r3, [r6, #0]
2000f08e:	6823      	ldr	r3, [r4, #0]
2000f090:	0699      	lsls	r1, r3, #26
2000f092:	bf42      	ittt	mi
2000f094:	6833      	ldrmi	r3, [r6, #0]
2000f096:	3302      	addmi	r3, #2
2000f098:	6033      	strmi	r3, [r6, #0]
2000f09a:	6825      	ldr	r5, [r4, #0]
2000f09c:	f015 0506 	ands.w	r5, r5, #6
2000f0a0:	d106      	bne.n	2000f0b0 <_printf_common+0x48>
2000f0a2:	f104 0a19 	add.w	sl, r4, #25
2000f0a6:	68e3      	ldr	r3, [r4, #12]
2000f0a8:	6832      	ldr	r2, [r6, #0]
2000f0aa:	1a9b      	subs	r3, r3, r2
2000f0ac:	42ab      	cmp	r3, r5
2000f0ae:	dc26      	bgt.n	2000f0fe <_printf_common+0x96>
2000f0b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
2000f0b4:	1e13      	subs	r3, r2, #0
2000f0b6:	6822      	ldr	r2, [r4, #0]
2000f0b8:	bf18      	it	ne
2000f0ba:	2301      	movne	r3, #1
2000f0bc:	0692      	lsls	r2, r2, #26
2000f0be:	d42b      	bmi.n	2000f118 <_printf_common+0xb0>
2000f0c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
2000f0c4:	4649      	mov	r1, r9
2000f0c6:	4638      	mov	r0, r7
2000f0c8:	47c0      	blx	r8
2000f0ca:	3001      	adds	r0, #1
2000f0cc:	d01e      	beq.n	2000f10c <_printf_common+0xa4>
2000f0ce:	6823      	ldr	r3, [r4, #0]
2000f0d0:	68e5      	ldr	r5, [r4, #12]
2000f0d2:	6832      	ldr	r2, [r6, #0]
2000f0d4:	f003 0306 	and.w	r3, r3, #6
2000f0d8:	2b04      	cmp	r3, #4
2000f0da:	bf08      	it	eq
2000f0dc:	1aad      	subeq	r5, r5, r2
2000f0de:	68a3      	ldr	r3, [r4, #8]
2000f0e0:	6922      	ldr	r2, [r4, #16]
2000f0e2:	bf0c      	ite	eq
2000f0e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
2000f0e8:	2500      	movne	r5, #0
2000f0ea:	4293      	cmp	r3, r2
2000f0ec:	bfc4      	itt	gt
2000f0ee:	1a9b      	subgt	r3, r3, r2
2000f0f0:	18ed      	addgt	r5, r5, r3
2000f0f2:	2600      	movs	r6, #0
2000f0f4:	341a      	adds	r4, #26
2000f0f6:	42b5      	cmp	r5, r6
2000f0f8:	d11a      	bne.n	2000f130 <_printf_common+0xc8>
2000f0fa:	2000      	movs	r0, #0
2000f0fc:	e008      	b.n	2000f110 <_printf_common+0xa8>
2000f0fe:	2301      	movs	r3, #1
2000f100:	4652      	mov	r2, sl
2000f102:	4649      	mov	r1, r9
2000f104:	4638      	mov	r0, r7
2000f106:	47c0      	blx	r8
2000f108:	3001      	adds	r0, #1
2000f10a:	d103      	bne.n	2000f114 <_printf_common+0xac>
2000f10c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000f110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000f114:	3501      	adds	r5, #1
2000f116:	e7c6      	b.n	2000f0a6 <_printf_common+0x3e>
2000f118:	18e1      	adds	r1, r4, r3
2000f11a:	1c5a      	adds	r2, r3, #1
2000f11c:	2030      	movs	r0, #48	; 0x30
2000f11e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
2000f122:	4422      	add	r2, r4
2000f124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
2000f128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
2000f12c:	3302      	adds	r3, #2
2000f12e:	e7c7      	b.n	2000f0c0 <_printf_common+0x58>
2000f130:	2301      	movs	r3, #1
2000f132:	4622      	mov	r2, r4
2000f134:	4649      	mov	r1, r9
2000f136:	4638      	mov	r0, r7
2000f138:	47c0      	blx	r8
2000f13a:	3001      	adds	r0, #1
2000f13c:	d0e6      	beq.n	2000f10c <_printf_common+0xa4>
2000f13e:	3601      	adds	r6, #1
2000f140:	e7d9      	b.n	2000f0f6 <_printf_common+0x8e>
	...

2000f144 <_printf_i>:
2000f144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
2000f148:	7e0f      	ldrb	r7, [r1, #24]
2000f14a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
2000f14c:	2f78      	cmp	r7, #120	; 0x78
2000f14e:	4691      	mov	r9, r2
2000f150:	4680      	mov	r8, r0
2000f152:	460c      	mov	r4, r1
2000f154:	469a      	mov	sl, r3
2000f156:	f101 0243 	add.w	r2, r1, #67	; 0x43
2000f15a:	d807      	bhi.n	2000f16c <_printf_i+0x28>
2000f15c:	2f62      	cmp	r7, #98	; 0x62
2000f15e:	d80a      	bhi.n	2000f176 <_printf_i+0x32>
2000f160:	2f00      	cmp	r7, #0
2000f162:	f000 80d8 	beq.w	2000f316 <_printf_i+0x1d2>
2000f166:	2f58      	cmp	r7, #88	; 0x58
2000f168:	f000 80a3 	beq.w	2000f2b2 <_printf_i+0x16e>
2000f16c:	f104 0542 	add.w	r5, r4, #66	; 0x42
2000f170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
2000f174:	e03a      	b.n	2000f1ec <_printf_i+0xa8>
2000f176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
2000f17a:	2b15      	cmp	r3, #21
2000f17c:	d8f6      	bhi.n	2000f16c <_printf_i+0x28>
2000f17e:	a101      	add	r1, pc, #4	; (adr r1, 2000f184 <_printf_i+0x40>)
2000f180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
2000f184:	2000f1dd 	.word	0x2000f1dd
2000f188:	2000f1f1 	.word	0x2000f1f1
2000f18c:	2000f16d 	.word	0x2000f16d
2000f190:	2000f16d 	.word	0x2000f16d
2000f194:	2000f16d 	.word	0x2000f16d
2000f198:	2000f16d 	.word	0x2000f16d
2000f19c:	2000f1f1 	.word	0x2000f1f1
2000f1a0:	2000f16d 	.word	0x2000f16d
2000f1a4:	2000f16d 	.word	0x2000f16d
2000f1a8:	2000f16d 	.word	0x2000f16d
2000f1ac:	2000f16d 	.word	0x2000f16d
2000f1b0:	2000f2fd 	.word	0x2000f2fd
2000f1b4:	2000f221 	.word	0x2000f221
2000f1b8:	2000f2df 	.word	0x2000f2df
2000f1bc:	2000f16d 	.word	0x2000f16d
2000f1c0:	2000f16d 	.word	0x2000f16d
2000f1c4:	2000f31f 	.word	0x2000f31f
2000f1c8:	2000f16d 	.word	0x2000f16d
2000f1cc:	2000f221 	.word	0x2000f221
2000f1d0:	2000f16d 	.word	0x2000f16d
2000f1d4:	2000f16d 	.word	0x2000f16d
2000f1d8:	2000f2e7 	.word	0x2000f2e7
2000f1dc:	682b      	ldr	r3, [r5, #0]
2000f1de:	1d1a      	adds	r2, r3, #4
2000f1e0:	681b      	ldr	r3, [r3, #0]
2000f1e2:	602a      	str	r2, [r5, #0]
2000f1e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
2000f1e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
2000f1ec:	2301      	movs	r3, #1
2000f1ee:	e0a3      	b.n	2000f338 <_printf_i+0x1f4>
2000f1f0:	6820      	ldr	r0, [r4, #0]
2000f1f2:	6829      	ldr	r1, [r5, #0]
2000f1f4:	0606      	lsls	r6, r0, #24
2000f1f6:	f101 0304 	add.w	r3, r1, #4
2000f1fa:	d50a      	bpl.n	2000f212 <_printf_i+0xce>
2000f1fc:	680e      	ldr	r6, [r1, #0]
2000f1fe:	602b      	str	r3, [r5, #0]
2000f200:	2e00      	cmp	r6, #0
2000f202:	da03      	bge.n	2000f20c <_printf_i+0xc8>
2000f204:	232d      	movs	r3, #45	; 0x2d
2000f206:	4276      	negs	r6, r6
2000f208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2000f20c:	485e      	ldr	r0, [pc, #376]	; (2000f388 <_printf_i+0x244>)
2000f20e:	230a      	movs	r3, #10
2000f210:	e019      	b.n	2000f246 <_printf_i+0x102>
2000f212:	680e      	ldr	r6, [r1, #0]
2000f214:	602b      	str	r3, [r5, #0]
2000f216:	f010 0f40 	tst.w	r0, #64	; 0x40
2000f21a:	bf18      	it	ne
2000f21c:	b236      	sxthne	r6, r6
2000f21e:	e7ef      	b.n	2000f200 <_printf_i+0xbc>
2000f220:	682b      	ldr	r3, [r5, #0]
2000f222:	6820      	ldr	r0, [r4, #0]
2000f224:	1d19      	adds	r1, r3, #4
2000f226:	6029      	str	r1, [r5, #0]
2000f228:	0601      	lsls	r1, r0, #24
2000f22a:	d501      	bpl.n	2000f230 <_printf_i+0xec>
2000f22c:	681e      	ldr	r6, [r3, #0]
2000f22e:	e002      	b.n	2000f236 <_printf_i+0xf2>
2000f230:	0646      	lsls	r6, r0, #25
2000f232:	d5fb      	bpl.n	2000f22c <_printf_i+0xe8>
2000f234:	881e      	ldrh	r6, [r3, #0]
2000f236:	4854      	ldr	r0, [pc, #336]	; (2000f388 <_printf_i+0x244>)
2000f238:	2f6f      	cmp	r7, #111	; 0x6f
2000f23a:	bf0c      	ite	eq
2000f23c:	2308      	moveq	r3, #8
2000f23e:	230a      	movne	r3, #10
2000f240:	2100      	movs	r1, #0
2000f242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
2000f246:	6865      	ldr	r5, [r4, #4]
2000f248:	60a5      	str	r5, [r4, #8]
2000f24a:	2d00      	cmp	r5, #0
2000f24c:	bfa2      	ittt	ge
2000f24e:	6821      	ldrge	r1, [r4, #0]
2000f250:	f021 0104 	bicge.w	r1, r1, #4
2000f254:	6021      	strge	r1, [r4, #0]
2000f256:	b90e      	cbnz	r6, 2000f25c <_printf_i+0x118>
2000f258:	2d00      	cmp	r5, #0
2000f25a:	d04d      	beq.n	2000f2f8 <_printf_i+0x1b4>
2000f25c:	4615      	mov	r5, r2
2000f25e:	fbb6 f1f3 	udiv	r1, r6, r3
2000f262:	fb03 6711 	mls	r7, r3, r1, r6
2000f266:	5dc7      	ldrb	r7, [r0, r7]
2000f268:	f805 7d01 	strb.w	r7, [r5, #-1]!
2000f26c:	4637      	mov	r7, r6
2000f26e:	42bb      	cmp	r3, r7
2000f270:	460e      	mov	r6, r1
2000f272:	d9f4      	bls.n	2000f25e <_printf_i+0x11a>
2000f274:	2b08      	cmp	r3, #8
2000f276:	d10b      	bne.n	2000f290 <_printf_i+0x14c>
2000f278:	6823      	ldr	r3, [r4, #0]
2000f27a:	07de      	lsls	r6, r3, #31
2000f27c:	d508      	bpl.n	2000f290 <_printf_i+0x14c>
2000f27e:	6923      	ldr	r3, [r4, #16]
2000f280:	6861      	ldr	r1, [r4, #4]
2000f282:	4299      	cmp	r1, r3
2000f284:	bfde      	ittt	le
2000f286:	2330      	movle	r3, #48	; 0x30
2000f288:	f805 3c01 	strble.w	r3, [r5, #-1]
2000f28c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
2000f290:	1b52      	subs	r2, r2, r5
2000f292:	6122      	str	r2, [r4, #16]
2000f294:	f8cd a000 	str.w	sl, [sp]
2000f298:	464b      	mov	r3, r9
2000f29a:	aa03      	add	r2, sp, #12
2000f29c:	4621      	mov	r1, r4
2000f29e:	4640      	mov	r0, r8
2000f2a0:	f7ff fee2 	bl	2000f068 <_printf_common>
2000f2a4:	3001      	adds	r0, #1
2000f2a6:	d14c      	bne.n	2000f342 <_printf_i+0x1fe>
2000f2a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000f2ac:	b004      	add	sp, #16
2000f2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000f2b2:	4835      	ldr	r0, [pc, #212]	; (2000f388 <_printf_i+0x244>)
2000f2b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
2000f2b8:	6829      	ldr	r1, [r5, #0]
2000f2ba:	6823      	ldr	r3, [r4, #0]
2000f2bc:	f851 6b04 	ldr.w	r6, [r1], #4
2000f2c0:	6029      	str	r1, [r5, #0]
2000f2c2:	061d      	lsls	r5, r3, #24
2000f2c4:	d514      	bpl.n	2000f2f0 <_printf_i+0x1ac>
2000f2c6:	07df      	lsls	r7, r3, #31
2000f2c8:	bf44      	itt	mi
2000f2ca:	f043 0320 	orrmi.w	r3, r3, #32
2000f2ce:	6023      	strmi	r3, [r4, #0]
2000f2d0:	b91e      	cbnz	r6, 2000f2da <_printf_i+0x196>
2000f2d2:	6823      	ldr	r3, [r4, #0]
2000f2d4:	f023 0320 	bic.w	r3, r3, #32
2000f2d8:	6023      	str	r3, [r4, #0]
2000f2da:	2310      	movs	r3, #16
2000f2dc:	e7b0      	b.n	2000f240 <_printf_i+0xfc>
2000f2de:	6823      	ldr	r3, [r4, #0]
2000f2e0:	f043 0320 	orr.w	r3, r3, #32
2000f2e4:	6023      	str	r3, [r4, #0]
2000f2e6:	2378      	movs	r3, #120	; 0x78
2000f2e8:	4828      	ldr	r0, [pc, #160]	; (2000f38c <_printf_i+0x248>)
2000f2ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
2000f2ee:	e7e3      	b.n	2000f2b8 <_printf_i+0x174>
2000f2f0:	0659      	lsls	r1, r3, #25
2000f2f2:	bf48      	it	mi
2000f2f4:	b2b6      	uxthmi	r6, r6
2000f2f6:	e7e6      	b.n	2000f2c6 <_printf_i+0x182>
2000f2f8:	4615      	mov	r5, r2
2000f2fa:	e7bb      	b.n	2000f274 <_printf_i+0x130>
2000f2fc:	682b      	ldr	r3, [r5, #0]
2000f2fe:	6826      	ldr	r6, [r4, #0]
2000f300:	6961      	ldr	r1, [r4, #20]
2000f302:	1d18      	adds	r0, r3, #4
2000f304:	6028      	str	r0, [r5, #0]
2000f306:	0635      	lsls	r5, r6, #24
2000f308:	681b      	ldr	r3, [r3, #0]
2000f30a:	d501      	bpl.n	2000f310 <_printf_i+0x1cc>
2000f30c:	6019      	str	r1, [r3, #0]
2000f30e:	e002      	b.n	2000f316 <_printf_i+0x1d2>
2000f310:	0670      	lsls	r0, r6, #25
2000f312:	d5fb      	bpl.n	2000f30c <_printf_i+0x1c8>
2000f314:	8019      	strh	r1, [r3, #0]
2000f316:	2300      	movs	r3, #0
2000f318:	6123      	str	r3, [r4, #16]
2000f31a:	4615      	mov	r5, r2
2000f31c:	e7ba      	b.n	2000f294 <_printf_i+0x150>
2000f31e:	682b      	ldr	r3, [r5, #0]
2000f320:	1d1a      	adds	r2, r3, #4
2000f322:	602a      	str	r2, [r5, #0]
2000f324:	681d      	ldr	r5, [r3, #0]
2000f326:	6862      	ldr	r2, [r4, #4]
2000f328:	2100      	movs	r1, #0
2000f32a:	4628      	mov	r0, r5
2000f32c:	f7fd ff58 	bl	2000d1e0 <memchr>
2000f330:	b108      	cbz	r0, 2000f336 <_printf_i+0x1f2>
2000f332:	1b40      	subs	r0, r0, r5
2000f334:	6060      	str	r0, [r4, #4]
2000f336:	6863      	ldr	r3, [r4, #4]
2000f338:	6123      	str	r3, [r4, #16]
2000f33a:	2300      	movs	r3, #0
2000f33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2000f340:	e7a8      	b.n	2000f294 <_printf_i+0x150>
2000f342:	6923      	ldr	r3, [r4, #16]
2000f344:	462a      	mov	r2, r5
2000f346:	4649      	mov	r1, r9
2000f348:	4640      	mov	r0, r8
2000f34a:	47d0      	blx	sl
2000f34c:	3001      	adds	r0, #1
2000f34e:	d0ab      	beq.n	2000f2a8 <_printf_i+0x164>
2000f350:	6823      	ldr	r3, [r4, #0]
2000f352:	079b      	lsls	r3, r3, #30
2000f354:	d413      	bmi.n	2000f37e <_printf_i+0x23a>
2000f356:	68e0      	ldr	r0, [r4, #12]
2000f358:	9b03      	ldr	r3, [sp, #12]
2000f35a:	4298      	cmp	r0, r3
2000f35c:	bfb8      	it	lt
2000f35e:	4618      	movlt	r0, r3
2000f360:	e7a4      	b.n	2000f2ac <_printf_i+0x168>
2000f362:	2301      	movs	r3, #1
2000f364:	4632      	mov	r2, r6
2000f366:	4649      	mov	r1, r9
2000f368:	4640      	mov	r0, r8
2000f36a:	47d0      	blx	sl
2000f36c:	3001      	adds	r0, #1
2000f36e:	d09b      	beq.n	2000f2a8 <_printf_i+0x164>
2000f370:	3501      	adds	r5, #1
2000f372:	68e3      	ldr	r3, [r4, #12]
2000f374:	9903      	ldr	r1, [sp, #12]
2000f376:	1a5b      	subs	r3, r3, r1
2000f378:	42ab      	cmp	r3, r5
2000f37a:	dcf2      	bgt.n	2000f362 <_printf_i+0x21e>
2000f37c:	e7eb      	b.n	2000f356 <_printf_i+0x212>
2000f37e:	2500      	movs	r5, #0
2000f380:	f104 0619 	add.w	r6, r4, #25
2000f384:	e7f5      	b.n	2000f372 <_printf_i+0x22e>
2000f386:	bf00      	nop
2000f388:	2000fad1 	.word	0x2000fad1
2000f38c:	2000fae2 	.word	0x2000fae2

2000f390 <memcpy>:
2000f390:	440a      	add	r2, r1
2000f392:	4291      	cmp	r1, r2
2000f394:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
2000f398:	d100      	bne.n	2000f39c <memcpy+0xc>
2000f39a:	4770      	bx	lr
2000f39c:	b510      	push	{r4, lr}
2000f39e:	f811 4b01 	ldrb.w	r4, [r1], #1
2000f3a2:	f803 4f01 	strb.w	r4, [r3, #1]!
2000f3a6:	4291      	cmp	r1, r2
2000f3a8:	d1f9      	bne.n	2000f39e <memcpy+0xe>
2000f3aa:	bd10      	pop	{r4, pc}

2000f3ac <memmove>:
2000f3ac:	4288      	cmp	r0, r1
2000f3ae:	b510      	push	{r4, lr}
2000f3b0:	eb01 0402 	add.w	r4, r1, r2
2000f3b4:	d902      	bls.n	2000f3bc <memmove+0x10>
2000f3b6:	4284      	cmp	r4, r0
2000f3b8:	4623      	mov	r3, r4
2000f3ba:	d807      	bhi.n	2000f3cc <memmove+0x20>
2000f3bc:	1e43      	subs	r3, r0, #1
2000f3be:	42a1      	cmp	r1, r4
2000f3c0:	d008      	beq.n	2000f3d4 <memmove+0x28>
2000f3c2:	f811 2b01 	ldrb.w	r2, [r1], #1
2000f3c6:	f803 2f01 	strb.w	r2, [r3, #1]!
2000f3ca:	e7f8      	b.n	2000f3be <memmove+0x12>
2000f3cc:	4402      	add	r2, r0
2000f3ce:	4601      	mov	r1, r0
2000f3d0:	428a      	cmp	r2, r1
2000f3d2:	d100      	bne.n	2000f3d6 <memmove+0x2a>
2000f3d4:	bd10      	pop	{r4, pc}
2000f3d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
2000f3da:	f802 4d01 	strb.w	r4, [r2, #-1]!
2000f3de:	e7f7      	b.n	2000f3d0 <memmove+0x24>

2000f3e0 <_free_r>:
2000f3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
2000f3e2:	2900      	cmp	r1, #0
2000f3e4:	d044      	beq.n	2000f470 <_free_r+0x90>
2000f3e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000f3ea:	9001      	str	r0, [sp, #4]
2000f3ec:	2b00      	cmp	r3, #0
2000f3ee:	f1a1 0404 	sub.w	r4, r1, #4
2000f3f2:	bfb8      	it	lt
2000f3f4:	18e4      	addlt	r4, r4, r3
2000f3f6:	f000 f913 	bl	2000f620 <__malloc_lock>
2000f3fa:	4a1e      	ldr	r2, [pc, #120]	; (2000f474 <_free_r+0x94>)
2000f3fc:	9801      	ldr	r0, [sp, #4]
2000f3fe:	6813      	ldr	r3, [r2, #0]
2000f400:	b933      	cbnz	r3, 2000f410 <_free_r+0x30>
2000f402:	6063      	str	r3, [r4, #4]
2000f404:	6014      	str	r4, [r2, #0]
2000f406:	b003      	add	sp, #12
2000f408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2000f40c:	f000 b90e 	b.w	2000f62c <__malloc_unlock>
2000f410:	42a3      	cmp	r3, r4
2000f412:	d908      	bls.n	2000f426 <_free_r+0x46>
2000f414:	6825      	ldr	r5, [r4, #0]
2000f416:	1961      	adds	r1, r4, r5
2000f418:	428b      	cmp	r3, r1
2000f41a:	bf01      	itttt	eq
2000f41c:	6819      	ldreq	r1, [r3, #0]
2000f41e:	685b      	ldreq	r3, [r3, #4]
2000f420:	1949      	addeq	r1, r1, r5
2000f422:	6021      	streq	r1, [r4, #0]
2000f424:	e7ed      	b.n	2000f402 <_free_r+0x22>
2000f426:	461a      	mov	r2, r3
2000f428:	685b      	ldr	r3, [r3, #4]
2000f42a:	b10b      	cbz	r3, 2000f430 <_free_r+0x50>
2000f42c:	42a3      	cmp	r3, r4
2000f42e:	d9fa      	bls.n	2000f426 <_free_r+0x46>
2000f430:	6811      	ldr	r1, [r2, #0]
2000f432:	1855      	adds	r5, r2, r1
2000f434:	42a5      	cmp	r5, r4
2000f436:	d10b      	bne.n	2000f450 <_free_r+0x70>
2000f438:	6824      	ldr	r4, [r4, #0]
2000f43a:	4421      	add	r1, r4
2000f43c:	1854      	adds	r4, r2, r1
2000f43e:	42a3      	cmp	r3, r4
2000f440:	6011      	str	r1, [r2, #0]
2000f442:	d1e0      	bne.n	2000f406 <_free_r+0x26>
2000f444:	681c      	ldr	r4, [r3, #0]
2000f446:	685b      	ldr	r3, [r3, #4]
2000f448:	6053      	str	r3, [r2, #4]
2000f44a:	4421      	add	r1, r4
2000f44c:	6011      	str	r1, [r2, #0]
2000f44e:	e7da      	b.n	2000f406 <_free_r+0x26>
2000f450:	d902      	bls.n	2000f458 <_free_r+0x78>
2000f452:	230c      	movs	r3, #12
2000f454:	6003      	str	r3, [r0, #0]
2000f456:	e7d6      	b.n	2000f406 <_free_r+0x26>
2000f458:	6825      	ldr	r5, [r4, #0]
2000f45a:	1961      	adds	r1, r4, r5
2000f45c:	428b      	cmp	r3, r1
2000f45e:	bf04      	itt	eq
2000f460:	6819      	ldreq	r1, [r3, #0]
2000f462:	685b      	ldreq	r3, [r3, #4]
2000f464:	6063      	str	r3, [r4, #4]
2000f466:	bf04      	itt	eq
2000f468:	1949      	addeq	r1, r1, r5
2000f46a:	6021      	streq	r1, [r4, #0]
2000f46c:	6054      	str	r4, [r2, #4]
2000f46e:	e7ca      	b.n	2000f406 <_free_r+0x26>
2000f470:	b003      	add	sp, #12
2000f472:	bd30      	pop	{r4, r5, pc}
2000f474:	2000fcbc 	.word	0x2000fcbc

2000f478 <sbrk_aligned>:
2000f478:	b570      	push	{r4, r5, r6, lr}
2000f47a:	4e0e      	ldr	r6, [pc, #56]	; (2000f4b4 <sbrk_aligned+0x3c>)
2000f47c:	460c      	mov	r4, r1
2000f47e:	6831      	ldr	r1, [r6, #0]
2000f480:	4605      	mov	r5, r0
2000f482:	b911      	cbnz	r1, 2000f48a <sbrk_aligned+0x12>
2000f484:	f000 f8bc 	bl	2000f600 <_sbrk_r>
2000f488:	6030      	str	r0, [r6, #0]
2000f48a:	4621      	mov	r1, r4
2000f48c:	4628      	mov	r0, r5
2000f48e:	f000 f8b7 	bl	2000f600 <_sbrk_r>
2000f492:	1c43      	adds	r3, r0, #1
2000f494:	d00a      	beq.n	2000f4ac <sbrk_aligned+0x34>
2000f496:	1cc4      	adds	r4, r0, #3
2000f498:	f024 0403 	bic.w	r4, r4, #3
2000f49c:	42a0      	cmp	r0, r4
2000f49e:	d007      	beq.n	2000f4b0 <sbrk_aligned+0x38>
2000f4a0:	1a21      	subs	r1, r4, r0
2000f4a2:	4628      	mov	r0, r5
2000f4a4:	f000 f8ac 	bl	2000f600 <_sbrk_r>
2000f4a8:	3001      	adds	r0, #1
2000f4aa:	d101      	bne.n	2000f4b0 <sbrk_aligned+0x38>
2000f4ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
2000f4b0:	4620      	mov	r0, r4
2000f4b2:	bd70      	pop	{r4, r5, r6, pc}
2000f4b4:	2000fcc0 	.word	0x2000fcc0

2000f4b8 <_malloc_r>:
2000f4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000f4bc:	1ccd      	adds	r5, r1, #3
2000f4be:	f025 0503 	bic.w	r5, r5, #3
2000f4c2:	3508      	adds	r5, #8
2000f4c4:	2d0c      	cmp	r5, #12
2000f4c6:	bf38      	it	cc
2000f4c8:	250c      	movcc	r5, #12
2000f4ca:	2d00      	cmp	r5, #0
2000f4cc:	4607      	mov	r7, r0
2000f4ce:	db01      	blt.n	2000f4d4 <_malloc_r+0x1c>
2000f4d0:	42a9      	cmp	r1, r5
2000f4d2:	d905      	bls.n	2000f4e0 <_malloc_r+0x28>
2000f4d4:	230c      	movs	r3, #12
2000f4d6:	603b      	str	r3, [r7, #0]
2000f4d8:	2600      	movs	r6, #0
2000f4da:	4630      	mov	r0, r6
2000f4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2000f4e0:	4e2e      	ldr	r6, [pc, #184]	; (2000f59c <_malloc_r+0xe4>)
2000f4e2:	f000 f89d 	bl	2000f620 <__malloc_lock>
2000f4e6:	6833      	ldr	r3, [r6, #0]
2000f4e8:	461c      	mov	r4, r3
2000f4ea:	bb34      	cbnz	r4, 2000f53a <_malloc_r+0x82>
2000f4ec:	4629      	mov	r1, r5
2000f4ee:	4638      	mov	r0, r7
2000f4f0:	f7ff ffc2 	bl	2000f478 <sbrk_aligned>
2000f4f4:	1c43      	adds	r3, r0, #1
2000f4f6:	4604      	mov	r4, r0
2000f4f8:	d14d      	bne.n	2000f596 <_malloc_r+0xde>
2000f4fa:	6834      	ldr	r4, [r6, #0]
2000f4fc:	4626      	mov	r6, r4
2000f4fe:	2e00      	cmp	r6, #0
2000f500:	d140      	bne.n	2000f584 <_malloc_r+0xcc>
2000f502:	6823      	ldr	r3, [r4, #0]
2000f504:	4631      	mov	r1, r6
2000f506:	4638      	mov	r0, r7
2000f508:	eb04 0803 	add.w	r8, r4, r3
2000f50c:	f000 f878 	bl	2000f600 <_sbrk_r>
2000f510:	4580      	cmp	r8, r0
2000f512:	d13a      	bne.n	2000f58a <_malloc_r+0xd2>
2000f514:	6821      	ldr	r1, [r4, #0]
2000f516:	3503      	adds	r5, #3
2000f518:	1a6d      	subs	r5, r5, r1
2000f51a:	f025 0503 	bic.w	r5, r5, #3
2000f51e:	3508      	adds	r5, #8
2000f520:	2d0c      	cmp	r5, #12
2000f522:	bf38      	it	cc
2000f524:	250c      	movcc	r5, #12
2000f526:	4629      	mov	r1, r5
2000f528:	4638      	mov	r0, r7
2000f52a:	f7ff ffa5 	bl	2000f478 <sbrk_aligned>
2000f52e:	3001      	adds	r0, #1
2000f530:	d02b      	beq.n	2000f58a <_malloc_r+0xd2>
2000f532:	6823      	ldr	r3, [r4, #0]
2000f534:	442b      	add	r3, r5
2000f536:	6023      	str	r3, [r4, #0]
2000f538:	e00e      	b.n	2000f558 <_malloc_r+0xa0>
2000f53a:	6822      	ldr	r2, [r4, #0]
2000f53c:	1b52      	subs	r2, r2, r5
2000f53e:	d41e      	bmi.n	2000f57e <_malloc_r+0xc6>
2000f540:	2a0b      	cmp	r2, #11
2000f542:	d916      	bls.n	2000f572 <_malloc_r+0xba>
2000f544:	1961      	adds	r1, r4, r5
2000f546:	42a3      	cmp	r3, r4
2000f548:	6025      	str	r5, [r4, #0]
2000f54a:	bf18      	it	ne
2000f54c:	6059      	strne	r1, [r3, #4]
2000f54e:	6863      	ldr	r3, [r4, #4]
2000f550:	bf08      	it	eq
2000f552:	6031      	streq	r1, [r6, #0]
2000f554:	5162      	str	r2, [r4, r5]
2000f556:	604b      	str	r3, [r1, #4]
2000f558:	4638      	mov	r0, r7
2000f55a:	f104 060b 	add.w	r6, r4, #11
2000f55e:	f000 f865 	bl	2000f62c <__malloc_unlock>
2000f562:	f026 0607 	bic.w	r6, r6, #7
2000f566:	1d23      	adds	r3, r4, #4
2000f568:	1af2      	subs	r2, r6, r3
2000f56a:	d0b6      	beq.n	2000f4da <_malloc_r+0x22>
2000f56c:	1b9b      	subs	r3, r3, r6
2000f56e:	50a3      	str	r3, [r4, r2]
2000f570:	e7b3      	b.n	2000f4da <_malloc_r+0x22>
2000f572:	6862      	ldr	r2, [r4, #4]
2000f574:	42a3      	cmp	r3, r4
2000f576:	bf0c      	ite	eq
2000f578:	6032      	streq	r2, [r6, #0]
2000f57a:	605a      	strne	r2, [r3, #4]
2000f57c:	e7ec      	b.n	2000f558 <_malloc_r+0xa0>
2000f57e:	4623      	mov	r3, r4
2000f580:	6864      	ldr	r4, [r4, #4]
2000f582:	e7b2      	b.n	2000f4ea <_malloc_r+0x32>
2000f584:	4634      	mov	r4, r6
2000f586:	6876      	ldr	r6, [r6, #4]
2000f588:	e7b9      	b.n	2000f4fe <_malloc_r+0x46>
2000f58a:	230c      	movs	r3, #12
2000f58c:	603b      	str	r3, [r7, #0]
2000f58e:	4638      	mov	r0, r7
2000f590:	f000 f84c 	bl	2000f62c <__malloc_unlock>
2000f594:	e7a1      	b.n	2000f4da <_malloc_r+0x22>
2000f596:	6025      	str	r5, [r4, #0]
2000f598:	e7de      	b.n	2000f558 <_malloc_r+0xa0>
2000f59a:	bf00      	nop
2000f59c:	2000fcbc 	.word	0x2000fcbc

2000f5a0 <_realloc_r>:
2000f5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000f5a4:	4680      	mov	r8, r0
2000f5a6:	4614      	mov	r4, r2
2000f5a8:	460e      	mov	r6, r1
2000f5aa:	b921      	cbnz	r1, 2000f5b6 <_realloc_r+0x16>
2000f5ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
2000f5b0:	4611      	mov	r1, r2
2000f5b2:	f7ff bf81 	b.w	2000f4b8 <_malloc_r>
2000f5b6:	b92a      	cbnz	r2, 2000f5c4 <_realloc_r+0x24>
2000f5b8:	f7ff ff12 	bl	2000f3e0 <_free_r>
2000f5bc:	4625      	mov	r5, r4
2000f5be:	4628      	mov	r0, r5
2000f5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2000f5c4:	f000 f838 	bl	2000f638 <_malloc_usable_size_r>
2000f5c8:	4284      	cmp	r4, r0
2000f5ca:	4607      	mov	r7, r0
2000f5cc:	d802      	bhi.n	2000f5d4 <_realloc_r+0x34>
2000f5ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
2000f5d2:	d812      	bhi.n	2000f5fa <_realloc_r+0x5a>
2000f5d4:	4621      	mov	r1, r4
2000f5d6:	4640      	mov	r0, r8
2000f5d8:	f7ff ff6e 	bl	2000f4b8 <_malloc_r>
2000f5dc:	4605      	mov	r5, r0
2000f5de:	2800      	cmp	r0, #0
2000f5e0:	d0ed      	beq.n	2000f5be <_realloc_r+0x1e>
2000f5e2:	42bc      	cmp	r4, r7
2000f5e4:	4622      	mov	r2, r4
2000f5e6:	4631      	mov	r1, r6
2000f5e8:	bf28      	it	cs
2000f5ea:	463a      	movcs	r2, r7
2000f5ec:	f7ff fed0 	bl	2000f390 <memcpy>
2000f5f0:	4631      	mov	r1, r6
2000f5f2:	4640      	mov	r0, r8
2000f5f4:	f7ff fef4 	bl	2000f3e0 <_free_r>
2000f5f8:	e7e1      	b.n	2000f5be <_realloc_r+0x1e>
2000f5fa:	4635      	mov	r5, r6
2000f5fc:	e7df      	b.n	2000f5be <_realloc_r+0x1e>
	...

2000f600 <_sbrk_r>:
2000f600:	b538      	push	{r3, r4, r5, lr}
2000f602:	4d06      	ldr	r5, [pc, #24]	; (2000f61c <_sbrk_r+0x1c>)
2000f604:	2300      	movs	r3, #0
2000f606:	4604      	mov	r4, r0
2000f608:	4608      	mov	r0, r1
2000f60a:	602b      	str	r3, [r5, #0]
2000f60c:	f7fe f9da 	bl	2000d9c4 <_sbrk>
2000f610:	1c43      	adds	r3, r0, #1
2000f612:	d102      	bne.n	2000f61a <_sbrk_r+0x1a>
2000f614:	682b      	ldr	r3, [r5, #0]
2000f616:	b103      	cbz	r3, 2000f61a <_sbrk_r+0x1a>
2000f618:	6023      	str	r3, [r4, #0]
2000f61a:	bd38      	pop	{r3, r4, r5, pc}
2000f61c:	2000fcc4 	.word	0x2000fcc4

2000f620 <__malloc_lock>:
2000f620:	4801      	ldr	r0, [pc, #4]	; (2000f628 <__malloc_lock+0x8>)
2000f622:	f000 b811 	b.w	2000f648 <__retarget_lock_acquire_recursive>
2000f626:	bf00      	nop
2000f628:	2000fcc8 	.word	0x2000fcc8

2000f62c <__malloc_unlock>:
2000f62c:	4801      	ldr	r0, [pc, #4]	; (2000f634 <__malloc_unlock+0x8>)
2000f62e:	f000 b80c 	b.w	2000f64a <__retarget_lock_release_recursive>
2000f632:	bf00      	nop
2000f634:	2000fcc8 	.word	0x2000fcc8

2000f638 <_malloc_usable_size_r>:
2000f638:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000f63c:	1f18      	subs	r0, r3, #4
2000f63e:	2b00      	cmp	r3, #0
2000f640:	bfbc      	itt	lt
2000f642:	580b      	ldrlt	r3, [r1, r0]
2000f644:	18c0      	addlt	r0, r0, r3
2000f646:	4770      	bx	lr

2000f648 <__retarget_lock_acquire_recursive>:
2000f648:	4770      	bx	lr

2000f64a <__retarget_lock_release_recursive>:
2000f64a:	4770      	bx	lr

2000f64c <_init>:
2000f64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000f64e:	bf00      	nop
2000f650:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000f652:	bc08      	pop	{r3}
2000f654:	469e      	mov	lr, r3
2000f656:	4770      	bx	lr

2000f658 <_fini>:
2000f658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000f65a:	bf00      	nop
2000f65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000f65e:	bc08      	pop	{r3}
2000f660:	469e      	mov	lr, r3
2000f662:	4770      	bx	lr
